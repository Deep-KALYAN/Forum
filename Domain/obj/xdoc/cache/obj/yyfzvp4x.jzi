id: Domain
language: CSharp
name:
  Default: Domain
qualifiedName:
  Default: Domain
type: Assembly
modifiers: {}
items:
- id: Domaine
  commentId: N:Domaine
  language: CSharp
  name:
    CSharp: Domaine
    VB: Domaine
  nameWithType:
    CSharp: Domaine
    VB: Domaine
  qualifiedName:
    CSharp: Domaine
    VB: Domaine
  type: Namespace
  assemblies:
  - Domain
  modifiers: {}
  items:
  - id: Domaine.DomainExtensions
    commentId: T:Domaine.DomainExtensions
    language: CSharp
    name:
      CSharp: DomainExtensions
      VB: DomainExtensions
    nameWithType:
      CSharp: DomainExtensions
      VB: DomainExtensions
    qualifiedName:
      CSharp: Domaine.DomainExtensions
      VB: Domaine.DomainExtensions
    type: Class
    assemblies:
    - Domain
    namespace: Domaine
    source:
      remote:
        path: Domain/DomainExtensions.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: DomainExtensions
      path: ../Domain/DomainExtensions.cs
      startLine: 7
    syntax:
      content:
        CSharp: public static class DomainExtensions
        VB: Public Module DomainExtensions
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - isExtensionMethod: true
      id: Domaine.DomainExtensions.AddDomain(Microsoft.Extensions.DependencyInjection.IServiceCollection)
      commentId: M:Domaine.DomainExtensions.AddDomain(Microsoft.Extensions.DependencyInjection.IServiceCollection)
      language: CSharp
      name:
        CSharp: AddDomain(IServiceCollection)
        VB: AddDomain(IServiceCollection)
      nameWithType:
        CSharp: DomainExtensions.AddDomain(IServiceCollection)
        VB: DomainExtensions.AddDomain(IServiceCollection)
      qualifiedName:
        CSharp: Domaine.DomainExtensions.AddDomain(Microsoft.Extensions.DependencyInjection.IServiceCollection)
        VB: Domaine.DomainExtensions.AddDomain(Microsoft.Extensions.DependencyInjection.IServiceCollection)
      type: Method
      assemblies:
      - Domain
      namespace: Domaine
      source:
        remote:
          path: Domain/DomainExtensions.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: AddDomain
        path: ../Domain/DomainExtensions.cs
        startLine: 9
      syntax:
        content:
          CSharp: public static void AddDomain(this IServiceCollection service)
          VB: >-
            <ExtensionAttribute>

            Public Shared Sub AddDomain(service As IServiceCollection)
        parameters:
        - id: service
          type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      overload: Domaine.DomainExtensions.AddDomain*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
- id: Domain.DTO
  commentId: N:Domain.DTO
  language: CSharp
  name:
    CSharp: Domain.DTO
    VB: Domain.DTO
  nameWithType:
    CSharp: Domain.DTO
    VB: Domain.DTO
  qualifiedName:
    CSharp: Domain.DTO
    VB: Domain.DTO
  type: Namespace
  assemblies:
  - Domain
  modifiers: {}
  items:
  - id: Domain.DTO.CreateUserRequestDTO
    commentId: T:Domain.DTO.CreateUserRequestDTO
    language: CSharp
    name:
      CSharp: CreateUserRequestDTO
      VB: CreateUserRequestDTO
    nameWithType:
      CSharp: CreateUserRequestDTO
      VB: CreateUserRequestDTO
    qualifiedName:
      CSharp: Domain.DTO.CreateUserRequestDTO
      VB: Domain.DTO.CreateUserRequestDTO
    type: Class
    assemblies:
    - Domain
    namespace: Domain.DTO
    source:
      remote:
        path: Domain/DTO/Requestes/Users/CreateUserRequestDTO.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: CreateUserRequestDTO
      path: ../Domain/DTO/Requestes/Users/CreateUserRequestDTO.cs
      startLine: 10
    syntax:
      content:
        CSharp: public class CreateUserRequestDTO
        VB: Public Class CreateUserRequestDTO
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.DTO.CreateUserRequestDTO.Name
      commentId: P:Domain.DTO.CreateUserRequestDTO.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: CreateUserRequestDTO.Name
        VB: CreateUserRequestDTO.Name
      qualifiedName:
        CSharp: Domain.DTO.CreateUserRequestDTO.Name
        VB: Domain.DTO.CreateUserRequestDTO.Name
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO
      source:
        remote:
          path: Domain/DTO/Requestes/Users/CreateUserRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Name
        path: ../Domain/DTO/Requestes/Users/CreateUserRequestDTO.cs
        startLine: 12
      syntax:
        content:
          CSharp: public string Name { get; set; }
          VB: Public Property Name As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.CreateUserRequestDTO.Name*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.CreateUserRequestDTO.First_Name
      commentId: P:Domain.DTO.CreateUserRequestDTO.First_Name
      language: CSharp
      name:
        CSharp: First_Name
        VB: First_Name
      nameWithType:
        CSharp: CreateUserRequestDTO.First_Name
        VB: CreateUserRequestDTO.First_Name
      qualifiedName:
        CSharp: Domain.DTO.CreateUserRequestDTO.First_Name
        VB: Domain.DTO.CreateUserRequestDTO.First_Name
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO
      source:
        remote:
          path: Domain/DTO/Requestes/Users/CreateUserRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: First_Name
        path: ../Domain/DTO/Requestes/Users/CreateUserRequestDTO.cs
        startLine: 13
      syntax:
        content:
          CSharp: public string First_Name { get; set; }
          VB: Public Property First_Name As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.CreateUserRequestDTO.First_Name*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.CreateUserRequestDTO.Login_Name
      commentId: P:Domain.DTO.CreateUserRequestDTO.Login_Name
      language: CSharp
      name:
        CSharp: Login_Name
        VB: Login_Name
      nameWithType:
        CSharp: CreateUserRequestDTO.Login_Name
        VB: CreateUserRequestDTO.Login_Name
      qualifiedName:
        CSharp: Domain.DTO.CreateUserRequestDTO.Login_Name
        VB: Domain.DTO.CreateUserRequestDTO.Login_Name
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO
      source:
        remote:
          path: Domain/DTO/Requestes/Users/CreateUserRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Login_Name
        path: ../Domain/DTO/Requestes/Users/CreateUserRequestDTO.cs
        startLine: 14
      syntax:
        content:
          CSharp: public string Login_Name { get; set; }
          VB: Public Property Login_Name As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.CreateUserRequestDTO.Login_Name*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.CreateUserRequestDTO.Ph_No
      commentId: P:Domain.DTO.CreateUserRequestDTO.Ph_No
      language: CSharp
      name:
        CSharp: Ph_No
        VB: Ph_No
      nameWithType:
        CSharp: CreateUserRequestDTO.Ph_No
        VB: CreateUserRequestDTO.Ph_No
      qualifiedName:
        CSharp: Domain.DTO.CreateUserRequestDTO.Ph_No
        VB: Domain.DTO.CreateUserRequestDTO.Ph_No
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO
      source:
        remote:
          path: Domain/DTO/Requestes/Users/CreateUserRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Ph_No
        path: ../Domain/DTO/Requestes/Users/CreateUserRequestDTO.cs
        startLine: 15
      syntax:
        content:
          CSharp: public string Ph_No { get; set; }
          VB: Public Property Ph_No As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.CreateUserRequestDTO.Ph_No*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.CreateUserRequestDTO.E_Mail
      commentId: P:Domain.DTO.CreateUserRequestDTO.E_Mail
      language: CSharp
      name:
        CSharp: E_Mail
        VB: E_Mail
      nameWithType:
        CSharp: CreateUserRequestDTO.E_Mail
        VB: CreateUserRequestDTO.E_Mail
      qualifiedName:
        CSharp: Domain.DTO.CreateUserRequestDTO.E_Mail
        VB: Domain.DTO.CreateUserRequestDTO.E_Mail
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO
      source:
        remote:
          path: Domain/DTO/Requestes/Users/CreateUserRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: E_Mail
        path: ../Domain/DTO/Requestes/Users/CreateUserRequestDTO.cs
        startLine: 17
      syntax:
        content:
          CSharp: public string E_Mail { get; set; }
          VB: Public Property E_Mail As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.CreateUserRequestDTO.E_Mail*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.CreateUserRequestDTO.Password
      commentId: P:Domain.DTO.CreateUserRequestDTO.Password
      language: CSharp
      name:
        CSharp: Password
        VB: Password
      nameWithType:
        CSharp: CreateUserRequestDTO.Password
        VB: CreateUserRequestDTO.Password
      qualifiedName:
        CSharp: Domain.DTO.CreateUserRequestDTO.Password
        VB: Domain.DTO.CreateUserRequestDTO.Password
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO
      source:
        remote:
          path: Domain/DTO/Requestes/Users/CreateUserRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Password
        path: ../Domain/DTO/Requestes/Users/CreateUserRequestDTO.cs
        startLine: 18
      syntax:
        content:
          CSharp: public string Password { get; set; }
          VB: Public Property Password As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.CreateUserRequestDTO.Password*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: Domain.DTO.CreateUserRequestDTOValidator
    commentId: T:Domain.DTO.CreateUserRequestDTOValidator
    language: CSharp
    name:
      CSharp: CreateUserRequestDTOValidator
      VB: CreateUserRequestDTOValidator
    nameWithType:
      CSharp: CreateUserRequestDTOValidator
      VB: CreateUserRequestDTOValidator
    qualifiedName:
      CSharp: Domain.DTO.CreateUserRequestDTOValidator
      VB: Domain.DTO.CreateUserRequestDTOValidator
    type: Class
    assemblies:
    - Domain
    namespace: Domain.DTO
    source:
      remote:
        path: Domain/DTO/Requestes/Users/CreateUserRequestDTO.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: CreateUserRequestDTOValidator
      path: ../Domain/DTO/Requestes/Users/CreateUserRequestDTO.cs
      startLine: 23
    syntax:
      content:
        CSharp: 'public class CreateUserRequestDTOValidator : AbstractValidator<CreateUserRequestDTO>, IValidator<CreateUserRequestDTO>, IValidator, IEnumerable<IValidationRule>, IEnumerable'
        VB: >-
          Public Class CreateUserRequestDTOValidator

              Inherits AbstractValidator(Of CreateUserRequestDTO)

              Implements IValidator(Of CreateUserRequestDTO), IValidator, IEnumerable(Of IValidationRule), IEnumerable
    inheritance:
    - System.Object
    - FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}
    implements:
    - FluentValidation.IValidator{Domain.DTO.CreateUserRequestDTO}
    - FluentValidation.IValidator
    - System.Collections.Generic.IEnumerable{FluentValidation.IValidationRule}
    - System.Collections.IEnumerable
    inheritedMembers:
    - FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
    - FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
    - FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.Validate(Domain.DTO.CreateUserRequestDTO)
    - FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.ValidateAsync(Domain.DTO.CreateUserRequestDTO,System.Threading.CancellationToken)
    - FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.Validate(FluentValidation.ValidationContext{Domain.DTO.CreateUserRequestDTO})
    - FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.ValidateAsync(FluentValidation.ValidationContext{Domain.DTO.CreateUserRequestDTO},System.Threading.CancellationToken)
    - FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.CreateDescriptor
    - FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
    - FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.RuleFor``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.CreateUserRequestDTO,{TProperty}}})
    - FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.CreateUserRequestDTO,{TProperty}}},System.Func{{TProperty},{TTransformed}})
    - FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.CreateUserRequestDTO,{TProperty}}},System.Func{Domain.DTO.CreateUserRequestDTO,{TProperty},{TTransformed}})
    - FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.CreateUserRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}})
    - FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.CreateUserRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}},System.Func{{TElement},{TTransformed}})
    - FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.CreateUserRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}},System.Func{Domain.DTO.CreateUserRequestDTO,{TElement},{TTransformed}})
    - FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.RuleSet(System.String,System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.When(System.Func{Domain.DTO.CreateUserRequestDTO,System.Boolean},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.When(System.Func{Domain.DTO.CreateUserRequestDTO,FluentValidation.ValidationContext{Domain.DTO.CreateUserRequestDTO},System.Boolean},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.Unless(System.Func{Domain.DTO.CreateUserRequestDTO,System.Boolean},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.Unless(System.Func{Domain.DTO.CreateUserRequestDTO,FluentValidation.ValidationContext{Domain.DTO.CreateUserRequestDTO},System.Boolean},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.WhenAsync(System.Func{Domain.DTO.CreateUserRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.WhenAsync(System.Func{Domain.DTO.CreateUserRequestDTO,FluentValidation.ValidationContext{Domain.DTO.CreateUserRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.UnlessAsync(System.Func{Domain.DTO.CreateUserRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.UnlessAsync(System.Func{Domain.DTO.CreateUserRequestDTO,FluentValidation.ValidationContext{Domain.DTO.CreateUserRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.Include(FluentValidation.IValidator{Domain.DTO.CreateUserRequestDTO})
    - FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.Include``1(System.Func{Domain.DTO.CreateUserRequestDTO,{TValidator}})
    - FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.GetEnumerator
    - FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.System#Collections#IEnumerable#GetEnumerator
    - FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.EnsureInstanceNotNull(System.Object)
    - FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.PreValidate(FluentValidation.ValidationContext{Domain.DTO.CreateUserRequestDTO},FluentValidation.Results.ValidationResult)
    - FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.RaiseValidationException(FluentValidation.ValidationContext{Domain.DTO.CreateUserRequestDTO},FluentValidation.Results.ValidationResult)
    - FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.CascadeMode
    - FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.ClassLevelCascadeMode
    - FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.RuleLevelCascadeMode
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.DTO.CreateUserRequestDTOValidator.#ctor
      commentId: M:Domain.DTO.CreateUserRequestDTOValidator.#ctor
      language: CSharp
      name:
        CSharp: CreateUserRequestDTOValidator()
        VB: CreateUserRequestDTOValidator()
      nameWithType:
        CSharp: CreateUserRequestDTOValidator.CreateUserRequestDTOValidator()
        VB: CreateUserRequestDTOValidator.CreateUserRequestDTOValidator()
      qualifiedName:
        CSharp: Domain.DTO.CreateUserRequestDTOValidator.CreateUserRequestDTOValidator()
        VB: Domain.DTO.CreateUserRequestDTOValidator.CreateUserRequestDTOValidator()
      type: Constructor
      assemblies:
      - Domain
      namespace: Domain.DTO
      source:
        remote:
          path: Domain/DTO/Requestes/Users/CreateUserRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: .ctor
        path: ../Domain/DTO/Requestes/Users/CreateUserRequestDTO.cs
        startLine: 25
      syntax:
        content:
          CSharp: public CreateUserRequestDTOValidator()
          VB: Public Sub New
      overload: Domain.DTO.CreateUserRequestDTOValidator.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
- id: Domain.DTO.Requestes.Replies
  commentId: N:Domain.DTO.Requestes.Replies
  language: CSharp
  name:
    CSharp: Domain.DTO.Requestes.Replies
    VB: Domain.DTO.Requestes.Replies
  nameWithType:
    CSharp: Domain.DTO.Requestes.Replies
    VB: Domain.DTO.Requestes.Replies
  qualifiedName:
    CSharp: Domain.DTO.Requestes.Replies
    VB: Domain.DTO.Requestes.Replies
  type: Namespace
  assemblies:
  - Domain
  modifiers: {}
  items:
  - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
    commentId: T:Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
    language: CSharp
    name:
      CSharp: CreateReplyRequestDTO
      VB: CreateReplyRequestDTO
    nameWithType:
      CSharp: CreateReplyRequestDTO
      VB: CreateReplyRequestDTO
    qualifiedName:
      CSharp: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      VB: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
    type: Class
    assemblies:
    - Domain
    namespace: Domain.DTO.Requestes.Replies
    source:
      remote:
        path: Domain/DTO/Requestes/Replies/CreateReplyRequestDTO.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: CreateReplyRequestDTO
      path: ../Domain/DTO/Requestes/Replies/CreateReplyRequestDTO.cs
      startLine: 9
    syntax:
      content:
        CSharp: public class CreateReplyRequestDTO
        VB: Public Class CreateReplyRequestDTO
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.UserId
      commentId: P:Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.UserId
      language: CSharp
      name:
        CSharp: UserId
        VB: UserId
      nameWithType:
        CSharp: CreateReplyRequestDTO.UserId
        VB: CreateReplyRequestDTO.UserId
      qualifiedName:
        CSharp: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.UserId
        VB: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.UserId
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Requestes.Replies
      source:
        remote:
          path: Domain/DTO/Requestes/Replies/CreateReplyRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: UserId
        path: ../Domain/DTO/Requestes/Replies/CreateReplyRequestDTO.cs
        startLine: 11
      syntax:
        content:
          CSharp: public int UserId { get; set; }
          VB: Public Property UserId As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.UserId*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.ReplyText
      commentId: P:Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.ReplyText
      language: CSharp
      name:
        CSharp: ReplyText
        VB: ReplyText
      nameWithType:
        CSharp: CreateReplyRequestDTO.ReplyText
        VB: CreateReplyRequestDTO.ReplyText
      qualifiedName:
        CSharp: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.ReplyText
        VB: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.ReplyText
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Requestes.Replies
      source:
        remote:
          path: Domain/DTO/Requestes/Replies/CreateReplyRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: ReplyText
        path: ../Domain/DTO/Requestes/Replies/CreateReplyRequestDTO.cs
        startLine: 12
      syntax:
        content:
          CSharp: public string ReplyText { get; set; }
          VB: Public Property ReplyText As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.ReplyText*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.ReplyParentId
      commentId: P:Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.ReplyParentId
      language: CSharp
      name:
        CSharp: ReplyParentId
        VB: ReplyParentId
      nameWithType:
        CSharp: CreateReplyRequestDTO.ReplyParentId
        VB: CreateReplyRequestDTO.ReplyParentId
      qualifiedName:
        CSharp: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.ReplyParentId
        VB: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.ReplyParentId
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Requestes.Replies
      source:
        remote:
          path: Domain/DTO/Requestes/Replies/CreateReplyRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: ReplyParentId
        path: ../Domain/DTO/Requestes/Replies/CreateReplyRequestDTO.cs
        startLine: 13
      syntax:
        content:
          CSharp: public int? ReplyParentId { get; set; }
          VB: Public Property ReplyParentId As Integer?
        parameters: []
        return:
          type: System.Nullable{System.Int32}
      overload: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.ReplyParentId*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.ReplyTopicId
      commentId: P:Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.ReplyTopicId
      language: CSharp
      name:
        CSharp: ReplyTopicId
        VB: ReplyTopicId
      nameWithType:
        CSharp: CreateReplyRequestDTO.ReplyTopicId
        VB: CreateReplyRequestDTO.ReplyTopicId
      qualifiedName:
        CSharp: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.ReplyTopicId
        VB: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.ReplyTopicId
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Requestes.Replies
      source:
        remote:
          path: Domain/DTO/Requestes/Replies/CreateReplyRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: ReplyTopicId
        path: ../Domain/DTO/Requestes/Replies/CreateReplyRequestDTO.cs
        startLine: 14
      syntax:
        content:
          CSharp: public int ReplyTopicId { get; set; }
          VB: Public Property ReplyTopicId As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.ReplyTopicId*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTOValidator
    commentId: T:Domain.DTO.Requestes.Replies.CreateReplyRequestDTOValidator
    language: CSharp
    name:
      CSharp: CreateReplyRequestDTOValidator
      VB: CreateReplyRequestDTOValidator
    nameWithType:
      CSharp: CreateReplyRequestDTOValidator
      VB: CreateReplyRequestDTOValidator
    qualifiedName:
      CSharp: Domain.DTO.Requestes.Replies.CreateReplyRequestDTOValidator
      VB: Domain.DTO.Requestes.Replies.CreateReplyRequestDTOValidator
    type: Class
    assemblies:
    - Domain
    namespace: Domain.DTO.Requestes.Replies
    source:
      remote:
        path: Domain/DTO/Requestes/Replies/CreateReplyRequestDTO.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: CreateReplyRequestDTOValidator
      path: ../Domain/DTO/Requestes/Replies/CreateReplyRequestDTO.cs
      startLine: 18
    syntax:
      content:
        CSharp: 'public class CreateReplyRequestDTOValidator : AbstractValidator<CreateReplyRequestDTO>, IValidator<CreateReplyRequestDTO>, IValidator, IEnumerable<IValidationRule>, IEnumerable'
        VB: >-
          Public Class CreateReplyRequestDTOValidator

              Inherits AbstractValidator(Of CreateReplyRequestDTO)

              Implements IValidator(Of CreateReplyRequestDTO), IValidator, IEnumerable(Of IValidationRule), IEnumerable
    inheritance:
    - System.Object
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
    implements:
    - FluentValidation.IValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
    - FluentValidation.IValidator
    - System.Collections.Generic.IEnumerable{FluentValidation.IValidationRule}
    - System.Collections.IEnumerable
    inheritedMembers:
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.Validate(Domain.DTO.Requestes.Replies.CreateReplyRequestDTO)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.ValidateAsync(Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,System.Threading.CancellationToken)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.Validate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.ValidateAsync(FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO},System.Threading.CancellationToken)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.CreateDescriptor
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.RuleFor``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,{TProperty}}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,{TProperty}}},System.Func{{TProperty},{TTransformed}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,{TProperty}}},System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,{TProperty},{TTransformed}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}},System.Func{{TElement},{TTransformed}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}},System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,{TElement},{TTransformed}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.RuleSet(System.String,System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.When(System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,System.Boolean},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.When(System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO},System.Boolean},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,System.Boolean},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO},System.Boolean},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.Include(FluentValidation.IValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.Include``1(System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,{TValidator}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.GetEnumerator
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.System#Collections#IEnumerable#GetEnumerator
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.EnsureInstanceNotNull(System.Object)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.PreValidate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO},FluentValidation.Results.ValidationResult)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.RaiseValidationException(FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO},FluentValidation.Results.ValidationResult)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.CascadeMode
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.ClassLevelCascadeMode
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.RuleLevelCascadeMode
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTOValidator.#ctor
      commentId: M:Domain.DTO.Requestes.Replies.CreateReplyRequestDTOValidator.#ctor
      language: CSharp
      name:
        CSharp: CreateReplyRequestDTOValidator()
        VB: CreateReplyRequestDTOValidator()
      nameWithType:
        CSharp: CreateReplyRequestDTOValidator.CreateReplyRequestDTOValidator()
        VB: CreateReplyRequestDTOValidator.CreateReplyRequestDTOValidator()
      qualifiedName:
        CSharp: Domain.DTO.Requestes.Replies.CreateReplyRequestDTOValidator.CreateReplyRequestDTOValidator()
        VB: Domain.DTO.Requestes.Replies.CreateReplyRequestDTOValidator.CreateReplyRequestDTOValidator()
      type: Constructor
      assemblies:
      - Domain
      namespace: Domain.DTO.Requestes.Replies
      source:
        remote:
          path: Domain/DTO/Requestes/Replies/CreateReplyRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: .ctor
        path: ../Domain/DTO/Requestes/Replies/CreateReplyRequestDTO.cs
        startLine: 20
      syntax:
        content:
          CSharp: public CreateReplyRequestDTOValidator()
          VB: Public Sub New
      overload: Domain.DTO.Requestes.Replies.CreateReplyRequestDTOValidator.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
    commentId: T:Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
    language: CSharp
    name:
      CSharp: UpdateReplyRequestDTO
      VB: UpdateReplyRequestDTO
    nameWithType:
      CSharp: UpdateReplyRequestDTO
      VB: UpdateReplyRequestDTO
    qualifiedName:
      CSharp: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      VB: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
    type: Class
    assemblies:
    - Domain
    namespace: Domain.DTO.Requestes.Replies
    source:
      remote:
        path: Domain/DTO/Requestes/Replies/UpdateReplyRequestDTO.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: UpdateReplyRequestDTO
      path: ../Domain/DTO/Requestes/Replies/UpdateReplyRequestDTO.cs
      startLine: 9
    syntax:
      content:
        CSharp: public class UpdateReplyRequestDTO
        VB: Public Class UpdateReplyRequestDTO
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO.ReplyText
      commentId: P:Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO.ReplyText
      language: CSharp
      name:
        CSharp: ReplyText
        VB: ReplyText
      nameWithType:
        CSharp: UpdateReplyRequestDTO.ReplyText
        VB: UpdateReplyRequestDTO.ReplyText
      qualifiedName:
        CSharp: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO.ReplyText
        VB: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO.ReplyText
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Requestes.Replies
      source:
        remote:
          path: Domain/DTO/Requestes/Replies/UpdateReplyRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: ReplyText
        path: ../Domain/DTO/Requestes/Replies/UpdateReplyRequestDTO.cs
        startLine: 11
      syntax:
        content:
          CSharp: public string ReplyText { get; set; }
          VB: Public Property ReplyText As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO.ReplyText*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO.ReplyId
      commentId: P:Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO.ReplyId
      language: CSharp
      name:
        CSharp: ReplyId
        VB: ReplyId
      nameWithType:
        CSharp: UpdateReplyRequestDTO.ReplyId
        VB: UpdateReplyRequestDTO.ReplyId
      qualifiedName:
        CSharp: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO.ReplyId
        VB: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO.ReplyId
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Requestes.Replies
      source:
        remote:
          path: Domain/DTO/Requestes/Replies/UpdateReplyRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: ReplyId
        path: ../Domain/DTO/Requestes/Replies/UpdateReplyRequestDTO.cs
        startLine: 12
      syntax:
        content:
          CSharp: public int ReplyId { get; set; }
          VB: Public Property ReplyId As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO.ReplyId*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO.IdUser
      commentId: P:Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO.IdUser
      language: CSharp
      name:
        CSharp: IdUser
        VB: IdUser
      nameWithType:
        CSharp: UpdateReplyRequestDTO.IdUser
        VB: UpdateReplyRequestDTO.IdUser
      qualifiedName:
        CSharp: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO.IdUser
        VB: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO.IdUser
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Requestes.Replies
      source:
        remote:
          path: Domain/DTO/Requestes/Replies/UpdateReplyRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: IdUser
        path: ../Domain/DTO/Requestes/Replies/UpdateReplyRequestDTO.cs
        startLine: 14
      syntax:
        content:
          CSharp: public int IdUser { get; set; }
          VB: Public Property IdUser As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO.IdUser*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTOValidator
    commentId: T:Domain.DTO.Requestes.Replies.UpdateReplyRequestDTOValidator
    language: CSharp
    name:
      CSharp: UpdateReplyRequestDTOValidator
      VB: UpdateReplyRequestDTOValidator
    nameWithType:
      CSharp: UpdateReplyRequestDTOValidator
      VB: UpdateReplyRequestDTOValidator
    qualifiedName:
      CSharp: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTOValidator
      VB: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTOValidator
    type: Class
    assemblies:
    - Domain
    namespace: Domain.DTO.Requestes.Replies
    source:
      remote:
        path: Domain/DTO/Requestes/Replies/UpdateReplyRequestDTO.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: UpdateReplyRequestDTOValidator
      path: ../Domain/DTO/Requestes/Replies/UpdateReplyRequestDTO.cs
      startLine: 18
    syntax:
      content:
        CSharp: 'public class UpdateReplyRequestDTOValidator : AbstractValidator<UpdateReplyRequestDTO>, IValidator<UpdateReplyRequestDTO>, IValidator, IEnumerable<IValidationRule>, IEnumerable'
        VB: >-
          Public Class UpdateReplyRequestDTOValidator

              Inherits AbstractValidator(Of UpdateReplyRequestDTO)

              Implements IValidator(Of UpdateReplyRequestDTO), IValidator, IEnumerable(Of IValidationRule), IEnumerable
    inheritance:
    - System.Object
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
    implements:
    - FluentValidation.IValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
    - FluentValidation.IValidator
    - System.Collections.Generic.IEnumerable{FluentValidation.IValidationRule}
    - System.Collections.IEnumerable
    inheritedMembers:
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.Validate(Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.ValidateAsync(Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,System.Threading.CancellationToken)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.Validate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.ValidateAsync(FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO},System.Threading.CancellationToken)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.CreateDescriptor
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.RuleFor``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,{TProperty}}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,{TProperty}}},System.Func{{TProperty},{TTransformed}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,{TProperty}}},System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,{TProperty},{TTransformed}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}},System.Func{{TElement},{TTransformed}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}},System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,{TElement},{TTransformed}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.RuleSet(System.String,System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.When(System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,System.Boolean},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.When(System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO},System.Boolean},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,System.Boolean},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO},System.Boolean},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.Include(FluentValidation.IValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.Include``1(System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,{TValidator}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.GetEnumerator
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.System#Collections#IEnumerable#GetEnumerator
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.EnsureInstanceNotNull(System.Object)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.PreValidate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO},FluentValidation.Results.ValidationResult)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.RaiseValidationException(FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO},FluentValidation.Results.ValidationResult)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.CascadeMode
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.ClassLevelCascadeMode
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.RuleLevelCascadeMode
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTOValidator.#ctor
      commentId: M:Domain.DTO.Requestes.Replies.UpdateReplyRequestDTOValidator.#ctor
      language: CSharp
      name:
        CSharp: UpdateReplyRequestDTOValidator()
        VB: UpdateReplyRequestDTOValidator()
      nameWithType:
        CSharp: UpdateReplyRequestDTOValidator.UpdateReplyRequestDTOValidator()
        VB: UpdateReplyRequestDTOValidator.UpdateReplyRequestDTOValidator()
      qualifiedName:
        CSharp: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTOValidator.UpdateReplyRequestDTOValidator()
        VB: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTOValidator.UpdateReplyRequestDTOValidator()
      type: Constructor
      assemblies:
      - Domain
      namespace: Domain.DTO.Requestes.Replies
      source:
        remote:
          path: Domain/DTO/Requestes/Replies/UpdateReplyRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: .ctor
        path: ../Domain/DTO/Requestes/Replies/UpdateReplyRequestDTO.cs
        startLine: 20
      syntax:
        content:
          CSharp: public UpdateReplyRequestDTOValidator()
          VB: Public Sub New
      overload: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTOValidator.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
- id: Domain.DTO.Requestes.Security
  commentId: N:Domain.DTO.Requestes.Security
  language: CSharp
  name:
    CSharp: Domain.DTO.Requestes.Security
    VB: Domain.DTO.Requestes.Security
  nameWithType:
    CSharp: Domain.DTO.Requestes.Security
    VB: Domain.DTO.Requestes.Security
  qualifiedName:
    CSharp: Domain.DTO.Requestes.Security
    VB: Domain.DTO.Requestes.Security
  type: Namespace
  assemblies:
  - Domain
  modifiers: {}
  items:
  - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
    commentId: T:Domain.DTO.Requestes.Security.AuthentificationRequestDTO
    language: CSharp
    name:
      CSharp: AuthentificationRequestDTO
      VB: AuthentificationRequestDTO
    nameWithType:
      CSharp: AuthentificationRequestDTO
      VB: AuthentificationRequestDTO
    qualifiedName:
      CSharp: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      VB: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
    type: Class
    assemblies:
    - Domain
    namespace: Domain.DTO.Requestes.Security
    source:
      remote:
        path: Domain/DTO/Requestes/Security/AuthentificationRequestDTO.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: AuthentificationRequestDTO
      path: ../Domain/DTO/Requestes/Security/AuthentificationRequestDTO.cs
      startLine: 9
    syntax:
      content:
        CSharp: public class AuthentificationRequestDTO
        VB: Public Class AuthentificationRequestDTO
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO.Login_name
      commentId: P:Domain.DTO.Requestes.Security.AuthentificationRequestDTO.Login_name
      language: CSharp
      name:
        CSharp: Login_name
        VB: Login_name
      nameWithType:
        CSharp: AuthentificationRequestDTO.Login_name
        VB: AuthentificationRequestDTO.Login_name
      qualifiedName:
        CSharp: Domain.DTO.Requestes.Security.AuthentificationRequestDTO.Login_name
        VB: Domain.DTO.Requestes.Security.AuthentificationRequestDTO.Login_name
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Requestes.Security
      source:
        remote:
          path: Domain/DTO/Requestes/Security/AuthentificationRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Login_name
        path: ../Domain/DTO/Requestes/Security/AuthentificationRequestDTO.cs
        startLine: 11
      syntax:
        content:
          CSharp: public string Login_name { get; set; }
          VB: Public Property Login_name As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Requestes.Security.AuthentificationRequestDTO.Login_name*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO.Password
      commentId: P:Domain.DTO.Requestes.Security.AuthentificationRequestDTO.Password
      language: CSharp
      name:
        CSharp: Password
        VB: Password
      nameWithType:
        CSharp: AuthentificationRequestDTO.Password
        VB: AuthentificationRequestDTO.Password
      qualifiedName:
        CSharp: Domain.DTO.Requestes.Security.AuthentificationRequestDTO.Password
        VB: Domain.DTO.Requestes.Security.AuthentificationRequestDTO.Password
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Requestes.Security
      source:
        remote:
          path: Domain/DTO/Requestes/Security/AuthentificationRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Password
        path: ../Domain/DTO/Requestes/Security/AuthentificationRequestDTO.cs
        startLine: 13
      syntax:
        content:
          CSharp: public string Password { get; set; }
          VB: Public Property Password As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Requestes.Security.AuthentificationRequestDTO.Password*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTOValidator
    commentId: T:Domain.DTO.Requestes.Security.AuthentificationRequestDTOValidator
    language: CSharp
    name:
      CSharp: AuthentificationRequestDTOValidator
      VB: AuthentificationRequestDTOValidator
    nameWithType:
      CSharp: AuthentificationRequestDTOValidator
      VB: AuthentificationRequestDTOValidator
    qualifiedName:
      CSharp: Domain.DTO.Requestes.Security.AuthentificationRequestDTOValidator
      VB: Domain.DTO.Requestes.Security.AuthentificationRequestDTOValidator
    type: Class
    assemblies:
    - Domain
    namespace: Domain.DTO.Requestes.Security
    source:
      remote:
        path: Domain/DTO/Requestes/Security/AuthentificationRequestDTO.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: AuthentificationRequestDTOValidator
      path: ../Domain/DTO/Requestes/Security/AuthentificationRequestDTO.cs
      startLine: 16
    syntax:
      content:
        CSharp: 'public class AuthentificationRequestDTOValidator : AbstractValidator<AuthentificationRequestDTO>, IValidator<AuthentificationRequestDTO>, IValidator, IEnumerable<IValidationRule>, IEnumerable'
        VB: >-
          Public Class AuthentificationRequestDTOValidator

              Inherits AbstractValidator(Of AuthentificationRequestDTO)

              Implements IValidator(Of AuthentificationRequestDTO), IValidator, IEnumerable(Of IValidationRule), IEnumerable
    inheritance:
    - System.Object
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
    implements:
    - FluentValidation.IValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
    - FluentValidation.IValidator
    - System.Collections.Generic.IEnumerable{FluentValidation.IValidationRule}
    - System.Collections.IEnumerable
    inheritedMembers:
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.Validate(Domain.DTO.Requestes.Security.AuthentificationRequestDTO)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.ValidateAsync(Domain.DTO.Requestes.Security.AuthentificationRequestDTO,System.Threading.CancellationToken)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.Validate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Security.AuthentificationRequestDTO})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.ValidateAsync(FluentValidation.ValidationContext{Domain.DTO.Requestes.Security.AuthentificationRequestDTO},System.Threading.CancellationToken)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.CreateDescriptor
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.RuleFor``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,{TProperty}}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,{TProperty}}},System.Func{{TProperty},{TTransformed}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,{TProperty}}},System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,{TProperty},{TTransformed}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}},System.Func{{TElement},{TTransformed}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}},System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,{TElement},{TTransformed}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.RuleSet(System.String,System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.When(System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,System.Boolean},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.When(System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Security.AuthentificationRequestDTO},System.Boolean},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,System.Boolean},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Security.AuthentificationRequestDTO},System.Boolean},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Security.AuthentificationRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Security.AuthentificationRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.Include(FluentValidation.IValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.Include``1(System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,{TValidator}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.GetEnumerator
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.System#Collections#IEnumerable#GetEnumerator
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.EnsureInstanceNotNull(System.Object)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.PreValidate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Security.AuthentificationRequestDTO},FluentValidation.Results.ValidationResult)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.RaiseValidationException(FluentValidation.ValidationContext{Domain.DTO.Requestes.Security.AuthentificationRequestDTO},FluentValidation.Results.ValidationResult)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.CascadeMode
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.ClassLevelCascadeMode
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.RuleLevelCascadeMode
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTOValidator.#ctor
      commentId: M:Domain.DTO.Requestes.Security.AuthentificationRequestDTOValidator.#ctor
      language: CSharp
      name:
        CSharp: AuthentificationRequestDTOValidator()
        VB: AuthentificationRequestDTOValidator()
      nameWithType:
        CSharp: AuthentificationRequestDTOValidator.AuthentificationRequestDTOValidator()
        VB: AuthentificationRequestDTOValidator.AuthentificationRequestDTOValidator()
      qualifiedName:
        CSharp: Domain.DTO.Requestes.Security.AuthentificationRequestDTOValidator.AuthentificationRequestDTOValidator()
        VB: Domain.DTO.Requestes.Security.AuthentificationRequestDTOValidator.AuthentificationRequestDTOValidator()
      type: Constructor
      assemblies:
      - Domain
      namespace: Domain.DTO.Requestes.Security
      source:
        remote:
          path: Domain/DTO/Requestes/Security/AuthentificationRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: .ctor
        path: ../Domain/DTO/Requestes/Security/AuthentificationRequestDTO.cs
        startLine: 18
      syntax:
        content:
          CSharp: public AuthentificationRequestDTOValidator()
          VB: Public Sub New
      overload: Domain.DTO.Requestes.Security.AuthentificationRequestDTOValidator.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
- id: Domain.DTO.Requestes.Topics
  commentId: N:Domain.DTO.Requestes.Topics
  language: CSharp
  name:
    CSharp: Domain.DTO.Requestes.Topics
    VB: Domain.DTO.Requestes.Topics
  nameWithType:
    CSharp: Domain.DTO.Requestes.Topics
    VB: Domain.DTO.Requestes.Topics
  qualifiedName:
    CSharp: Domain.DTO.Requestes.Topics
    VB: Domain.DTO.Requestes.Topics
  type: Namespace
  assemblies:
  - Domain
  modifiers: {}
  items:
  - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
    commentId: T:Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
    language: CSharp
    name:
      CSharp: CreateTopicRequestDTO
      VB: CreateTopicRequestDTO
    nameWithType:
      CSharp: CreateTopicRequestDTO
      VB: CreateTopicRequestDTO
    qualifiedName:
      CSharp: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      VB: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
    type: Class
    assemblies:
    - Domain
    namespace: Domain.DTO.Requestes.Topics
    source:
      remote:
        path: Domain/DTO/Requestes/Topics/CreateTopicRequestDTO.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: CreateTopicRequestDTO
      path: ../Domain/DTO/Requestes/Topics/CreateTopicRequestDTO.cs
      startLine: 9
    syntax:
      content:
        CSharp: public class CreateTopicRequestDTO
        VB: Public Class CreateTopicRequestDTO
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicTitle
      commentId: P:Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicTitle
      language: CSharp
      name:
        CSharp: TopicTitle
        VB: TopicTitle
      nameWithType:
        CSharp: CreateTopicRequestDTO.TopicTitle
        VB: CreateTopicRequestDTO.TopicTitle
      qualifiedName:
        CSharp: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicTitle
        VB: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicTitle
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Requestes.Topics
      source:
        remote:
          path: Domain/DTO/Requestes/Topics/CreateTopicRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: TopicTitle
        path: ../Domain/DTO/Requestes/Topics/CreateTopicRequestDTO.cs
        startLine: 13
      syntax:
        content:
          CSharp: public string TopicTitle { get; set; }
          VB: Public Property TopicTitle As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicTitle*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicText
      commentId: P:Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicText
      language: CSharp
      name:
        CSharp: TopicText
        VB: TopicText
      nameWithType:
        CSharp: CreateTopicRequestDTO.TopicText
        VB: CreateTopicRequestDTO.TopicText
      qualifiedName:
        CSharp: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicText
        VB: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicText
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Requestes.Topics
      source:
        remote:
          path: Domain/DTO/Requestes/Topics/CreateTopicRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: TopicText
        path: ../Domain/DTO/Requestes/Topics/CreateTopicRequestDTO.cs
        startLine: 14
      syntax:
        content:
          CSharp: public string TopicText { get; set; }
          VB: Public Property TopicText As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicText*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicRubricId
      commentId: P:Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicRubricId
      language: CSharp
      name:
        CSharp: TopicRubricId
        VB: TopicRubricId
      nameWithType:
        CSharp: CreateTopicRequestDTO.TopicRubricId
        VB: CreateTopicRequestDTO.TopicRubricId
      qualifiedName:
        CSharp: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicRubricId
        VB: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicRubricId
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Requestes.Topics
      source:
        remote:
          path: Domain/DTO/Requestes/Topics/CreateTopicRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: TopicRubricId
        path: ../Domain/DTO/Requestes/Topics/CreateTopicRequestDTO.cs
        startLine: 15
      syntax:
        content:
          CSharp: public int TopicRubricId { get; set; }
          VB: Public Property TopicRubricId As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicRubricId*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicCreatorId
      commentId: P:Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicCreatorId
      language: CSharp
      name:
        CSharp: TopicCreatorId
        VB: TopicCreatorId
      nameWithType:
        CSharp: CreateTopicRequestDTO.TopicCreatorId
        VB: CreateTopicRequestDTO.TopicCreatorId
      qualifiedName:
        CSharp: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicCreatorId
        VB: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicCreatorId
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Requestes.Topics
      source:
        remote:
          path: Domain/DTO/Requestes/Topics/CreateTopicRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: TopicCreatorId
        path: ../Domain/DTO/Requestes/Topics/CreateTopicRequestDTO.cs
        startLine: 17
      syntax:
        content:
          CSharp: public int TopicCreatorId { get; set; }
          VB: Public Property TopicCreatorId As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicCreatorId*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.Equals(System.Object)
      commentId: M:Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: CreateTopicRequestDTO.Equals(Object)
        VB: CreateTopicRequestDTO.Equals(Object)
      qualifiedName:
        CSharp: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.Equals(System.Object)
        VB: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.Equals(System.Object)
      type: Method
      assemblies:
      - Domain
      namespace: Domain.DTO.Requestes.Topics
      source:
        remote:
          path: Domain/DTO/Requestes/Topics/CreateTopicRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Equals
        path: ../Domain/DTO/Requestes/Topics/CreateTopicRequestDTO.cs
        startLine: 19
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.Equals*
      overridden: System.Object.Equals(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTOValidator
    commentId: T:Domain.DTO.Requestes.Topics.CreateTopicRequestDTOValidator
    language: CSharp
    name:
      CSharp: CreateTopicRequestDTOValidator
      VB: CreateTopicRequestDTOValidator
    nameWithType:
      CSharp: CreateTopicRequestDTOValidator
      VB: CreateTopicRequestDTOValidator
    qualifiedName:
      CSharp: Domain.DTO.Requestes.Topics.CreateTopicRequestDTOValidator
      VB: Domain.DTO.Requestes.Topics.CreateTopicRequestDTOValidator
    type: Class
    assemblies:
    - Domain
    namespace: Domain.DTO.Requestes.Topics
    source:
      remote:
        path: Domain/DTO/Requestes/Topics/CreateTopicRequestDTO.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: CreateTopicRequestDTOValidator
      path: ../Domain/DTO/Requestes/Topics/CreateTopicRequestDTO.cs
      startLine: 33
    syntax:
      content:
        CSharp: 'public class CreateTopicRequestDTOValidator : AbstractValidator<CreateTopicRequestDTO>, IValidator<CreateTopicRequestDTO>, IValidator, IEnumerable<IValidationRule>, IEnumerable'
        VB: >-
          Public Class CreateTopicRequestDTOValidator

              Inherits AbstractValidator(Of CreateTopicRequestDTO)

              Implements IValidator(Of CreateTopicRequestDTO), IValidator, IEnumerable(Of IValidationRule), IEnumerable
    inheritance:
    - System.Object
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
    implements:
    - FluentValidation.IValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
    - FluentValidation.IValidator
    - System.Collections.Generic.IEnumerable{FluentValidation.IValidationRule}
    - System.Collections.IEnumerable
    inheritedMembers:
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.Validate(Domain.DTO.Requestes.Topics.CreateTopicRequestDTO)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.ValidateAsync(Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,System.Threading.CancellationToken)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.Validate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.ValidateAsync(FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO},System.Threading.CancellationToken)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.CreateDescriptor
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.RuleFor``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,{TProperty}}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,{TProperty}}},System.Func{{TProperty},{TTransformed}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,{TProperty}}},System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,{TProperty},{TTransformed}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}},System.Func{{TElement},{TTransformed}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}},System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,{TElement},{TTransformed}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.RuleSet(System.String,System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.When(System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,System.Boolean},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.When(System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO},System.Boolean},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,System.Boolean},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO},System.Boolean},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.Include(FluentValidation.IValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.Include``1(System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,{TValidator}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.GetEnumerator
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.System#Collections#IEnumerable#GetEnumerator
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.EnsureInstanceNotNull(System.Object)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.PreValidate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO},FluentValidation.Results.ValidationResult)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.RaiseValidationException(FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO},FluentValidation.Results.ValidationResult)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.CascadeMode
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.ClassLevelCascadeMode
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.RuleLevelCascadeMode
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTOValidator.#ctor
      commentId: M:Domain.DTO.Requestes.Topics.CreateTopicRequestDTOValidator.#ctor
      language: CSharp
      name:
        CSharp: CreateTopicRequestDTOValidator()
        VB: CreateTopicRequestDTOValidator()
      nameWithType:
        CSharp: CreateTopicRequestDTOValidator.CreateTopicRequestDTOValidator()
        VB: CreateTopicRequestDTOValidator.CreateTopicRequestDTOValidator()
      qualifiedName:
        CSharp: Domain.DTO.Requestes.Topics.CreateTopicRequestDTOValidator.CreateTopicRequestDTOValidator()
        VB: Domain.DTO.Requestes.Topics.CreateTopicRequestDTOValidator.CreateTopicRequestDTOValidator()
      type: Constructor
      assemblies:
      - Domain
      namespace: Domain.DTO.Requestes.Topics
      source:
        remote:
          path: Domain/DTO/Requestes/Topics/CreateTopicRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: .ctor
        path: ../Domain/DTO/Requestes/Topics/CreateTopicRequestDTO.cs
        startLine: 35
      syntax:
        content:
          CSharp: public CreateTopicRequestDTOValidator()
          VB: Public Sub New
      overload: Domain.DTO.Requestes.Topics.CreateTopicRequestDTOValidator.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
    commentId: T:Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
    language: CSharp
    name:
      CSharp: UpdateTopicRequestDTO
      VB: UpdateTopicRequestDTO
    nameWithType:
      CSharp: UpdateTopicRequestDTO
      VB: UpdateTopicRequestDTO
    qualifiedName:
      CSharp: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      VB: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
    type: Class
    assemblies:
    - Domain
    namespace: Domain.DTO.Requestes.Topics
    source:
      remote:
        path: Domain/DTO/Requestes/Topics/UpdateTopicRequestDTO.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: UpdateTopicRequestDTO
      path: ../Domain/DTO/Requestes/Topics/UpdateTopicRequestDTO.cs
      startLine: 9
    syntax:
      content:
        CSharp: public class UpdateTopicRequestDTO
        VB: Public Class UpdateTopicRequestDTO
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.IdUser
      commentId: P:Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.IdUser
      language: CSharp
      name:
        CSharp: IdUser
        VB: IdUser
      nameWithType:
        CSharp: UpdateTopicRequestDTO.IdUser
        VB: UpdateTopicRequestDTO.IdUser
      qualifiedName:
        CSharp: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.IdUser
        VB: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.IdUser
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Requestes.Topics
      source:
        remote:
          path: Domain/DTO/Requestes/Topics/UpdateTopicRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: IdUser
        path: ../Domain/DTO/Requestes/Topics/UpdateTopicRequestDTO.cs
        startLine: 11
      syntax:
        content:
          CSharp: public int IdUser { get; set; }
          VB: Public Property IdUser As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.IdUser*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicId
      commentId: P:Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicId
      language: CSharp
      name:
        CSharp: TopicId
        VB: TopicId
      nameWithType:
        CSharp: UpdateTopicRequestDTO.TopicId
        VB: UpdateTopicRequestDTO.TopicId
      qualifiedName:
        CSharp: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicId
        VB: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicId
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Requestes.Topics
      source:
        remote:
          path: Domain/DTO/Requestes/Topics/UpdateTopicRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: TopicId
        path: ../Domain/DTO/Requestes/Topics/UpdateTopicRequestDTO.cs
        startLine: 12
      syntax:
        content:
          CSharp: public int TopicId { get; set; }
          VB: Public Property TopicId As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicId*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicTitle
      commentId: P:Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicTitle
      language: CSharp
      name:
        CSharp: TopicTitle
        VB: TopicTitle
      nameWithType:
        CSharp: UpdateTopicRequestDTO.TopicTitle
        VB: UpdateTopicRequestDTO.TopicTitle
      qualifiedName:
        CSharp: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicTitle
        VB: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicTitle
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Requestes.Topics
      source:
        remote:
          path: Domain/DTO/Requestes/Topics/UpdateTopicRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: TopicTitle
        path: ../Domain/DTO/Requestes/Topics/UpdateTopicRequestDTO.cs
        startLine: 13
      syntax:
        content:
          CSharp: public string TopicTitle { get; set; }
          VB: Public Property TopicTitle As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicTitle*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicText
      commentId: P:Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicText
      language: CSharp
      name:
        CSharp: TopicText
        VB: TopicText
      nameWithType:
        CSharp: UpdateTopicRequestDTO.TopicText
        VB: UpdateTopicRequestDTO.TopicText
      qualifiedName:
        CSharp: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicText
        VB: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicText
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Requestes.Topics
      source:
        remote:
          path: Domain/DTO/Requestes/Topics/UpdateTopicRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: TopicText
        path: ../Domain/DTO/Requestes/Topics/UpdateTopicRequestDTO.cs
        startLine: 14
      syntax:
        content:
          CSharp: public string TopicText { get; set; }
          VB: Public Property TopicText As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicText*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicRubricId
      commentId: P:Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicRubricId
      language: CSharp
      name:
        CSharp: TopicRubricId
        VB: TopicRubricId
      nameWithType:
        CSharp: UpdateTopicRequestDTO.TopicRubricId
        VB: UpdateTopicRequestDTO.TopicRubricId
      qualifiedName:
        CSharp: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicRubricId
        VB: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicRubricId
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Requestes.Topics
      source:
        remote:
          path: Domain/DTO/Requestes/Topics/UpdateTopicRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: TopicRubricId
        path: ../Domain/DTO/Requestes/Topics/UpdateTopicRequestDTO.cs
        startLine: 15
      syntax:
        content:
          CSharp: public int TopicRubricId { get; set; }
          VB: Public Property TopicRubricId As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicRubricId*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.Equals(System.Object)
      commentId: M:Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: UpdateTopicRequestDTO.Equals(Object)
        VB: UpdateTopicRequestDTO.Equals(Object)
      qualifiedName:
        CSharp: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.Equals(System.Object)
        VB: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.Equals(System.Object)
      type: Method
      assemblies:
      - Domain
      namespace: Domain.DTO.Requestes.Topics
      source:
        remote:
          path: Domain/DTO/Requestes/Topics/UpdateTopicRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Equals
        path: ../Domain/DTO/Requestes/Topics/UpdateTopicRequestDTO.cs
        startLine: 17
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.Equals*
      overridden: System.Object.Equals(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTOValidator
    commentId: T:Domain.DTO.Requestes.Topics.UpdateTopicRequestDTOValidator
    language: CSharp
    name:
      CSharp: UpdateTopicRequestDTOValidator
      VB: UpdateTopicRequestDTOValidator
    nameWithType:
      CSharp: UpdateTopicRequestDTOValidator
      VB: UpdateTopicRequestDTOValidator
    qualifiedName:
      CSharp: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTOValidator
      VB: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTOValidator
    type: Class
    assemblies:
    - Domain
    namespace: Domain.DTO.Requestes.Topics
    source:
      remote:
        path: Domain/DTO/Requestes/Topics/UpdateTopicRequestDTO.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: UpdateTopicRequestDTOValidator
      path: ../Domain/DTO/Requestes/Topics/UpdateTopicRequestDTO.cs
      startLine: 35
    syntax:
      content:
        CSharp: 'public class UpdateTopicRequestDTOValidator : AbstractValidator<UpdateTopicRequestDTO>, IValidator<UpdateTopicRequestDTO>, IValidator, IEnumerable<IValidationRule>, IEnumerable'
        VB: >-
          Public Class UpdateTopicRequestDTOValidator

              Inherits AbstractValidator(Of UpdateTopicRequestDTO)

              Implements IValidator(Of UpdateTopicRequestDTO), IValidator, IEnumerable(Of IValidationRule), IEnumerable
    inheritance:
    - System.Object
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
    implements:
    - FluentValidation.IValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
    - FluentValidation.IValidator
    - System.Collections.Generic.IEnumerable{FluentValidation.IValidationRule}
    - System.Collections.IEnumerable
    inheritedMembers:
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.Validate(Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.ValidateAsync(Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,System.Threading.CancellationToken)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.Validate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.ValidateAsync(FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO},System.Threading.CancellationToken)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.CreateDescriptor
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.RuleFor``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,{TProperty}}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,{TProperty}}},System.Func{{TProperty},{TTransformed}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,{TProperty}}},System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,{TProperty},{TTransformed}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}},System.Func{{TElement},{TTransformed}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}},System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,{TElement},{TTransformed}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.RuleSet(System.String,System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.When(System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,System.Boolean},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.When(System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO},System.Boolean},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,System.Boolean},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO},System.Boolean},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.Include(FluentValidation.IValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.Include``1(System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,{TValidator}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.GetEnumerator
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.System#Collections#IEnumerable#GetEnumerator
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.EnsureInstanceNotNull(System.Object)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.PreValidate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO},FluentValidation.Results.ValidationResult)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.RaiseValidationException(FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO},FluentValidation.Results.ValidationResult)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.CascadeMode
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.ClassLevelCascadeMode
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.RuleLevelCascadeMode
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTOValidator.#ctor
      commentId: M:Domain.DTO.Requestes.Topics.UpdateTopicRequestDTOValidator.#ctor
      language: CSharp
      name:
        CSharp: UpdateTopicRequestDTOValidator()
        VB: UpdateTopicRequestDTOValidator()
      nameWithType:
        CSharp: UpdateTopicRequestDTOValidator.UpdateTopicRequestDTOValidator()
        VB: UpdateTopicRequestDTOValidator.UpdateTopicRequestDTOValidator()
      qualifiedName:
        CSharp: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTOValidator.UpdateTopicRequestDTOValidator()
        VB: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTOValidator.UpdateTopicRequestDTOValidator()
      type: Constructor
      assemblies:
      - Domain
      namespace: Domain.DTO.Requestes.Topics
      source:
        remote:
          path: Domain/DTO/Requestes/Topics/UpdateTopicRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: .ctor
        path: ../Domain/DTO/Requestes/Topics/UpdateTopicRequestDTO.cs
        startLine: 37
      syntax:
        content:
          CSharp: public UpdateTopicRequestDTOValidator()
          VB: Public Sub New
      overload: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTOValidator.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
- id: Domain.DTO.Requestes.Users
  commentId: N:Domain.DTO.Requestes.Users
  language: CSharp
  name:
    CSharp: Domain.DTO.Requestes.Users
    VB: Domain.DTO.Requestes.Users
  nameWithType:
    CSharp: Domain.DTO.Requestes.Users
    VB: Domain.DTO.Requestes.Users
  qualifiedName:
    CSharp: Domain.DTO.Requestes.Users
    VB: Domain.DTO.Requestes.Users
  type: Namespace
  assemblies:
  - Domain
  modifiers: {}
  items:
  - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
    commentId: T:Domain.DTO.Requestes.Users.UpdateUserRequestDTO
    language: CSharp
    name:
      CSharp: UpdateUserRequestDTO
      VB: UpdateUserRequestDTO
    nameWithType:
      CSharp: UpdateUserRequestDTO
      VB: UpdateUserRequestDTO
    qualifiedName:
      CSharp: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      VB: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
    type: Class
    assemblies:
    - Domain
    namespace: Domain.DTO.Requestes.Users
    source:
      remote:
        path: Domain/DTO/Requestes/Users/UpdateUserRequestDTO.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: UpdateUserRequestDTO
      path: ../Domain/DTO/Requestes/Users/UpdateUserRequestDTO.cs
      startLine: 10
    syntax:
      content:
        CSharp: public class UpdateUserRequestDTO
        VB: Public Class UpdateUserRequestDTO
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Name
      commentId: P:Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: UpdateUserRequestDTO.Name
        VB: UpdateUserRequestDTO.Name
      qualifiedName:
        CSharp: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Name
        VB: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Name
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Requestes.Users
      source:
        remote:
          path: Domain/DTO/Requestes/Users/UpdateUserRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Name
        path: ../Domain/DTO/Requestes/Users/UpdateUserRequestDTO.cs
        startLine: 12
      syntax:
        content:
          CSharp: public string Name { get; set; }
          VB: Public Property Name As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Name*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.First_Name
      commentId: P:Domain.DTO.Requestes.Users.UpdateUserRequestDTO.First_Name
      language: CSharp
      name:
        CSharp: First_Name
        VB: First_Name
      nameWithType:
        CSharp: UpdateUserRequestDTO.First_Name
        VB: UpdateUserRequestDTO.First_Name
      qualifiedName:
        CSharp: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.First_Name
        VB: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.First_Name
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Requestes.Users
      source:
        remote:
          path: Domain/DTO/Requestes/Users/UpdateUserRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: First_Name
        path: ../Domain/DTO/Requestes/Users/UpdateUserRequestDTO.cs
        startLine: 13
      syntax:
        content:
          CSharp: public string First_Name { get; set; }
          VB: Public Property First_Name As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.First_Name*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Login_Name
      commentId: P:Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Login_Name
      language: CSharp
      name:
        CSharp: Login_Name
        VB: Login_Name
      nameWithType:
        CSharp: UpdateUserRequestDTO.Login_Name
        VB: UpdateUserRequestDTO.Login_Name
      qualifiedName:
        CSharp: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Login_Name
        VB: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Login_Name
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Requestes.Users
      source:
        remote:
          path: Domain/DTO/Requestes/Users/UpdateUserRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Login_Name
        path: ../Domain/DTO/Requestes/Users/UpdateUserRequestDTO.cs
        startLine: 14
      syntax:
        content:
          CSharp: public string Login_Name { get; set; }
          VB: Public Property Login_Name As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Login_Name*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Ph_No
      commentId: P:Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Ph_No
      language: CSharp
      name:
        CSharp: Ph_No
        VB: Ph_No
      nameWithType:
        CSharp: UpdateUserRequestDTO.Ph_No
        VB: UpdateUserRequestDTO.Ph_No
      qualifiedName:
        CSharp: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Ph_No
        VB: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Ph_No
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Requestes.Users
      source:
        remote:
          path: Domain/DTO/Requestes/Users/UpdateUserRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Ph_No
        path: ../Domain/DTO/Requestes/Users/UpdateUserRequestDTO.cs
        startLine: 15
      syntax:
        content:
          CSharp: public string Ph_No { get; set; }
          VB: Public Property Ph_No As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Ph_No*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.E_Mail
      commentId: P:Domain.DTO.Requestes.Users.UpdateUserRequestDTO.E_Mail
      language: CSharp
      name:
        CSharp: E_Mail
        VB: E_Mail
      nameWithType:
        CSharp: UpdateUserRequestDTO.E_Mail
        VB: UpdateUserRequestDTO.E_Mail
      qualifiedName:
        CSharp: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.E_Mail
        VB: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.E_Mail
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Requestes.Users
      source:
        remote:
          path: Domain/DTO/Requestes/Users/UpdateUserRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: E_Mail
        path: ../Domain/DTO/Requestes/Users/UpdateUserRequestDTO.cs
        startLine: 17
      syntax:
        content:
          CSharp: public string E_Mail { get; set; }
          VB: Public Property E_Mail As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.E_Mail*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Password
      commentId: P:Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Password
      language: CSharp
      name:
        CSharp: Password
        VB: Password
      nameWithType:
        CSharp: UpdateUserRequestDTO.Password
        VB: UpdateUserRequestDTO.Password
      qualifiedName:
        CSharp: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Password
        VB: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Password
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Requestes.Users
      source:
        remote:
          path: Domain/DTO/Requestes/Users/UpdateUserRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Password
        path: ../Domain/DTO/Requestes/Users/UpdateUserRequestDTO.cs
        startLine: 18
      syntax:
        content:
          CSharp: public string Password { get; set; }
          VB: Public Property Password As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Password*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Id
      commentId: P:Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Id
      language: CSharp
      name:
        CSharp: Id
        VB: Id
      nameWithType:
        CSharp: UpdateUserRequestDTO.Id
        VB: UpdateUserRequestDTO.Id
      qualifiedName:
        CSharp: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Id
        VB: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Id
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Requestes.Users
      source:
        remote:
          path: Domain/DTO/Requestes/Users/UpdateUserRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Id
        path: ../Domain/DTO/Requestes/Users/UpdateUserRequestDTO.cs
        startLine: 19
      syntax:
        content:
          CSharp: public int Id { get; set; }
          VB: Public Property Id As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Id*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTOValidator
    commentId: T:Domain.DTO.Requestes.Users.UpdateUserRequestDTOValidator
    language: CSharp
    name:
      CSharp: UpdateUserRequestDTOValidator
      VB: UpdateUserRequestDTOValidator
    nameWithType:
      CSharp: UpdateUserRequestDTOValidator
      VB: UpdateUserRequestDTOValidator
    qualifiedName:
      CSharp: Domain.DTO.Requestes.Users.UpdateUserRequestDTOValidator
      VB: Domain.DTO.Requestes.Users.UpdateUserRequestDTOValidator
    type: Class
    assemblies:
    - Domain
    namespace: Domain.DTO.Requestes.Users
    source:
      remote:
        path: Domain/DTO/Requestes/Users/UpdateUserRequestDTO.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: UpdateUserRequestDTOValidator
      path: ../Domain/DTO/Requestes/Users/UpdateUserRequestDTO.cs
      startLine: 21
    syntax:
      content:
        CSharp: 'public class UpdateUserRequestDTOValidator : AbstractValidator<UpdateUserRequestDTO>, IValidator<UpdateUserRequestDTO>, IValidator, IEnumerable<IValidationRule>, IEnumerable'
        VB: >-
          Public Class UpdateUserRequestDTOValidator

              Inherits AbstractValidator(Of UpdateUserRequestDTO)

              Implements IValidator(Of UpdateUserRequestDTO), IValidator, IEnumerable(Of IValidationRule), IEnumerable
    inheritance:
    - System.Object
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
    implements:
    - FluentValidation.IValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
    - FluentValidation.IValidator
    - System.Collections.Generic.IEnumerable{FluentValidation.IValidationRule}
    - System.Collections.IEnumerable
    inheritedMembers:
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.Validate(Domain.DTO.Requestes.Users.UpdateUserRequestDTO)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.ValidateAsync(Domain.DTO.Requestes.Users.UpdateUserRequestDTO,System.Threading.CancellationToken)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.Validate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Users.UpdateUserRequestDTO})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.ValidateAsync(FluentValidation.ValidationContext{Domain.DTO.Requestes.Users.UpdateUserRequestDTO},System.Threading.CancellationToken)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.CreateDescriptor
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.RuleFor``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,{TProperty}}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,{TProperty}}},System.Func{{TProperty},{TTransformed}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,{TProperty}}},System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,{TProperty},{TTransformed}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}},System.Func{{TElement},{TTransformed}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}},System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,{TElement},{TTransformed}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.RuleSet(System.String,System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.When(System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,System.Boolean},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.When(System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Users.UpdateUserRequestDTO},System.Boolean},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,System.Boolean},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Users.UpdateUserRequestDTO},System.Boolean},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Users.UpdateUserRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Users.UpdateUserRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.Include(FluentValidation.IValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.Include``1(System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,{TValidator}})
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.GetEnumerator
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.System#Collections#IEnumerable#GetEnumerator
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.EnsureInstanceNotNull(System.Object)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.PreValidate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Users.UpdateUserRequestDTO},FluentValidation.Results.ValidationResult)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.RaiseValidationException(FluentValidation.ValidationContext{Domain.DTO.Requestes.Users.UpdateUserRequestDTO},FluentValidation.Results.ValidationResult)
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.CascadeMode
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.ClassLevelCascadeMode
    - FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.RuleLevelCascadeMode
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTOValidator.#ctor
      commentId: M:Domain.DTO.Requestes.Users.UpdateUserRequestDTOValidator.#ctor
      language: CSharp
      name:
        CSharp: UpdateUserRequestDTOValidator()
        VB: UpdateUserRequestDTOValidator()
      nameWithType:
        CSharp: UpdateUserRequestDTOValidator.UpdateUserRequestDTOValidator()
        VB: UpdateUserRequestDTOValidator.UpdateUserRequestDTOValidator()
      qualifiedName:
        CSharp: Domain.DTO.Requestes.Users.UpdateUserRequestDTOValidator.UpdateUserRequestDTOValidator()
        VB: Domain.DTO.Requestes.Users.UpdateUserRequestDTOValidator.UpdateUserRequestDTOValidator()
      type: Constructor
      assemblies:
      - Domain
      namespace: Domain.DTO.Requestes.Users
      source:
        remote:
          path: Domain/DTO/Requestes/Users/UpdateUserRequestDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: .ctor
        path: ../Domain/DTO/Requestes/Users/UpdateUserRequestDTO.cs
        startLine: 23
      syntax:
        content:
          CSharp: public UpdateUserRequestDTOValidator()
          VB: Public Sub New
      overload: Domain.DTO.Requestes.Users.UpdateUserRequestDTOValidator.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
- id: Domain.DTO.Responses.Replies
  commentId: N:Domain.DTO.Responses.Replies
  language: CSharp
  name:
    CSharp: Domain.DTO.Responses.Replies
    VB: Domain.DTO.Responses.Replies
  nameWithType:
    CSharp: Domain.DTO.Responses.Replies
    VB: Domain.DTO.Responses.Replies
  qualifiedName:
    CSharp: Domain.DTO.Responses.Replies
    VB: Domain.DTO.Responses.Replies
  type: Namespace
  assemblies:
  - Domain
  modifiers: {}
  items:
  - id: Domain.DTO.Responses.Replies.ReplyResponseDTO
    commentId: T:Domain.DTO.Responses.Replies.ReplyResponseDTO
    language: CSharp
    name:
      CSharp: ReplyResponseDTO
      VB: ReplyResponseDTO
    nameWithType:
      CSharp: ReplyResponseDTO
      VB: ReplyResponseDTO
    qualifiedName:
      CSharp: Domain.DTO.Responses.Replies.ReplyResponseDTO
      VB: Domain.DTO.Responses.Replies.ReplyResponseDTO
    type: Class
    assemblies:
    - Domain
    namespace: Domain.DTO.Responses.Replies
    source:
      remote:
        path: Domain/DTO/Responses/Replies/ReplyResponseDTO.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: ReplyResponseDTO
      path: ../Domain/DTO/Responses/Replies/ReplyResponseDTO.cs
      startLine: 8
    syntax:
      content:
        CSharp: public class ReplyResponseDTO
        VB: Public Class ReplyResponseDTO
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.DTO.Responses.Replies.ReplyResponseDTO.ReplyId
      commentId: P:Domain.DTO.Responses.Replies.ReplyResponseDTO.ReplyId
      language: CSharp
      name:
        CSharp: ReplyId
        VB: ReplyId
      nameWithType:
        CSharp: ReplyResponseDTO.ReplyId
        VB: ReplyResponseDTO.ReplyId
      qualifiedName:
        CSharp: Domain.DTO.Responses.Replies.ReplyResponseDTO.ReplyId
        VB: Domain.DTO.Responses.Replies.ReplyResponseDTO.ReplyId
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Replies
      source:
        remote:
          path: Domain/DTO/Responses/Replies/ReplyResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: ReplyId
        path: ../Domain/DTO/Responses/Replies/ReplyResponseDTO.cs
        startLine: 11
      syntax:
        content:
          CSharp: public int? ReplyId { get; set; }
          VB: Public Property ReplyId As Integer?
        parameters: []
        return:
          type: System.Nullable{System.Int32}
      overload: Domain.DTO.Responses.Replies.ReplyResponseDTO.ReplyId*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Replies.ReplyResponseDTO.ReplyText
      commentId: P:Domain.DTO.Responses.Replies.ReplyResponseDTO.ReplyText
      language: CSharp
      name:
        CSharp: ReplyText
        VB: ReplyText
      nameWithType:
        CSharp: ReplyResponseDTO.ReplyText
        VB: ReplyResponseDTO.ReplyText
      qualifiedName:
        CSharp: Domain.DTO.Responses.Replies.ReplyResponseDTO.ReplyText
        VB: Domain.DTO.Responses.Replies.ReplyResponseDTO.ReplyText
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Replies
      source:
        remote:
          path: Domain/DTO/Responses/Replies/ReplyResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: ReplyText
        path: ../Domain/DTO/Responses/Replies/ReplyResponseDTO.cs
        startLine: 12
      syntax:
        content:
          CSharp: public string ReplyText { get; set; }
          VB: Public Property ReplyText As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Responses.Replies.ReplyResponseDTO.ReplyText*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Replies.ReplyResponseDTO.ReplyDate
      commentId: P:Domain.DTO.Responses.Replies.ReplyResponseDTO.ReplyDate
      language: CSharp
      name:
        CSharp: ReplyDate
        VB: ReplyDate
      nameWithType:
        CSharp: ReplyResponseDTO.ReplyDate
        VB: ReplyResponseDTO.ReplyDate
      qualifiedName:
        CSharp: Domain.DTO.Responses.Replies.ReplyResponseDTO.ReplyDate
        VB: Domain.DTO.Responses.Replies.ReplyResponseDTO.ReplyDate
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Replies
      source:
        remote:
          path: Domain/DTO/Responses/Replies/ReplyResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: ReplyDate
        path: ../Domain/DTO/Responses/Replies/ReplyResponseDTO.cs
        startLine: 13
      syntax:
        content:
          CSharp: public DateTime? ReplyDate { get; set; }
          VB: Public Property ReplyDate As Date?
        parameters: []
        return:
          type: System.Nullable{System.DateTime}
      overload: Domain.DTO.Responses.Replies.ReplyResponseDTO.ReplyDate*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Replies.ReplyResponseDTO.ParentReplyId
      commentId: P:Domain.DTO.Responses.Replies.ReplyResponseDTO.ParentReplyId
      language: CSharp
      name:
        CSharp: ParentReplyId
        VB: ParentReplyId
      nameWithType:
        CSharp: ReplyResponseDTO.ParentReplyId
        VB: ReplyResponseDTO.ParentReplyId
      qualifiedName:
        CSharp: Domain.DTO.Responses.Replies.ReplyResponseDTO.ParentReplyId
        VB: Domain.DTO.Responses.Replies.ReplyResponseDTO.ParentReplyId
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Replies
      source:
        remote:
          path: Domain/DTO/Responses/Replies/ReplyResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: ParentReplyId
        path: ../Domain/DTO/Responses/Replies/ReplyResponseDTO.cs
        startLine: 14
      syntax:
        content:
          CSharp: public int? ParentReplyId { get; set; }
          VB: Public Property ParentReplyId As Integer?
        parameters: []
        return:
          type: System.Nullable{System.Int32}
      overload: Domain.DTO.Responses.Replies.ReplyResponseDTO.ParentReplyId*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Replies.ReplyResponseDTO.CreatorId
      commentId: P:Domain.DTO.Responses.Replies.ReplyResponseDTO.CreatorId
      language: CSharp
      name:
        CSharp: CreatorId
        VB: CreatorId
      nameWithType:
        CSharp: ReplyResponseDTO.CreatorId
        VB: ReplyResponseDTO.CreatorId
      qualifiedName:
        CSharp: Domain.DTO.Responses.Replies.ReplyResponseDTO.CreatorId
        VB: Domain.DTO.Responses.Replies.ReplyResponseDTO.CreatorId
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Replies
      source:
        remote:
          path: Domain/DTO/Responses/Replies/ReplyResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: CreatorId
        path: ../Domain/DTO/Responses/Replies/ReplyResponseDTO.cs
        startLine: 15
      syntax:
        content:
          CSharp: public int? CreatorId { get; set; }
          VB: Public Property CreatorId As Integer?
        parameters: []
        return:
          type: System.Nullable{System.Int32}
      overload: Domain.DTO.Responses.Replies.ReplyResponseDTO.CreatorId*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Replies.ReplyResponseDTO.TopicId
      commentId: P:Domain.DTO.Responses.Replies.ReplyResponseDTO.TopicId
      language: CSharp
      name:
        CSharp: TopicId
        VB: TopicId
      nameWithType:
        CSharp: ReplyResponseDTO.TopicId
        VB: ReplyResponseDTO.TopicId
      qualifiedName:
        CSharp: Domain.DTO.Responses.Replies.ReplyResponseDTO.TopicId
        VB: Domain.DTO.Responses.Replies.ReplyResponseDTO.TopicId
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Replies
      source:
        remote:
          path: Domain/DTO/Responses/Replies/ReplyResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: TopicId
        path: ../Domain/DTO/Responses/Replies/ReplyResponseDTO.cs
        startLine: 16
      syntax:
        content:
          CSharp: public int? TopicId { get; set; }
          VB: Public Property TopicId As Integer?
        parameters: []
        return:
          type: System.Nullable{System.Int32}
      overload: Domain.DTO.Responses.Replies.ReplyResponseDTO.TopicId*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Replies.ReplyResponseDTO.Equals(System.Object)
      commentId: M:Domain.DTO.Responses.Replies.ReplyResponseDTO.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: ReplyResponseDTO.Equals(Object)
        VB: ReplyResponseDTO.Equals(Object)
      qualifiedName:
        CSharp: Domain.DTO.Responses.Replies.ReplyResponseDTO.Equals(System.Object)
        VB: Domain.DTO.Responses.Replies.ReplyResponseDTO.Equals(System.Object)
      type: Method
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Replies
      source:
        remote:
          path: Domain/DTO/Responses/Replies/ReplyResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Equals
        path: ../Domain/DTO/Responses/Replies/ReplyResponseDTO.cs
        startLine: 18
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Domain.DTO.Responses.Replies.ReplyResponseDTO.Equals*
      overridden: System.Object.Equals(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO
    commentId: T:Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO
    language: CSharp
    name:
      CSharp: ReplyUpdateResponseDTO
      VB: ReplyUpdateResponseDTO
    nameWithType:
      CSharp: ReplyUpdateResponseDTO
      VB: ReplyUpdateResponseDTO
    qualifiedName:
      CSharp: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO
      VB: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO
    type: Class
    assemblies:
    - Domain
    namespace: Domain.DTO.Responses.Replies
    source:
      remote:
        path: Domain/DTO/Responses/Replies/ReplyUpdateResponseDTO.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: ReplyUpdateResponseDTO
      path: ../Domain/DTO/Responses/Replies/ReplyUpdateResponseDTO.cs
      startLine: 8
    syntax:
      content:
        CSharp: public class ReplyUpdateResponseDTO
        VB: Public Class ReplyUpdateResponseDTO
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ReplyId
      commentId: P:Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ReplyId
      language: CSharp
      name:
        CSharp: ReplyId
        VB: ReplyId
      nameWithType:
        CSharp: ReplyUpdateResponseDTO.ReplyId
        VB: ReplyUpdateResponseDTO.ReplyId
      qualifiedName:
        CSharp: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ReplyId
        VB: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ReplyId
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Replies
      source:
        remote:
          path: Domain/DTO/Responses/Replies/ReplyUpdateResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: ReplyId
        path: ../Domain/DTO/Responses/Replies/ReplyUpdateResponseDTO.cs
        startLine: 12
      syntax:
        content:
          CSharp: public int? ReplyId { get; set; }
          VB: Public Property ReplyId As Integer?
        parameters: []
        return:
          type: System.Nullable{System.Int32}
      overload: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ReplyId*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ReplyText
      commentId: P:Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ReplyText
      language: CSharp
      name:
        CSharp: ReplyText
        VB: ReplyText
      nameWithType:
        CSharp: ReplyUpdateResponseDTO.ReplyText
        VB: ReplyUpdateResponseDTO.ReplyText
      qualifiedName:
        CSharp: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ReplyText
        VB: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ReplyText
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Replies
      source:
        remote:
          path: Domain/DTO/Responses/Replies/ReplyUpdateResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: ReplyText
        path: ../Domain/DTO/Responses/Replies/ReplyUpdateResponseDTO.cs
        startLine: 13
      syntax:
        content:
          CSharp: public string ReplyText { get; set; }
          VB: Public Property ReplyText As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ReplyText*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ReplyDate
      commentId: P:Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ReplyDate
      language: CSharp
      name:
        CSharp: ReplyDate
        VB: ReplyDate
      nameWithType:
        CSharp: ReplyUpdateResponseDTO.ReplyDate
        VB: ReplyUpdateResponseDTO.ReplyDate
      qualifiedName:
        CSharp: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ReplyDate
        VB: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ReplyDate
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Replies
      source:
        remote:
          path: Domain/DTO/Responses/Replies/ReplyUpdateResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: ReplyDate
        path: ../Domain/DTO/Responses/Replies/ReplyUpdateResponseDTO.cs
        startLine: 14
      syntax:
        content:
          CSharp: public DateTime? ReplyDate { get; set; }
          VB: Public Property ReplyDate As Date?
        parameters: []
        return:
          type: System.Nullable{System.DateTime}
      overload: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ReplyDate*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ParentReplyId
      commentId: P:Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ParentReplyId
      language: CSharp
      name:
        CSharp: ParentReplyId
        VB: ParentReplyId
      nameWithType:
        CSharp: ReplyUpdateResponseDTO.ParentReplyId
        VB: ReplyUpdateResponseDTO.ParentReplyId
      qualifiedName:
        CSharp: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ParentReplyId
        VB: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ParentReplyId
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Replies
      source:
        remote:
          path: Domain/DTO/Responses/Replies/ReplyUpdateResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: ParentReplyId
        path: ../Domain/DTO/Responses/Replies/ReplyUpdateResponseDTO.cs
        startLine: 15
      syntax:
        content:
          CSharp: public int? ParentReplyId { get; set; }
          VB: Public Property ParentReplyId As Integer?
        parameters: []
        return:
          type: System.Nullable{System.Int32}
      overload: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ParentReplyId*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.CreatorId
      commentId: P:Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.CreatorId
      language: CSharp
      name:
        CSharp: CreatorId
        VB: CreatorId
      nameWithType:
        CSharp: ReplyUpdateResponseDTO.CreatorId
        VB: ReplyUpdateResponseDTO.CreatorId
      qualifiedName:
        CSharp: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.CreatorId
        VB: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.CreatorId
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Replies
      source:
        remote:
          path: Domain/DTO/Responses/Replies/ReplyUpdateResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: CreatorId
        path: ../Domain/DTO/Responses/Replies/ReplyUpdateResponseDTO.cs
        startLine: 16
      syntax:
        content:
          CSharp: public int? CreatorId { get; set; }
          VB: Public Property CreatorId As Integer?
        parameters: []
        return:
          type: System.Nullable{System.Int32}
      overload: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.CreatorId*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.TopicId
      commentId: P:Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.TopicId
      language: CSharp
      name:
        CSharp: TopicId
        VB: TopicId
      nameWithType:
        CSharp: ReplyUpdateResponseDTO.TopicId
        VB: ReplyUpdateResponseDTO.TopicId
      qualifiedName:
        CSharp: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.TopicId
        VB: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.TopicId
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Replies
      source:
        remote:
          path: Domain/DTO/Responses/Replies/ReplyUpdateResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: TopicId
        path: ../Domain/DTO/Responses/Replies/ReplyUpdateResponseDTO.cs
        startLine: 17
      syntax:
        content:
          CSharp: public int? TopicId { get; set; }
          VB: Public Property TopicId As Integer?
        parameters: []
        return:
          type: System.Nullable{System.Int32}
      overload: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.TopicId*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.Equals(System.Object)
      commentId: M:Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: ReplyUpdateResponseDTO.Equals(Object)
        VB: ReplyUpdateResponseDTO.Equals(Object)
      qualifiedName:
        CSharp: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.Equals(System.Object)
        VB: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.Equals(System.Object)
      type: Method
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Replies
      source:
        remote:
          path: Domain/DTO/Responses/Replies/ReplyUpdateResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Equals
        path: ../Domain/DTO/Responses/Replies/ReplyUpdateResponseDTO.cs
        startLine: 19
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.Equals*
      overridden: System.Object.Equals(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
- id: Domain.DTO.Responses.Rubrics
  commentId: N:Domain.DTO.Responses.Rubrics
  language: CSharp
  name:
    CSharp: Domain.DTO.Responses.Rubrics
    VB: Domain.DTO.Responses.Rubrics
  nameWithType:
    CSharp: Domain.DTO.Responses.Rubrics
    VB: Domain.DTO.Responses.Rubrics
  qualifiedName:
    CSharp: Domain.DTO.Responses.Rubrics
    VB: Domain.DTO.Responses.Rubrics
  type: Namespace
  assemblies:
  - Domain
  modifiers: {}
  items:
  - id: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO
    commentId: T:Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO
    language: CSharp
    name:
      CSharp: GetRubricsAndTopicsDetailResponseDTO
      VB: GetRubricsAndTopicsDetailResponseDTO
    nameWithType:
      CSharp: GetRubricsAndTopicsDetailResponseDTO
      VB: GetRubricsAndTopicsDetailResponseDTO
    qualifiedName:
      CSharp: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO
      VB: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO
    type: Class
    assemblies:
    - Domain
    namespace: Domain.DTO.Responses.Rubrics
    source:
      remote:
        path: Domain/DTO/Responses/Rubrics/GetRubricsAndTopicsDetailResponseDTO.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: GetRubricsAndTopicsDetailResponseDTO
      path: ../Domain/DTO/Responses/Rubrics/GetRubricsAndTopicsDetailResponseDTO.cs
      startLine: 9
    syntax:
      content:
        CSharp: public class GetRubricsAndTopicsDetailResponseDTO
        VB: Public Class GetRubricsAndTopicsDetailResponseDTO
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.RubricId
      commentId: P:Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.RubricId
      language: CSharp
      name:
        CSharp: RubricId
        VB: RubricId
      nameWithType:
        CSharp: GetRubricsAndTopicsDetailResponseDTO.RubricId
        VB: GetRubricsAndTopicsDetailResponseDTO.RubricId
      qualifiedName:
        CSharp: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.RubricId
        VB: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.RubricId
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Rubrics
      source:
        remote:
          path: Domain/DTO/Responses/Rubrics/GetRubricsAndTopicsDetailResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: RubricId
        path: ../Domain/DTO/Responses/Rubrics/GetRubricsAndTopicsDetailResponseDTO.cs
        startLine: 11
      syntax:
        content:
          CSharp: public int RubricId { get; set; }
          VB: Public Property RubricId As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.RubricId*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.RubricName
      commentId: P:Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.RubricName
      language: CSharp
      name:
        CSharp: RubricName
        VB: RubricName
      nameWithType:
        CSharp: GetRubricsAndTopicsDetailResponseDTO.RubricName
        VB: GetRubricsAndTopicsDetailResponseDTO.RubricName
      qualifiedName:
        CSharp: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.RubricName
        VB: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.RubricName
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Rubrics
      source:
        remote:
          path: Domain/DTO/Responses/Rubrics/GetRubricsAndTopicsDetailResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: RubricName
        path: ../Domain/DTO/Responses/Rubrics/GetRubricsAndTopicsDetailResponseDTO.cs
        startLine: 12
      syntax:
        content:
          CSharp: public string RubricName { get; set; }
          VB: Public Property RubricName As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.RubricName*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicId
      commentId: P:Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicId
      language: CSharp
      name:
        CSharp: TopicId
        VB: TopicId
      nameWithType:
        CSharp: GetRubricsAndTopicsDetailResponseDTO.TopicId
        VB: GetRubricsAndTopicsDetailResponseDTO.TopicId
      qualifiedName:
        CSharp: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicId
        VB: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicId
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Rubrics
      source:
        remote:
          path: Domain/DTO/Responses/Rubrics/GetRubricsAndTopicsDetailResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: TopicId
        path: ../Domain/DTO/Responses/Rubrics/GetRubricsAndTopicsDetailResponseDTO.cs
        startLine: 14
      syntax:
        content:
          CSharp: public int? TopicId { get; set; }
          VB: Public Property TopicId As Integer?
        parameters: []
        return:
          type: System.Nullable{System.Int32}
      overload: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicId*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicText
      commentId: P:Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicText
      language: CSharp
      name:
        CSharp: TopicText
        VB: TopicText
      nameWithType:
        CSharp: GetRubricsAndTopicsDetailResponseDTO.TopicText
        VB: GetRubricsAndTopicsDetailResponseDTO.TopicText
      qualifiedName:
        CSharp: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicText
        VB: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicText
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Rubrics
      source:
        remote:
          path: Domain/DTO/Responses/Rubrics/GetRubricsAndTopicsDetailResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: TopicText
        path: ../Domain/DTO/Responses/Rubrics/GetRubricsAndTopicsDetailResponseDTO.cs
        startLine: 15
      syntax:
        content:
          CSharp: public string TopicText { get; set; }
          VB: Public Property TopicText As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicText*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicPublishedDate
      commentId: P:Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicPublishedDate
      language: CSharp
      name:
        CSharp: TopicPublishedDate
        VB: TopicPublishedDate
      nameWithType:
        CSharp: GetRubricsAndTopicsDetailResponseDTO.TopicPublishedDate
        VB: GetRubricsAndTopicsDetailResponseDTO.TopicPublishedDate
      qualifiedName:
        CSharp: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicPublishedDate
        VB: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicPublishedDate
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Rubrics
      source:
        remote:
          path: Domain/DTO/Responses/Rubrics/GetRubricsAndTopicsDetailResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: TopicPublishedDate
        path: ../Domain/DTO/Responses/Rubrics/GetRubricsAndTopicsDetailResponseDTO.cs
        startLine: 16
      syntax:
        content:
          CSharp: public DateTime? TopicPublishedDate { get; set; }
          VB: Public Property TopicPublishedDate As Date?
        parameters: []
        return:
          type: System.Nullable{System.DateTime}
      overload: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicPublishedDate*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicTitle
      commentId: P:Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicTitle
      language: CSharp
      name:
        CSharp: TopicTitle
        VB: TopicTitle
      nameWithType:
        CSharp: GetRubricsAndTopicsDetailResponseDTO.TopicTitle
        VB: GetRubricsAndTopicsDetailResponseDTO.TopicTitle
      qualifiedName:
        CSharp: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicTitle
        VB: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicTitle
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Rubrics
      source:
        remote:
          path: Domain/DTO/Responses/Rubrics/GetRubricsAndTopicsDetailResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: TopicTitle
        path: ../Domain/DTO/Responses/Rubrics/GetRubricsAndTopicsDetailResponseDTO.cs
        startLine: 17
      syntax:
        content:
          CSharp: public string TopicTitle { get; set; }
          VB: Public Property TopicTitle As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicTitle*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicCreatorNickName
      commentId: P:Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicCreatorNickName
      language: CSharp
      name:
        CSharp: TopicCreatorNickName
        VB: TopicCreatorNickName
      nameWithType:
        CSharp: GetRubricsAndTopicsDetailResponseDTO.TopicCreatorNickName
        VB: GetRubricsAndTopicsDetailResponseDTO.TopicCreatorNickName
      qualifiedName:
        CSharp: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicCreatorNickName
        VB: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicCreatorNickName
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Rubrics
      source:
        remote:
          path: Domain/DTO/Responses/Rubrics/GetRubricsAndTopicsDetailResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: TopicCreatorNickName
        path: ../Domain/DTO/Responses/Rubrics/GetRubricsAndTopicsDetailResponseDTO.cs
        startLine: 18
      syntax:
        content:
          CSharp: public string TopicCreatorNickName { get; set; }
          VB: Public Property TopicCreatorNickName As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicCreatorNickName*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: Domain.DTO.Responses.Rubrics.GetRubricsResponseDTO
    commentId: T:Domain.DTO.Responses.Rubrics.GetRubricsResponseDTO
    language: CSharp
    name:
      CSharp: GetRubricsResponseDTO
      VB: GetRubricsResponseDTO
    nameWithType:
      CSharp: GetRubricsResponseDTO
      VB: GetRubricsResponseDTO
    qualifiedName:
      CSharp: Domain.DTO.Responses.Rubrics.GetRubricsResponseDTO
      VB: Domain.DTO.Responses.Rubrics.GetRubricsResponseDTO
    type: Class
    assemblies:
    - Domain
    namespace: Domain.DTO.Responses.Rubrics
    source:
      remote:
        path: Domain/DTO/Responses/Rubrics/GetRubricsResponseDTO.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: GetRubricsResponseDTO
      path: ../Domain/DTO/Responses/Rubrics/GetRubricsResponseDTO.cs
      startLine: 8
    syntax:
      content:
        CSharp: public class GetRubricsResponseDTO
        VB: Public Class GetRubricsResponseDTO
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.DTO.Responses.Rubrics.GetRubricsResponseDTO.RubricId
      commentId: P:Domain.DTO.Responses.Rubrics.GetRubricsResponseDTO.RubricId
      language: CSharp
      name:
        CSharp: RubricId
        VB: RubricId
      nameWithType:
        CSharp: GetRubricsResponseDTO.RubricId
        VB: GetRubricsResponseDTO.RubricId
      qualifiedName:
        CSharp: Domain.DTO.Responses.Rubrics.GetRubricsResponseDTO.RubricId
        VB: Domain.DTO.Responses.Rubrics.GetRubricsResponseDTO.RubricId
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Rubrics
      source:
        remote:
          path: Domain/DTO/Responses/Rubrics/GetRubricsResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: RubricId
        path: ../Domain/DTO/Responses/Rubrics/GetRubricsResponseDTO.cs
        startLine: 11
      syntax:
        content:
          CSharp: public int RubricId { get; set; }
          VB: Public Property RubricId As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Domain.DTO.Responses.Rubrics.GetRubricsResponseDTO.RubricId*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Rubrics.GetRubricsResponseDTO.RubricName
      commentId: P:Domain.DTO.Responses.Rubrics.GetRubricsResponseDTO.RubricName
      language: CSharp
      name:
        CSharp: RubricName
        VB: RubricName
      nameWithType:
        CSharp: GetRubricsResponseDTO.RubricName
        VB: GetRubricsResponseDTO.RubricName
      qualifiedName:
        CSharp: Domain.DTO.Responses.Rubrics.GetRubricsResponseDTO.RubricName
        VB: Domain.DTO.Responses.Rubrics.GetRubricsResponseDTO.RubricName
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Rubrics
      source:
        remote:
          path: Domain/DTO/Responses/Rubrics/GetRubricsResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: RubricName
        path: ../Domain/DTO/Responses/Rubrics/GetRubricsResponseDTO.cs
        startLine: 13
      syntax:
        content:
          CSharp: public string RubricName { get; set; }
          VB: Public Property RubricName As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Responses.Rubrics.GetRubricsResponseDTO.RubricName*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
- id: Domain.DTO.Responses.Topics
  commentId: N:Domain.DTO.Responses.Topics
  language: CSharp
  name:
    CSharp: Domain.DTO.Responses.Topics
    VB: Domain.DTO.Responses.Topics
  nameWithType:
    CSharp: Domain.DTO.Responses.Topics
    VB: Domain.DTO.Responses.Topics
  qualifiedName:
    CSharp: Domain.DTO.Responses.Topics
    VB: Domain.DTO.Responses.Topics
  type: Namespace
  assemblies:
  - Domain
  modifiers: {}
  items:
  - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO
    commentId: T:Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO
    language: CSharp
    name:
      CSharp: GetTopicRepliesDetailResponseDTO
      VB: GetTopicRepliesDetailResponseDTO
    nameWithType:
      CSharp: GetTopicRepliesDetailResponseDTO
      VB: GetTopicRepliesDetailResponseDTO
    qualifiedName:
      CSharp: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO
      VB: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO
    type: Class
    assemblies:
    - Domain
    namespace: Domain.DTO.Responses.Topics
    source:
      remote:
        path: Domain/DTO/Responses/Topics/GetTopicRepliesDetailResponseDTO.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: GetTopicRepliesDetailResponseDTO
      path: ../Domain/DTO/Responses/Topics/GetTopicRepliesDetailResponseDTO.cs
      startLine: 10
    syntax:
      content:
        CSharp: public class GetTopicRepliesDetailResponseDTO
        VB: Public Class GetTopicRepliesDetailResponseDTO
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.TopicId
      commentId: P:Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.TopicId
      language: CSharp
      name:
        CSharp: TopicId
        VB: TopicId
      nameWithType:
        CSharp: GetTopicRepliesDetailResponseDTO.TopicId
        VB: GetTopicRepliesDetailResponseDTO.TopicId
      qualifiedName:
        CSharp: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.TopicId
        VB: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.TopicId
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Topics
      source:
        remote:
          path: Domain/DTO/Responses/Topics/GetTopicRepliesDetailResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: TopicId
        path: ../Domain/DTO/Responses/Topics/GetTopicRepliesDetailResponseDTO.cs
        startLine: 12
      syntax:
        content:
          CSharp: public int TopicId { get; set; }
          VB: Public Property TopicId As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.TopicId*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.TopicViews
      commentId: P:Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.TopicViews
      language: CSharp
      name:
        CSharp: TopicViews
        VB: TopicViews
      nameWithType:
        CSharp: GetTopicRepliesDetailResponseDTO.TopicViews
        VB: GetTopicRepliesDetailResponseDTO.TopicViews
      qualifiedName:
        CSharp: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.TopicViews
        VB: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.TopicViews
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Topics
      source:
        remote:
          path: Domain/DTO/Responses/Topics/GetTopicRepliesDetailResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: TopicViews
        path: ../Domain/DTO/Responses/Topics/GetTopicRepliesDetailResponseDTO.cs
        startLine: 14
      syntax:
        content:
          CSharp: public int TopicViews { get; set; }
          VB: Public Property TopicViews As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.TopicViews*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ChildReplyId
      commentId: P:Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ChildReplyId
      language: CSharp
      name:
        CSharp: ChildReplyId
        VB: ChildReplyId
      nameWithType:
        CSharp: GetTopicRepliesDetailResponseDTO.ChildReplyId
        VB: GetTopicRepliesDetailResponseDTO.ChildReplyId
      qualifiedName:
        CSharp: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ChildReplyId
        VB: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ChildReplyId
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Topics
      source:
        remote:
          path: Domain/DTO/Responses/Topics/GetTopicRepliesDetailResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: ChildReplyId
        path: ../Domain/DTO/Responses/Topics/GetTopicRepliesDetailResponseDTO.cs
        startLine: 16
      syntax:
        content:
          CSharp: public int ChildReplyId { get; set; }
          VB: Public Property ChildReplyId As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ChildReplyId*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.Child_Reply_Deleted
      commentId: P:Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.Child_Reply_Deleted
      language: CSharp
      name:
        CSharp: Child_Reply_Deleted
        VB: Child_Reply_Deleted
      nameWithType:
        CSharp: GetTopicRepliesDetailResponseDTO.Child_Reply_Deleted
        VB: GetTopicRepliesDetailResponseDTO.Child_Reply_Deleted
      qualifiedName:
        CSharp: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.Child_Reply_Deleted
        VB: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.Child_Reply_Deleted
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Topics
      source:
        remote:
          path: Domain/DTO/Responses/Topics/GetTopicRepliesDetailResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Child_Reply_Deleted
        path: ../Domain/DTO/Responses/Topics/GetTopicRepliesDetailResponseDTO.cs
        startLine: 17
      syntax:
        content:
          CSharp: public bool Child_Reply_Deleted { get; set; }
          VB: Public Property Child_Reply_Deleted As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.Child_Reply_Deleted*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ChildReplyText
      commentId: P:Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ChildReplyText
      language: CSharp
      name:
        CSharp: ChildReplyText
        VB: ChildReplyText
      nameWithType:
        CSharp: GetTopicRepliesDetailResponseDTO.ChildReplyText
        VB: GetTopicRepliesDetailResponseDTO.ChildReplyText
      qualifiedName:
        CSharp: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ChildReplyText
        VB: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ChildReplyText
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Topics
      source:
        remote:
          path: Domain/DTO/Responses/Topics/GetTopicRepliesDetailResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: ChildReplyText
        path: ../Domain/DTO/Responses/Topics/GetTopicRepliesDetailResponseDTO.cs
        startLine: 18
      syntax:
        content:
          CSharp: public string ChildReplyText { get; set; }
          VB: Public Property ChildReplyText As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ChildReplyText*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ChildReplyDate
      commentId: P:Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ChildReplyDate
      language: CSharp
      name:
        CSharp: ChildReplyDate
        VB: ChildReplyDate
      nameWithType:
        CSharp: GetTopicRepliesDetailResponseDTO.ChildReplyDate
        VB: GetTopicRepliesDetailResponseDTO.ChildReplyDate
      qualifiedName:
        CSharp: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ChildReplyDate
        VB: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ChildReplyDate
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Topics
      source:
        remote:
          path: Domain/DTO/Responses/Topics/GetTopicRepliesDetailResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: ChildReplyDate
        path: ../Domain/DTO/Responses/Topics/GetTopicRepliesDetailResponseDTO.cs
        startLine: 19
      syntax:
        content:
          CSharp: public DateTime ChildReplyDate { get; set; }
          VB: Public Property ChildReplyDate As Date
        parameters: []
        return:
          type: System.DateTime
      overload: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ChildReplyDate*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.CR_CreatorId
      commentId: P:Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.CR_CreatorId
      language: CSharp
      name:
        CSharp: CR_CreatorId
        VB: CR_CreatorId
      nameWithType:
        CSharp: GetTopicRepliesDetailResponseDTO.CR_CreatorId
        VB: GetTopicRepliesDetailResponseDTO.CR_CreatorId
      qualifiedName:
        CSharp: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.CR_CreatorId
        VB: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.CR_CreatorId
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Topics
      source:
        remote:
          path: Domain/DTO/Responses/Topics/GetTopicRepliesDetailResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: CR_CreatorId
        path: ../Domain/DTO/Responses/Topics/GetTopicRepliesDetailResponseDTO.cs
        startLine: 20
      syntax:
        content:
          CSharp: public int CR_CreatorId { get; set; }
          VB: Public Property CR_CreatorId As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.CR_CreatorId*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.CR_CreatorNickName
      commentId: P:Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.CR_CreatorNickName
      language: CSharp
      name:
        CSharp: CR_CreatorNickName
        VB: CR_CreatorNickName
      nameWithType:
        CSharp: GetTopicRepliesDetailResponseDTO.CR_CreatorNickName
        VB: GetTopicRepliesDetailResponseDTO.CR_CreatorNickName
      qualifiedName:
        CSharp: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.CR_CreatorNickName
        VB: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.CR_CreatorNickName
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Topics
      source:
        remote:
          path: Domain/DTO/Responses/Topics/GetTopicRepliesDetailResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: CR_CreatorNickName
        path: ../Domain/DTO/Responses/Topics/GetTopicRepliesDetailResponseDTO.cs
        startLine: 21
      syntax:
        content:
          CSharp: public string CR_CreatorNickName { get; set; }
          VB: Public Property CR_CreatorNickName As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.CR_CreatorNickName*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ParentReplyId
      commentId: P:Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ParentReplyId
      language: CSharp
      name:
        CSharp: ParentReplyId
        VB: ParentReplyId
      nameWithType:
        CSharp: GetTopicRepliesDetailResponseDTO.ParentReplyId
        VB: GetTopicRepliesDetailResponseDTO.ParentReplyId
      qualifiedName:
        CSharp: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ParentReplyId
        VB: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ParentReplyId
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Topics
      source:
        remote:
          path: Domain/DTO/Responses/Topics/GetTopicRepliesDetailResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: ParentReplyId
        path: ../Domain/DTO/Responses/Topics/GetTopicRepliesDetailResponseDTO.cs
        startLine: 22
      syntax:
        content:
          CSharp: public int? ParentReplyId { get; set; }
          VB: Public Property ParentReplyId As Integer?
        parameters: []
        return:
          type: System.Nullable{System.Int32}
      overload: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ParentReplyId*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ParentReplyText
      commentId: P:Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ParentReplyText
      language: CSharp
      name:
        CSharp: ParentReplyText
        VB: ParentReplyText
      nameWithType:
        CSharp: GetTopicRepliesDetailResponseDTO.ParentReplyText
        VB: GetTopicRepliesDetailResponseDTO.ParentReplyText
      qualifiedName:
        CSharp: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ParentReplyText
        VB: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ParentReplyText
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Topics
      source:
        remote:
          path: Domain/DTO/Responses/Topics/GetTopicRepliesDetailResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: ParentReplyText
        path: ../Domain/DTO/Responses/Topics/GetTopicRepliesDetailResponseDTO.cs
        startLine: 24
      syntax:
        content:
          CSharp: public string ParentReplyText { get; set; }
          VB: Public Property ParentReplyText As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ParentReplyText*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ParentReplyDate
      commentId: P:Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ParentReplyDate
      language: CSharp
      name:
        CSharp: ParentReplyDate
        VB: ParentReplyDate
      nameWithType:
        CSharp: GetTopicRepliesDetailResponseDTO.ParentReplyDate
        VB: GetTopicRepliesDetailResponseDTO.ParentReplyDate
      qualifiedName:
        CSharp: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ParentReplyDate
        VB: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ParentReplyDate
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Topics
      source:
        remote:
          path: Domain/DTO/Responses/Topics/GetTopicRepliesDetailResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: ParentReplyDate
        path: ../Domain/DTO/Responses/Topics/GetTopicRepliesDetailResponseDTO.cs
        startLine: 25
      syntax:
        content:
          CSharp: public DateTime? ParentReplyDate { get; set; }
          VB: Public Property ParentReplyDate As Date?
        parameters: []
        return:
          type: System.Nullable{System.DateTime}
      overload: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ParentReplyDate*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.PR_CreatorId
      commentId: P:Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.PR_CreatorId
      language: CSharp
      name:
        CSharp: PR_CreatorId
        VB: PR_CreatorId
      nameWithType:
        CSharp: GetTopicRepliesDetailResponseDTO.PR_CreatorId
        VB: GetTopicRepliesDetailResponseDTO.PR_CreatorId
      qualifiedName:
        CSharp: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.PR_CreatorId
        VB: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.PR_CreatorId
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Topics
      source:
        remote:
          path: Domain/DTO/Responses/Topics/GetTopicRepliesDetailResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: PR_CreatorId
        path: ../Domain/DTO/Responses/Topics/GetTopicRepliesDetailResponseDTO.cs
        startLine: 26
      syntax:
        content:
          CSharp: public int? PR_CreatorId { get; set; }
          VB: Public Property PR_CreatorId As Integer?
        parameters: []
        return:
          type: System.Nullable{System.Int32}
      overload: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.PR_CreatorId*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.PR_CreatorNickName
      commentId: P:Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.PR_CreatorNickName
      language: CSharp
      name:
        CSharp: PR_CreatorNickName
        VB: PR_CreatorNickName
      nameWithType:
        CSharp: GetTopicRepliesDetailResponseDTO.PR_CreatorNickName
        VB: GetTopicRepliesDetailResponseDTO.PR_CreatorNickName
      qualifiedName:
        CSharp: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.PR_CreatorNickName
        VB: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.PR_CreatorNickName
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Topics
      source:
        remote:
          path: Domain/DTO/Responses/Topics/GetTopicRepliesDetailResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: PR_CreatorNickName
        path: ../Domain/DTO/Responses/Topics/GetTopicRepliesDetailResponseDTO.cs
        startLine: 27
      syntax:
        content:
          CSharp: public string PR_CreatorNickName { get; set; }
          VB: Public Property PR_CreatorNickName As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.PR_CreatorNickName*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: Domain.DTO.Responses.Topics.TopicResponseDTO
    commentId: T:Domain.DTO.Responses.Topics.TopicResponseDTO
    language: CSharp
    name:
      CSharp: TopicResponseDTO
      VB: TopicResponseDTO
    nameWithType:
      CSharp: TopicResponseDTO
      VB: TopicResponseDTO
    qualifiedName:
      CSharp: Domain.DTO.Responses.Topics.TopicResponseDTO
      VB: Domain.DTO.Responses.Topics.TopicResponseDTO
    type: Class
    assemblies:
    - Domain
    namespace: Domain.DTO.Responses.Topics
    source:
      remote:
        path: Domain/DTO/Responses/Topics/TopicResponseDTO.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: TopicResponseDTO
      path: ../Domain/DTO/Responses/Topics/TopicResponseDTO.cs
      startLine: 8
    syntax:
      content:
        CSharp: public class TopicResponseDTO
        VB: Public Class TopicResponseDTO
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicId
      commentId: P:Domain.DTO.Responses.Topics.TopicResponseDTO.TopicId
      language: CSharp
      name:
        CSharp: TopicId
        VB: TopicId
      nameWithType:
        CSharp: TopicResponseDTO.TopicId
        VB: TopicResponseDTO.TopicId
      qualifiedName:
        CSharp: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicId
        VB: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicId
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Topics
      source:
        remote:
          path: Domain/DTO/Responses/Topics/TopicResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: TopicId
        path: ../Domain/DTO/Responses/Topics/TopicResponseDTO.cs
        startLine: 10
      syntax:
        content:
          CSharp: public int TopicId { get; set; }
          VB: Public Property TopicId As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicId*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicTitle
      commentId: P:Domain.DTO.Responses.Topics.TopicResponseDTO.TopicTitle
      language: CSharp
      name:
        CSharp: TopicTitle
        VB: TopicTitle
      nameWithType:
        CSharp: TopicResponseDTO.TopicTitle
        VB: TopicResponseDTO.TopicTitle
      qualifiedName:
        CSharp: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicTitle
        VB: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicTitle
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Topics
      source:
        remote:
          path: Domain/DTO/Responses/Topics/TopicResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: TopicTitle
        path: ../Domain/DTO/Responses/Topics/TopicResponseDTO.cs
        startLine: 11
      syntax:
        content:
          CSharp: public string TopicTitle { get; set; }
          VB: Public Property TopicTitle As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicTitle*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicText
      commentId: P:Domain.DTO.Responses.Topics.TopicResponseDTO.TopicText
      language: CSharp
      name:
        CSharp: TopicText
        VB: TopicText
      nameWithType:
        CSharp: TopicResponseDTO.TopicText
        VB: TopicResponseDTO.TopicText
      qualifiedName:
        CSharp: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicText
        VB: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicText
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Topics
      source:
        remote:
          path: Domain/DTO/Responses/Topics/TopicResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: TopicText
        path: ../Domain/DTO/Responses/Topics/TopicResponseDTO.cs
        startLine: 12
      syntax:
        content:
          CSharp: public string TopicText { get; set; }
          VB: Public Property TopicText As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicText*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicPublishedDate
      commentId: P:Domain.DTO.Responses.Topics.TopicResponseDTO.TopicPublishedDate
      language: CSharp
      name:
        CSharp: TopicPublishedDate
        VB: TopicPublishedDate
      nameWithType:
        CSharp: TopicResponseDTO.TopicPublishedDate
        VB: TopicResponseDTO.TopicPublishedDate
      qualifiedName:
        CSharp: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicPublishedDate
        VB: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicPublishedDate
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Topics
      source:
        remote:
          path: Domain/DTO/Responses/Topics/TopicResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: TopicPublishedDate
        path: ../Domain/DTO/Responses/Topics/TopicResponseDTO.cs
        startLine: 13
      syntax:
        content:
          CSharp: public DateTime TopicPublishedDate { get; set; }
          VB: Public Property TopicPublishedDate As Date
        parameters: []
        return:
          type: System.DateTime
      overload: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicPublishedDate*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicCreatorId
      commentId: P:Domain.DTO.Responses.Topics.TopicResponseDTO.TopicCreatorId
      language: CSharp
      name:
        CSharp: TopicCreatorId
        VB: TopicCreatorId
      nameWithType:
        CSharp: TopicResponseDTO.TopicCreatorId
        VB: TopicResponseDTO.TopicCreatorId
      qualifiedName:
        CSharp: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicCreatorId
        VB: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicCreatorId
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Topics
      source:
        remote:
          path: Domain/DTO/Responses/Topics/TopicResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: TopicCreatorId
        path: ../Domain/DTO/Responses/Topics/TopicResponseDTO.cs
        startLine: 15
      syntax:
        content:
          CSharp: public int TopicCreatorId { get; set; }
          VB: Public Property TopicCreatorId As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicCreatorId*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicIdRubric
      commentId: P:Domain.DTO.Responses.Topics.TopicResponseDTO.TopicIdRubric
      language: CSharp
      name:
        CSharp: TopicIdRubric
        VB: TopicIdRubric
      nameWithType:
        CSharp: TopicResponseDTO.TopicIdRubric
        VB: TopicResponseDTO.TopicIdRubric
      qualifiedName:
        CSharp: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicIdRubric
        VB: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicIdRubric
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Topics
      source:
        remote:
          path: Domain/DTO/Responses/Topics/TopicResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: TopicIdRubric
        path: ../Domain/DTO/Responses/Topics/TopicResponseDTO.cs
        startLine: 16
      syntax:
        content:
          CSharp: public int TopicIdRubric { get; set; }
          VB: Public Property TopicIdRubric As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicIdRubric*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicCountViews
      commentId: P:Domain.DTO.Responses.Topics.TopicResponseDTO.TopicCountViews
      language: CSharp
      name:
        CSharp: TopicCountViews
        VB: TopicCountViews
      nameWithType:
        CSharp: TopicResponseDTO.TopicCountViews
        VB: TopicResponseDTO.TopicCountViews
      qualifiedName:
        CSharp: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicCountViews
        VB: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicCountViews
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Topics
      source:
        remote:
          path: Domain/DTO/Responses/Topics/TopicResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: TopicCountViews
        path: ../Domain/DTO/Responses/Topics/TopicResponseDTO.cs
        startLine: 18
      syntax:
        content:
          CSharp: public int TopicCountViews { get; set; }
          VB: Public Property TopicCountViews As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicCountViews*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Topics.TopicResponseDTO.Equals(System.Object)
      commentId: M:Domain.DTO.Responses.Topics.TopicResponseDTO.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: TopicResponseDTO.Equals(Object)
        VB: TopicResponseDTO.Equals(Object)
      qualifiedName:
        CSharp: Domain.DTO.Responses.Topics.TopicResponseDTO.Equals(System.Object)
        VB: Domain.DTO.Responses.Topics.TopicResponseDTO.Equals(System.Object)
      type: Method
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Topics
      source:
        remote:
          path: Domain/DTO/Responses/Topics/TopicResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Equals
        path: ../Domain/DTO/Responses/Topics/TopicResponseDTO.cs
        startLine: 20
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Domain.DTO.Responses.Topics.TopicResponseDTO.Equals*
      overridden: System.Object.Equals(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
- id: Domain.DTO.Responses.Users
  commentId: N:Domain.DTO.Responses.Users
  language: CSharp
  name:
    CSharp: Domain.DTO.Responses.Users
    VB: Domain.DTO.Responses.Users
  nameWithType:
    CSharp: Domain.DTO.Responses.Users
    VB: Domain.DTO.Responses.Users
  qualifiedName:
    CSharp: Domain.DTO.Responses.Users
    VB: Domain.DTO.Responses.Users
  type: Namespace
  assemblies:
  - Domain
  modifiers: {}
  items:
  - id: Domain.DTO.Responses.Users.CreateUserResponseDTO
    commentId: T:Domain.DTO.Responses.Users.CreateUserResponseDTO
    language: CSharp
    name:
      CSharp: CreateUserResponseDTO
      VB: CreateUserResponseDTO
    nameWithType:
      CSharp: CreateUserResponseDTO
      VB: CreateUserResponseDTO
    qualifiedName:
      CSharp: Domain.DTO.Responses.Users.CreateUserResponseDTO
      VB: Domain.DTO.Responses.Users.CreateUserResponseDTO
    type: Class
    assemblies:
    - Domain
    namespace: Domain.DTO.Responses.Users
    source:
      remote:
        path: Domain/DTO/Responses/Users/CreateUserResponseDTO.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: CreateUserResponseDTO
      path: ../Domain/DTO/Responses/Users/CreateUserResponseDTO.cs
      startLine: 8
    syntax:
      content:
        CSharp: public class CreateUserResponseDTO
        VB: Public Class CreateUserResponseDTO
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.DTO.Responses.Users.CreateUserResponseDTO.Name
      commentId: P:Domain.DTO.Responses.Users.CreateUserResponseDTO.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: CreateUserResponseDTO.Name
        VB: CreateUserResponseDTO.Name
      qualifiedName:
        CSharp: Domain.DTO.Responses.Users.CreateUserResponseDTO.Name
        VB: Domain.DTO.Responses.Users.CreateUserResponseDTO.Name
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Users
      source:
        remote:
          path: Domain/DTO/Responses/Users/CreateUserResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Name
        path: ../Domain/DTO/Responses/Users/CreateUserResponseDTO.cs
        startLine: 11
      syntax:
        content:
          CSharp: public string Name { get; set; }
          VB: Public Property Name As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Responses.Users.CreateUserResponseDTO.Name*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Users.CreateUserResponseDTO.Message
      commentId: P:Domain.DTO.Responses.Users.CreateUserResponseDTO.Message
      language: CSharp
      name:
        CSharp: Message
        VB: Message
      nameWithType:
        CSharp: CreateUserResponseDTO.Message
        VB: CreateUserResponseDTO.Message
      qualifiedName:
        CSharp: Domain.DTO.Responses.Users.CreateUserResponseDTO.Message
        VB: Domain.DTO.Responses.Users.CreateUserResponseDTO.Message
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Users
      source:
        remote:
          path: Domain/DTO/Responses/Users/CreateUserResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Message
        path: ../Domain/DTO/Responses/Users/CreateUserResponseDTO.cs
        startLine: 12
      syntax:
        content:
          CSharp: public string Message { get; set; }
          VB: Public Property Message As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Responses.Users.CreateUserResponseDTO.Message*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: Domain.DTO.Responses.Users.GetUserByIdResponseDTO
    commentId: T:Domain.DTO.Responses.Users.GetUserByIdResponseDTO
    language: CSharp
    name:
      CSharp: GetUserByIdResponseDTO
      VB: GetUserByIdResponseDTO
    nameWithType:
      CSharp: GetUserByIdResponseDTO
      VB: GetUserByIdResponseDTO
    qualifiedName:
      CSharp: Domain.DTO.Responses.Users.GetUserByIdResponseDTO
      VB: Domain.DTO.Responses.Users.GetUserByIdResponseDTO
    type: Class
    assemblies:
    - Domain
    namespace: Domain.DTO.Responses.Users
    source:
      remote:
        path: Domain/DTO/Responses/Users/GetUserByIdResponseDTO.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: GetUserByIdResponseDTO
      path: ../Domain/DTO/Responses/Users/GetUserByIdResponseDTO.cs
      startLine: 8
    syntax:
      content:
        CSharp: public class GetUserByIdResponseDTO
        VB: Public Class GetUserByIdResponseDTO
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Name
      commentId: P:Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: GetUserByIdResponseDTO.Name
        VB: GetUserByIdResponseDTO.Name
      qualifiedName:
        CSharp: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Name
        VB: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Name
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Users
      source:
        remote:
          path: Domain/DTO/Responses/Users/GetUserByIdResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Name
        path: ../Domain/DTO/Responses/Users/GetUserByIdResponseDTO.cs
        startLine: 10
      syntax:
        content:
          CSharp: public string Name { get; set; }
          VB: Public Property Name As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Name*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.First_Name
      commentId: P:Domain.DTO.Responses.Users.GetUserByIdResponseDTO.First_Name
      language: CSharp
      name:
        CSharp: First_Name
        VB: First_Name
      nameWithType:
        CSharp: GetUserByIdResponseDTO.First_Name
        VB: GetUserByIdResponseDTO.First_Name
      qualifiedName:
        CSharp: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.First_Name
        VB: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.First_Name
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Users
      source:
        remote:
          path: Domain/DTO/Responses/Users/GetUserByIdResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: First_Name
        path: ../Domain/DTO/Responses/Users/GetUserByIdResponseDTO.cs
        startLine: 11
      syntax:
        content:
          CSharp: public string First_Name { get; set; }
          VB: Public Property First_Name As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.First_Name*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Login_Name
      commentId: P:Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Login_Name
      language: CSharp
      name:
        CSharp: Login_Name
        VB: Login_Name
      nameWithType:
        CSharp: GetUserByIdResponseDTO.Login_Name
        VB: GetUserByIdResponseDTO.Login_Name
      qualifiedName:
        CSharp: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Login_Name
        VB: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Login_Name
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Users
      source:
        remote:
          path: Domain/DTO/Responses/Users/GetUserByIdResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Login_Name
        path: ../Domain/DTO/Responses/Users/GetUserByIdResponseDTO.cs
        startLine: 12
      syntax:
        content:
          CSharp: public string Login_Name { get; set; }
          VB: Public Property Login_Name As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Login_Name*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Ph_No
      commentId: P:Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Ph_No
      language: CSharp
      name:
        CSharp: Ph_No
        VB: Ph_No
      nameWithType:
        CSharp: GetUserByIdResponseDTO.Ph_No
        VB: GetUserByIdResponseDTO.Ph_No
      qualifiedName:
        CSharp: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Ph_No
        VB: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Ph_No
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Users
      source:
        remote:
          path: Domain/DTO/Responses/Users/GetUserByIdResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Ph_No
        path: ../Domain/DTO/Responses/Users/GetUserByIdResponseDTO.cs
        startLine: 13
      syntax:
        content:
          CSharp: public string Ph_No { get; set; }
          VB: Public Property Ph_No As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Ph_No*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Photo
      commentId: P:Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Photo
      language: CSharp
      name:
        CSharp: Photo
        VB: Photo
      nameWithType:
        CSharp: GetUserByIdResponseDTO.Photo
        VB: GetUserByIdResponseDTO.Photo
      qualifiedName:
        CSharp: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Photo
        VB: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Photo
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Users
      source:
        remote:
          path: Domain/DTO/Responses/Users/GetUserByIdResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Photo
        path: ../Domain/DTO/Responses/Users/GetUserByIdResponseDTO.cs
        startLine: 14
      syntax:
        content:
          CSharp: public byte[] Photo { get; set; }
          VB: Public Property Photo As Byte()
        parameters: []
        return:
          type: System.Byte[]
      overload: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Photo*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.E_Mail
      commentId: P:Domain.DTO.Responses.Users.GetUserByIdResponseDTO.E_Mail
      language: CSharp
      name:
        CSharp: E_Mail
        VB: E_Mail
      nameWithType:
        CSharp: GetUserByIdResponseDTO.E_Mail
        VB: GetUserByIdResponseDTO.E_Mail
      qualifiedName:
        CSharp: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.E_Mail
        VB: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.E_Mail
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Users
      source:
        remote:
          path: Domain/DTO/Responses/Users/GetUserByIdResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: E_Mail
        path: ../Domain/DTO/Responses/Users/GetUserByIdResponseDTO.cs
        startLine: 15
      syntax:
        content:
          CSharp: public string E_Mail { get; set; }
          VB: Public Property E_Mail As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.E_Mail*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Password
      commentId: P:Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Password
      language: CSharp
      name:
        CSharp: Password
        VB: Password
      nameWithType:
        CSharp: GetUserByIdResponseDTO.Password
        VB: GetUserByIdResponseDTO.Password
      qualifiedName:
        CSharp: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Password
        VB: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Password
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Users
      source:
        remote:
          path: Domain/DTO/Responses/Users/GetUserByIdResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Password
        path: ../Domain/DTO/Responses/Users/GetUserByIdResponseDTO.cs
        startLine: 16
      syntax:
        content:
          CSharp: public string Password { get; set; }
          VB: Public Property Password As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Password*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.ModeratorYN
      commentId: P:Domain.DTO.Responses.Users.GetUserByIdResponseDTO.ModeratorYN
      language: CSharp
      name:
        CSharp: ModeratorYN
        VB: ModeratorYN
      nameWithType:
        CSharp: GetUserByIdResponseDTO.ModeratorYN
        VB: GetUserByIdResponseDTO.ModeratorYN
      qualifiedName:
        CSharp: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.ModeratorYN
        VB: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.ModeratorYN
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Users
      source:
        remote:
          path: Domain/DTO/Responses/Users/GetUserByIdResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: ModeratorYN
        path: ../Domain/DTO/Responses/Users/GetUserByIdResponseDTO.cs
        startLine: 17
      syntax:
        content:
          CSharp: public bool ModeratorYN { get; set; }
          VB: Public Property ModeratorYN As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.ModeratorYN*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Id
      commentId: P:Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Id
      language: CSharp
      name:
        CSharp: Id
        VB: Id
      nameWithType:
        CSharp: GetUserByIdResponseDTO.Id
        VB: GetUserByIdResponseDTO.Id
      qualifiedName:
        CSharp: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Id
        VB: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Id
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Users
      source:
        remote:
          path: Domain/DTO/Responses/Users/GetUserByIdResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Id
        path: ../Domain/DTO/Responses/Users/GetUserByIdResponseDTO.cs
        startLine: 18
      syntax:
        content:
          CSharp: public int Id { get; set; }
          VB: Public Property Id As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Id*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: Domain.DTO.Responses.Users.GetUsersResponseDTO
    commentId: T:Domain.DTO.Responses.Users.GetUsersResponseDTO
    language: CSharp
    name:
      CSharp: GetUsersResponseDTO
      VB: GetUsersResponseDTO
    nameWithType:
      CSharp: GetUsersResponseDTO
      VB: GetUsersResponseDTO
    qualifiedName:
      CSharp: Domain.DTO.Responses.Users.GetUsersResponseDTO
      VB: Domain.DTO.Responses.Users.GetUsersResponseDTO
    type: Class
    assemblies:
    - Domain
    namespace: Domain.DTO.Responses.Users
    source:
      remote:
        path: Domain/DTO/Responses/Users/GetUsersResponseDTO.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: GetUsersResponseDTO
      path: ../Domain/DTO/Responses/Users/GetUsersResponseDTO.cs
      startLine: 8
    syntax:
      content:
        CSharp: public class GetUsersResponseDTO
        VB: Public Class GetUsersResponseDTO
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.DTO.Responses.Users.GetUsersResponseDTO.Id
      commentId: P:Domain.DTO.Responses.Users.GetUsersResponseDTO.Id
      language: CSharp
      name:
        CSharp: Id
        VB: Id
      nameWithType:
        CSharp: GetUsersResponseDTO.Id
        VB: GetUsersResponseDTO.Id
      qualifiedName:
        CSharp: Domain.DTO.Responses.Users.GetUsersResponseDTO.Id
        VB: Domain.DTO.Responses.Users.GetUsersResponseDTO.Id
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Users
      source:
        remote:
          path: Domain/DTO/Responses/Users/GetUsersResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Id
        path: ../Domain/DTO/Responses/Users/GetUsersResponseDTO.cs
        startLine: 10
      syntax:
        content:
          CSharp: public int Id { get; set; }
          VB: Public Property Id As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Domain.DTO.Responses.Users.GetUsersResponseDTO.Id*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Users.GetUsersResponseDTO.Name
      commentId: P:Domain.DTO.Responses.Users.GetUsersResponseDTO.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: GetUsersResponseDTO.Name
        VB: GetUsersResponseDTO.Name
      qualifiedName:
        CSharp: Domain.DTO.Responses.Users.GetUsersResponseDTO.Name
        VB: Domain.DTO.Responses.Users.GetUsersResponseDTO.Name
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Users
      source:
        remote:
          path: Domain/DTO/Responses/Users/GetUsersResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Name
        path: ../Domain/DTO/Responses/Users/GetUsersResponseDTO.cs
        startLine: 11
      syntax:
        content:
          CSharp: public string Name { get; set; }
          VB: Public Property Name As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Responses.Users.GetUsersResponseDTO.Name*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Users.GetUsersResponseDTO.FirstName
      commentId: P:Domain.DTO.Responses.Users.GetUsersResponseDTO.FirstName
      language: CSharp
      name:
        CSharp: FirstName
        VB: FirstName
      nameWithType:
        CSharp: GetUsersResponseDTO.FirstName
        VB: GetUsersResponseDTO.FirstName
      qualifiedName:
        CSharp: Domain.DTO.Responses.Users.GetUsersResponseDTO.FirstName
        VB: Domain.DTO.Responses.Users.GetUsersResponseDTO.FirstName
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Users
      source:
        remote:
          path: Domain/DTO/Responses/Users/GetUsersResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: FirstName
        path: ../Domain/DTO/Responses/Users/GetUsersResponseDTO.cs
        startLine: 12
      syntax:
        content:
          CSharp: public string FirstName { get; set; }
          VB: Public Property FirstName As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Responses.Users.GetUsersResponseDTO.FirstName*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Users.GetUsersResponseDTO.LoginName
      commentId: P:Domain.DTO.Responses.Users.GetUsersResponseDTO.LoginName
      language: CSharp
      name:
        CSharp: LoginName
        VB: LoginName
      nameWithType:
        CSharp: GetUsersResponseDTO.LoginName
        VB: GetUsersResponseDTO.LoginName
      qualifiedName:
        CSharp: Domain.DTO.Responses.Users.GetUsersResponseDTO.LoginName
        VB: Domain.DTO.Responses.Users.GetUsersResponseDTO.LoginName
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Users
      source:
        remote:
          path: Domain/DTO/Responses/Users/GetUsersResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: LoginName
        path: ../Domain/DTO/Responses/Users/GetUsersResponseDTO.cs
        startLine: 13
      syntax:
        content:
          CSharp: public string LoginName { get; set; }
          VB: Public Property LoginName As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Responses.Users.GetUsersResponseDTO.LoginName*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Users.GetUsersResponseDTO.PhNo
      commentId: P:Domain.DTO.Responses.Users.GetUsersResponseDTO.PhNo
      language: CSharp
      name:
        CSharp: PhNo
        VB: PhNo
      nameWithType:
        CSharp: GetUsersResponseDTO.PhNo
        VB: GetUsersResponseDTO.PhNo
      qualifiedName:
        CSharp: Domain.DTO.Responses.Users.GetUsersResponseDTO.PhNo
        VB: Domain.DTO.Responses.Users.GetUsersResponseDTO.PhNo
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Users
      source:
        remote:
          path: Domain/DTO/Responses/Users/GetUsersResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: PhNo
        path: ../Domain/DTO/Responses/Users/GetUsersResponseDTO.cs
        startLine: 14
      syntax:
        content:
          CSharp: public string PhNo { get; set; }
          VB: Public Property PhNo As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Responses.Users.GetUsersResponseDTO.PhNo*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Users.GetUsersResponseDTO.EMail
      commentId: P:Domain.DTO.Responses.Users.GetUsersResponseDTO.EMail
      language: CSharp
      name:
        CSharp: EMail
        VB: EMail
      nameWithType:
        CSharp: GetUsersResponseDTO.EMail
        VB: GetUsersResponseDTO.EMail
      qualifiedName:
        CSharp: Domain.DTO.Responses.Users.GetUsersResponseDTO.EMail
        VB: Domain.DTO.Responses.Users.GetUsersResponseDTO.EMail
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Users
      source:
        remote:
          path: Domain/DTO/Responses/Users/GetUsersResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: EMail
        path: ../Domain/DTO/Responses/Users/GetUsersResponseDTO.cs
        startLine: 16
      syntax:
        content:
          CSharp: public string EMail { get; set; }
          VB: Public Property EMail As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Responses.Users.GetUsersResponseDTO.EMail*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Users.GetUsersResponseDTO.ModeratorYN
      commentId: P:Domain.DTO.Responses.Users.GetUsersResponseDTO.ModeratorYN
      language: CSharp
      name:
        CSharp: ModeratorYN
        VB: ModeratorYN
      nameWithType:
        CSharp: GetUsersResponseDTO.ModeratorYN
        VB: GetUsersResponseDTO.ModeratorYN
      qualifiedName:
        CSharp: Domain.DTO.Responses.Users.GetUsersResponseDTO.ModeratorYN
        VB: Domain.DTO.Responses.Users.GetUsersResponseDTO.ModeratorYN
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Users
      source:
        remote:
          path: Domain/DTO/Responses/Users/GetUsersResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: ModeratorYN
        path: ../Domain/DTO/Responses/Users/GetUsersResponseDTO.cs
        startLine: 18
      syntax:
        content:
          CSharp: public bool ModeratorYN { get; set; }
          VB: Public Property ModeratorYN As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Domain.DTO.Responses.Users.GetUsersResponseDTO.ModeratorYN*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Users.GetUsersResponseDTO.Password
      commentId: P:Domain.DTO.Responses.Users.GetUsersResponseDTO.Password
      language: CSharp
      name:
        CSharp: Password
        VB: Password
      nameWithType:
        CSharp: GetUsersResponseDTO.Password
        VB: GetUsersResponseDTO.Password
      qualifiedName:
        CSharp: Domain.DTO.Responses.Users.GetUsersResponseDTO.Password
        VB: Domain.DTO.Responses.Users.GetUsersResponseDTO.Password
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Users
      source:
        remote:
          path: Domain/DTO/Responses/Users/GetUsersResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Password
        path: ../Domain/DTO/Responses/Users/GetUsersResponseDTO.cs
        startLine: 19
      syntax:
        content:
          CSharp: public string Password { get; set; }
          VB: Public Property Password As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Responses.Users.GetUsersResponseDTO.Password*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: Domain.DTO.Responses.Users.UpdateUserResponseDTO
    commentId: T:Domain.DTO.Responses.Users.UpdateUserResponseDTO
    language: CSharp
    name:
      CSharp: UpdateUserResponseDTO
      VB: UpdateUserResponseDTO
    nameWithType:
      CSharp: UpdateUserResponseDTO
      VB: UpdateUserResponseDTO
    qualifiedName:
      CSharp: Domain.DTO.Responses.Users.UpdateUserResponseDTO
      VB: Domain.DTO.Responses.Users.UpdateUserResponseDTO
    type: Class
    assemblies:
    - Domain
    namespace: Domain.DTO.Responses.Users
    source:
      remote:
        path: Domain/DTO/Responses/Users/UpdateUserResponseDTO.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: UpdateUserResponseDTO
      path: ../Domain/DTO/Responses/Users/UpdateUserResponseDTO.cs
      startLine: 8
    syntax:
      content:
        CSharp: public class UpdateUserResponseDTO
        VB: Public Class UpdateUserResponseDTO
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Name
      commentId: P:Domain.DTO.Responses.Users.UpdateUserResponseDTO.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: UpdateUserResponseDTO.Name
        VB: UpdateUserResponseDTO.Name
      qualifiedName:
        CSharp: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Name
        VB: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Name
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Users
      source:
        remote:
          path: Domain/DTO/Responses/Users/UpdateUserResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Name
        path: ../Domain/DTO/Responses/Users/UpdateUserResponseDTO.cs
        startLine: 10
      syntax:
        content:
          CSharp: public string Name { get; set; }
          VB: Public Property Name As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Name*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Users.UpdateUserResponseDTO.First_Name
      commentId: P:Domain.DTO.Responses.Users.UpdateUserResponseDTO.First_Name
      language: CSharp
      name:
        CSharp: First_Name
        VB: First_Name
      nameWithType:
        CSharp: UpdateUserResponseDTO.First_Name
        VB: UpdateUserResponseDTO.First_Name
      qualifiedName:
        CSharp: Domain.DTO.Responses.Users.UpdateUserResponseDTO.First_Name
        VB: Domain.DTO.Responses.Users.UpdateUserResponseDTO.First_Name
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Users
      source:
        remote:
          path: Domain/DTO/Responses/Users/UpdateUserResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: First_Name
        path: ../Domain/DTO/Responses/Users/UpdateUserResponseDTO.cs
        startLine: 11
      syntax:
        content:
          CSharp: public string First_Name { get; set; }
          VB: Public Property First_Name As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Responses.Users.UpdateUserResponseDTO.First_Name*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Login_Name
      commentId: P:Domain.DTO.Responses.Users.UpdateUserResponseDTO.Login_Name
      language: CSharp
      name:
        CSharp: Login_Name
        VB: Login_Name
      nameWithType:
        CSharp: UpdateUserResponseDTO.Login_Name
        VB: UpdateUserResponseDTO.Login_Name
      qualifiedName:
        CSharp: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Login_Name
        VB: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Login_Name
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Users
      source:
        remote:
          path: Domain/DTO/Responses/Users/UpdateUserResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Login_Name
        path: ../Domain/DTO/Responses/Users/UpdateUserResponseDTO.cs
        startLine: 12
      syntax:
        content:
          CSharp: public string Login_Name { get; set; }
          VB: Public Property Login_Name As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Login_Name*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Ph_No
      commentId: P:Domain.DTO.Responses.Users.UpdateUserResponseDTO.Ph_No
      language: CSharp
      name:
        CSharp: Ph_No
        VB: Ph_No
      nameWithType:
        CSharp: UpdateUserResponseDTO.Ph_No
        VB: UpdateUserResponseDTO.Ph_No
      qualifiedName:
        CSharp: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Ph_No
        VB: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Ph_No
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Users
      source:
        remote:
          path: Domain/DTO/Responses/Users/UpdateUserResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Ph_No
        path: ../Domain/DTO/Responses/Users/UpdateUserResponseDTO.cs
        startLine: 13
      syntax:
        content:
          CSharp: public string Ph_No { get; set; }
          VB: Public Property Ph_No As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Ph_No*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Users.UpdateUserResponseDTO.E_Mail
      commentId: P:Domain.DTO.Responses.Users.UpdateUserResponseDTO.E_Mail
      language: CSharp
      name:
        CSharp: E_Mail
        VB: E_Mail
      nameWithType:
        CSharp: UpdateUserResponseDTO.E_Mail
        VB: UpdateUserResponseDTO.E_Mail
      qualifiedName:
        CSharp: Domain.DTO.Responses.Users.UpdateUserResponseDTO.E_Mail
        VB: Domain.DTO.Responses.Users.UpdateUserResponseDTO.E_Mail
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Users
      source:
        remote:
          path: Domain/DTO/Responses/Users/UpdateUserResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: E_Mail
        path: ../Domain/DTO/Responses/Users/UpdateUserResponseDTO.cs
        startLine: 15
      syntax:
        content:
          CSharp: public string E_Mail { get; set; }
          VB: Public Property E_Mail As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Responses.Users.UpdateUserResponseDTO.E_Mail*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Password
      commentId: P:Domain.DTO.Responses.Users.UpdateUserResponseDTO.Password
      language: CSharp
      name:
        CSharp: Password
        VB: Password
      nameWithType:
        CSharp: UpdateUserResponseDTO.Password
        VB: UpdateUserResponseDTO.Password
      qualifiedName:
        CSharp: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Password
        VB: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Password
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Users
      source:
        remote:
          path: Domain/DTO/Responses/Users/UpdateUserResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Password
        path: ../Domain/DTO/Responses/Users/UpdateUserResponseDTO.cs
        startLine: 16
      syntax:
        content:
          CSharp: public string Password { get; set; }
          VB: Public Property Password As String
        parameters: []
        return:
          type: System.String
      overload: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Password*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Id
      commentId: P:Domain.DTO.Responses.Users.UpdateUserResponseDTO.Id
      language: CSharp
      name:
        CSharp: Id
        VB: Id
      nameWithType:
        CSharp: UpdateUserResponseDTO.Id
        VB: UpdateUserResponseDTO.Id
      qualifiedName:
        CSharp: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Id
        VB: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Id
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Users
      source:
        remote:
          path: Domain/DTO/Responses/Users/UpdateUserResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Id
        path: ../Domain/DTO/Responses/Users/UpdateUserResponseDTO.cs
        startLine: 17
      syntax:
        content:
          CSharp: public int Id { get; set; }
          VB: Public Property Id As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Id*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Moderator_Y_N
      commentId: P:Domain.DTO.Responses.Users.UpdateUserResponseDTO.Moderator_Y_N
      language: CSharp
      name:
        CSharp: Moderator_Y_N
        VB: Moderator_Y_N
      nameWithType:
        CSharp: UpdateUserResponseDTO.Moderator_Y_N
        VB: UpdateUserResponseDTO.Moderator_Y_N
      qualifiedName:
        CSharp: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Moderator_Y_N
        VB: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Moderator_Y_N
      type: Property
      assemblies:
      - Domain
      namespace: Domain.DTO.Responses.Users
      source:
        remote:
          path: Domain/DTO/Responses/Users/UpdateUserResponseDTO.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Moderator_Y_N
        path: ../Domain/DTO/Responses/Users/UpdateUserResponseDTO.cs
        startLine: 18
      syntax:
        content:
          CSharp: public bool Moderator_Y_N { get; set; }
          VB: Public Property Moderator_Y_N As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Moderator_Y_N*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
- id: Domain.Entites
  commentId: N:Domain.Entites
  language: CSharp
  name:
    CSharp: Domain.Entites
    VB: Domain.Entites
  nameWithType:
    CSharp: Domain.Entites
    VB: Domain.Entites
  qualifiedName:
    CSharp: Domain.Entites
    VB: Domain.Entites
  type: Namespace
  assemblies:
  - Domain
  modifiers: {}
  items:
  - id: Domain.Entites.Entity
    commentId: T:Domain.Entites.Entity
    language: CSharp
    name:
      CSharp: Entity
      VB: Entity
    nameWithType:
      CSharp: Entity
      VB: Entity
    qualifiedName:
      CSharp: Domain.Entites.Entity
      VB: Domain.Entites.Entity
    type: Class
    assemblies:
    - Domain
    namespace: Domain.Entites
    source:
      remote:
        path: Domain/Entites/Entity.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: Entity
      path: ../Domain/Entites/Entity.cs
      startLine: 8
    syntax:
      content:
        CSharp: public abstract class Entity
        VB: Public MustInherit Class Entity
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: Domain.Entites.Entity.Id
      commentId: P:Domain.Entites.Entity.Id
      language: CSharp
      name:
        CSharp: Id
        VB: Id
      nameWithType:
        CSharp: Entity.Id
        VB: Entity.Id
      qualifiedName:
        CSharp: Domain.Entites.Entity.Id
        VB: Domain.Entites.Entity.Id
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/Entity.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Id
        path: ../Domain/Entites/Entity.cs
        startLine: 10
      syntax:
        content:
          CSharp: public int Id { get; set; }
          VB: Public Property Id As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Domain.Entites.Entity.Id*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.Entity.Equals(System.Object)
      commentId: M:Domain.Entites.Entity.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: Entity.Equals(Object)
        VB: Entity.Equals(Object)
      qualifiedName:
        CSharp: Domain.Entites.Entity.Equals(System.Object)
        VB: Domain.Entites.Entity.Equals(System.Object)
      type: Method
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/Entity.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Equals
        path: ../Domain/Entites/Entity.cs
        startLine: 12
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Domain.Entites.Entity.Equals*
      overridden: System.Object.Equals(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Domain.Entites.Entity.GetHashCode
      commentId: M:Domain.Entites.Entity.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: Entity.GetHashCode()
        VB: Entity.GetHashCode()
      qualifiedName:
        CSharp: Domain.Entites.Entity.GetHashCode()
        VB: Domain.Entites.Entity.GetHashCode()
      type: Method
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/Entity.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: GetHashCode
        path: ../Domain/Entites/Entity.cs
        startLine: 18
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
      overload: Domain.Entites.Entity.GetHashCode*
      overridden: System.Object.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Domain.Entites.Reply
    commentId: T:Domain.Entites.Reply
    language: CSharp
    name:
      CSharp: Reply
      VB: Reply
    nameWithType:
      CSharp: Reply
      VB: Reply
    qualifiedName:
      CSharp: Domain.Entites.Reply
      VB: Domain.Entites.Reply
    type: Class
    assemblies:
    - Domain
    namespace: Domain.Entites
    source:
      remote:
        path: Domain/Entites/Reply.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: Reply
      path: ../Domain/Entites/Reply.cs
      startLine: 8
    syntax:
      content:
        CSharp: 'public class Reply : Entity'
        VB: >-
          Public Class Reply

              Inherits Entity
    inheritance:
    - System.Object
    - Domain.Entites.Entity
    inheritedMembers:
    - Domain.Entites.Entity.Id
    - Domain.Entites.Entity.Equals(System.Object)
    - Domain.Entites.Entity.GetHashCode
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.Entites.Reply.Text
      commentId: P:Domain.Entites.Reply.Text
      language: CSharp
      name:
        CSharp: Text
        VB: Text
      nameWithType:
        CSharp: Reply.Text
        VB: Reply.Text
      qualifiedName:
        CSharp: Domain.Entites.Reply.Text
        VB: Domain.Entites.Reply.Text
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/Reply.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Text
        path: ../Domain/Entites/Reply.cs
        startLine: 11
      syntax:
        content:
          CSharp: public string Text { get; set; }
          VB: Public Property Text As String
        parameters: []
        return:
          type: System.String
      overload: Domain.Entites.Reply.Text*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.Reply.Reply_Date
      commentId: P:Domain.Entites.Reply.Reply_Date
      language: CSharp
      name:
        CSharp: Reply_Date
        VB: Reply_Date
      nameWithType:
        CSharp: Reply.Reply_Date
        VB: Reply.Reply_Date
      qualifiedName:
        CSharp: Domain.Entites.Reply.Reply_Date
        VB: Domain.Entites.Reply.Reply_Date
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/Reply.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Reply_Date
        path: ../Domain/Entites/Reply.cs
        startLine: 12
      syntax:
        content:
          CSharp: public DateTime Reply_Date { get; set; }
          VB: Public Property Reply_Date As Date
        parameters: []
        return:
          type: System.DateTime
      overload: Domain.Entites.Reply.Reply_Date*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.Reply.Deleted
      commentId: P:Domain.Entites.Reply.Deleted
      language: CSharp
      name:
        CSharp: Deleted
        VB: Deleted
      nameWithType:
        CSharp: Reply.Deleted
        VB: Reply.Deleted
      qualifiedName:
        CSharp: Domain.Entites.Reply.Deleted
        VB: Domain.Entites.Reply.Deleted
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/Reply.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Deleted
        path: ../Domain/Entites/Reply.cs
        startLine: 13
      syntax:
        content:
          CSharp: public bool? Deleted { get; set; }
          VB: Public Property Deleted As Boolean?
        parameters: []
        return:
          type: System.Nullable{System.Boolean}
      overload: Domain.Entites.Reply.Deleted*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.Reply.Reply_Update_Date
      commentId: P:Domain.Entites.Reply.Reply_Update_Date
      language: CSharp
      name:
        CSharp: Reply_Update_Date
        VB: Reply_Update_Date
      nameWithType:
        CSharp: Reply.Reply_Update_Date
        VB: Reply.Reply_Update_Date
      qualifiedName:
        CSharp: Domain.Entites.Reply.Reply_Update_Date
        VB: Domain.Entites.Reply.Reply_Update_Date
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/Reply.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Reply_Update_Date
        path: ../Domain/Entites/Reply.cs
        startLine: 14
      syntax:
        content:
          CSharp: public DateTime? Reply_Update_Date { get; set; }
          VB: Public Property Reply_Update_Date As Date?
        parameters: []
        return:
          type: System.Nullable{System.DateTime}
      overload: Domain.Entites.Reply.Reply_Update_Date*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.Reply.Id_Parent_Reply
      commentId: P:Domain.Entites.Reply.Id_Parent_Reply
      language: CSharp
      name:
        CSharp: Id_Parent_Reply
        VB: Id_Parent_Reply
      nameWithType:
        CSharp: Reply.Id_Parent_Reply
        VB: Reply.Id_Parent_Reply
      qualifiedName:
        CSharp: Domain.Entites.Reply.Id_Parent_Reply
        VB: Domain.Entites.Reply.Id_Parent_Reply
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/Reply.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Id_Parent_Reply
        path: ../Domain/Entites/Reply.cs
        startLine: 15
      syntax:
        content:
          CSharp: public int? Id_Parent_Reply { get; set; }
          VB: Public Property Id_Parent_Reply As Integer?
        parameters: []
        return:
          type: System.Nullable{System.Int32}
      overload: Domain.Entites.Reply.Id_Parent_Reply*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.Reply.Id_User
      commentId: P:Domain.Entites.Reply.Id_User
      language: CSharp
      name:
        CSharp: Id_User
        VB: Id_User
      nameWithType:
        CSharp: Reply.Id_User
        VB: Reply.Id_User
      qualifiedName:
        CSharp: Domain.Entites.Reply.Id_User
        VB: Domain.Entites.Reply.Id_User
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/Reply.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Id_User
        path: ../Domain/Entites/Reply.cs
        startLine: 16
      syntax:
        content:
          CSharp: public int Id_User { get; set; }
          VB: Public Property Id_User As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Domain.Entites.Reply.Id_User*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.Reply.Id_Topic
      commentId: P:Domain.Entites.Reply.Id_Topic
      language: CSharp
      name:
        CSharp: Id_Topic
        VB: Id_Topic
      nameWithType:
        CSharp: Reply.Id_Topic
        VB: Reply.Id_Topic
      qualifiedName:
        CSharp: Domain.Entites.Reply.Id_Topic
        VB: Domain.Entites.Reply.Id_Topic
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/Reply.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Id_Topic
        path: ../Domain/Entites/Reply.cs
        startLine: 17
      syntax:
        content:
          CSharp: public int? Id_Topic { get; set; }
          VB: Public Property Id_Topic As Integer?
        parameters: []
        return:
          type: System.Nullable{System.Int32}
      overload: Domain.Entites.Reply.Id_Topic*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: Domain.Entites.Rubric
    commentId: T:Domain.Entites.Rubric
    language: CSharp
    name:
      CSharp: Rubric
      VB: Rubric
    nameWithType:
      CSharp: Rubric
      VB: Rubric
    qualifiedName:
      CSharp: Domain.Entites.Rubric
      VB: Domain.Entites.Rubric
    type: Class
    assemblies:
    - Domain
    namespace: Domain.Entites
    source:
      remote:
        path: Domain/Entites/Rubric.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: Rubric
      path: ../Domain/Entites/Rubric.cs
      startLine: 8
    syntax:
      content:
        CSharp: 'public class Rubric : Entity'
        VB: >-
          Public Class Rubric

              Inherits Entity
    inheritance:
    - System.Object
    - Domain.Entites.Entity
    inheritedMembers:
    - Domain.Entites.Entity.Id
    - Domain.Entites.Entity.Equals(System.Object)
    - Domain.Entites.Entity.GetHashCode
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.Entites.Rubric.Name
      commentId: P:Domain.Entites.Rubric.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: Rubric.Name
        VB: Rubric.Name
      qualifiedName:
        CSharp: Domain.Entites.Rubric.Name
        VB: Domain.Entites.Rubric.Name
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/Rubric.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Name
        path: ../Domain/Entites/Rubric.cs
        startLine: 11
      syntax:
        content:
          CSharp: public string Name { get; set; }
          VB: Public Property Name As String
        parameters: []
        return:
          type: System.String
      overload: Domain.Entites.Rubric.Name*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: Domain.Entites.RubricDetail
    commentId: T:Domain.Entites.RubricDetail
    language: CSharp
    name:
      CSharp: RubricDetail
      VB: RubricDetail
    nameWithType:
      CSharp: RubricDetail
      VB: RubricDetail
    qualifiedName:
      CSharp: Domain.Entites.RubricDetail
      VB: Domain.Entites.RubricDetail
    type: Class
    assemblies:
    - Domain
    namespace: Domain.Entites
    source:
      remote:
        path: Domain/Entites/RubricDetail.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: RubricDetail
      path: ../Domain/Entites/RubricDetail.cs
      startLine: 8
    syntax:
      content:
        CSharp: 'public class RubricDetail : Entity'
        VB: >-
          Public Class RubricDetail

              Inherits Entity
    inheritance:
    - System.Object
    - Domain.Entites.Entity
    inheritedMembers:
    - Domain.Entites.Entity.Id
    - Domain.Entites.Entity.Equals(System.Object)
    - Domain.Entites.Entity.GetHashCode
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.Entites.RubricDetail.Rubric_Name
      commentId: P:Domain.Entites.RubricDetail.Rubric_Name
      language: CSharp
      name:
        CSharp: Rubric_Name
        VB: Rubric_Name
      nameWithType:
        CSharp: RubricDetail.Rubric_Name
        VB: RubricDetail.Rubric_Name
      qualifiedName:
        CSharp: Domain.Entites.RubricDetail.Rubric_Name
        VB: Domain.Entites.RubricDetail.Rubric_Name
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/RubricDetail.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Rubric_Name
        path: ../Domain/Entites/RubricDetail.cs
        startLine: 12
      syntax:
        content:
          CSharp: public string Rubric_Name { get; set; }
          VB: Public Property Rubric_Name As String
        parameters: []
        return:
          type: System.String
      overload: Domain.Entites.RubricDetail.Rubric_Name*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.RubricDetail.Topic_Id
      commentId: P:Domain.Entites.RubricDetail.Topic_Id
      language: CSharp
      name:
        CSharp: Topic_Id
        VB: Topic_Id
      nameWithType:
        CSharp: RubricDetail.Topic_Id
        VB: RubricDetail.Topic_Id
      qualifiedName:
        CSharp: Domain.Entites.RubricDetail.Topic_Id
        VB: Domain.Entites.RubricDetail.Topic_Id
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/RubricDetail.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Topic_Id
        path: ../Domain/Entites/RubricDetail.cs
        startLine: 13
      syntax:
        content:
          CSharp: public int? Topic_Id { get; set; }
          VB: Public Property Topic_Id As Integer?
        parameters: []
        return:
          type: System.Nullable{System.Int32}
      overload: Domain.Entites.RubricDetail.Topic_Id*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.RubricDetail.Topic_Deleted
      commentId: P:Domain.Entites.RubricDetail.Topic_Deleted
      language: CSharp
      name:
        CSharp: Topic_Deleted
        VB: Topic_Deleted
      nameWithType:
        CSharp: RubricDetail.Topic_Deleted
        VB: RubricDetail.Topic_Deleted
      qualifiedName:
        CSharp: Domain.Entites.RubricDetail.Topic_Deleted
        VB: Domain.Entites.RubricDetail.Topic_Deleted
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/RubricDetail.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Topic_Deleted
        path: ../Domain/Entites/RubricDetail.cs
        startLine: 14
      syntax:
        content:
          CSharp: public bool? Topic_Deleted { get; set; }
          VB: Public Property Topic_Deleted As Boolean?
        parameters: []
        return:
          type: System.Nullable{System.Boolean}
      overload: Domain.Entites.RubricDetail.Topic_Deleted*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.RubricDetail.Topic_Tex_Pub
      commentId: P:Domain.Entites.RubricDetail.Topic_Tex_Pub
      language: CSharp
      name:
        CSharp: Topic_Tex_Pub
        VB: Topic_Tex_Pub
      nameWithType:
        CSharp: RubricDetail.Topic_Tex_Pub
        VB: RubricDetail.Topic_Tex_Pub
      qualifiedName:
        CSharp: Domain.Entites.RubricDetail.Topic_Tex_Pub
        VB: Domain.Entites.RubricDetail.Topic_Tex_Pub
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/RubricDetail.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Topic_Tex_Pub
        path: ../Domain/Entites/RubricDetail.cs
        startLine: 15
      syntax:
        content:
          CSharp: public string Topic_Tex_Pub { get; set; }
          VB: Public Property Topic_Tex_Pub As String
        parameters: []
        return:
          type: System.String
      overload: Domain.Entites.RubricDetail.Topic_Tex_Pub*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.RubricDetail.Topic_Pub_Date
      commentId: P:Domain.Entites.RubricDetail.Topic_Pub_Date
      language: CSharp
      name:
        CSharp: Topic_Pub_Date
        VB: Topic_Pub_Date
      nameWithType:
        CSharp: RubricDetail.Topic_Pub_Date
        VB: RubricDetail.Topic_Pub_Date
      qualifiedName:
        CSharp: Domain.Entites.RubricDetail.Topic_Pub_Date
        VB: Domain.Entites.RubricDetail.Topic_Pub_Date
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/RubricDetail.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Topic_Pub_Date
        path: ../Domain/Entites/RubricDetail.cs
        startLine: 16
      syntax:
        content:
          CSharp: public DateTime? Topic_Pub_Date { get; set; }
          VB: Public Property Topic_Pub_Date As Date?
        parameters: []
        return:
          type: System.Nullable{System.DateTime}
      overload: Domain.Entites.RubricDetail.Topic_Pub_Date*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.RubricDetail.Topic_Pub_Update_Date
      commentId: P:Domain.Entites.RubricDetail.Topic_Pub_Update_Date
      language: CSharp
      name:
        CSharp: Topic_Pub_Update_Date
        VB: Topic_Pub_Update_Date
      nameWithType:
        CSharp: RubricDetail.Topic_Pub_Update_Date
        VB: RubricDetail.Topic_Pub_Update_Date
      qualifiedName:
        CSharp: Domain.Entites.RubricDetail.Topic_Pub_Update_Date
        VB: Domain.Entites.RubricDetail.Topic_Pub_Update_Date
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/RubricDetail.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Topic_Pub_Update_Date
        path: ../Domain/Entites/RubricDetail.cs
        startLine: 17
      syntax:
        content:
          CSharp: public DateTime? Topic_Pub_Update_Date { get; set; }
          VB: Public Property Topic_Pub_Update_Date As Date?
        parameters: []
        return:
          type: System.Nullable{System.DateTime}
      overload: Domain.Entites.RubricDetail.Topic_Pub_Update_Date*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.RubricDetail.Topic_Title
      commentId: P:Domain.Entites.RubricDetail.Topic_Title
      language: CSharp
      name:
        CSharp: Topic_Title
        VB: Topic_Title
      nameWithType:
        CSharp: RubricDetail.Topic_Title
        VB: RubricDetail.Topic_Title
      qualifiedName:
        CSharp: Domain.Entites.RubricDetail.Topic_Title
        VB: Domain.Entites.RubricDetail.Topic_Title
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/RubricDetail.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Topic_Title
        path: ../Domain/Entites/RubricDetail.cs
        startLine: 18
      syntax:
        content:
          CSharp: public string Topic_Title { get; set; }
          VB: Public Property Topic_Title As String
        parameters: []
        return:
          type: System.String
      overload: Domain.Entites.RubricDetail.Topic_Title*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.RubricDetail.T_Creator_Id
      commentId: P:Domain.Entites.RubricDetail.T_Creator_Id
      language: CSharp
      name:
        CSharp: T_Creator_Id
        VB: T_Creator_Id
      nameWithType:
        CSharp: RubricDetail.T_Creator_Id
        VB: RubricDetail.T_Creator_Id
      qualifiedName:
        CSharp: Domain.Entites.RubricDetail.T_Creator_Id
        VB: Domain.Entites.RubricDetail.T_Creator_Id
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/RubricDetail.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: T_Creator_Id
        path: ../Domain/Entites/RubricDetail.cs
        startLine: 19
      syntax:
        content:
          CSharp: public int? T_Creator_Id { get; set; }
          VB: Public Property T_Creator_Id As Integer?
        parameters: []
        return:
          type: System.Nullable{System.Int32}
      overload: Domain.Entites.RubricDetail.T_Creator_Id*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.RubricDetail.T_Creator_Nick_Name
      commentId: P:Domain.Entites.RubricDetail.T_Creator_Nick_Name
      language: CSharp
      name:
        CSharp: T_Creator_Nick_Name
        VB: T_Creator_Nick_Name
      nameWithType:
        CSharp: RubricDetail.T_Creator_Nick_Name
        VB: RubricDetail.T_Creator_Nick_Name
      qualifiedName:
        CSharp: Domain.Entites.RubricDetail.T_Creator_Nick_Name
        VB: Domain.Entites.RubricDetail.T_Creator_Nick_Name
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/RubricDetail.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: T_Creator_Nick_Name
        path: ../Domain/Entites/RubricDetail.cs
        startLine: 20
      syntax:
        content:
          CSharp: public string T_Creator_Nick_Name { get; set; }
          VB: Public Property T_Creator_Nick_Name As String
        parameters: []
        return:
          type: System.String
      overload: Domain.Entites.RubricDetail.T_Creator_Nick_Name*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: Domain.Entites.Topic
    commentId: T:Domain.Entites.Topic
    language: CSharp
    name:
      CSharp: Topic
      VB: Topic
    nameWithType:
      CSharp: Topic
      VB: Topic
    qualifiedName:
      CSharp: Domain.Entites.Topic
      VB: Domain.Entites.Topic
    type: Class
    assemblies:
    - Domain
    namespace: Domain.Entites
    source:
      remote:
        path: Domain/Entites/Topic.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: Topic
      path: ../Domain/Entites/Topic.cs
      startLine: 8
    syntax:
      content:
        CSharp: 'public class Topic : Entity'
        VB: >-
          Public Class Topic

              Inherits Entity
    inheritance:
    - System.Object
    - Domain.Entites.Entity
    inheritedMembers:
    - Domain.Entites.Entity.Id
    - Domain.Entites.Entity.Equals(System.Object)
    - Domain.Entites.Entity.GetHashCode
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.Entites.Topic.Title
      commentId: P:Domain.Entites.Topic.Title
      language: CSharp
      name:
        CSharp: Title
        VB: Title
      nameWithType:
        CSharp: Topic.Title
        VB: Topic.Title
      qualifiedName:
        CSharp: Domain.Entites.Topic.Title
        VB: Domain.Entites.Topic.Title
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/Topic.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Title
        path: ../Domain/Entites/Topic.cs
        startLine: 11
      syntax:
        content:
          CSharp: public string Title { get; set; }
          VB: Public Property Title As String
        parameters: []
        return:
          type: System.String
      overload: Domain.Entites.Topic.Title*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.Topic.Text_Pub
      commentId: P:Domain.Entites.Topic.Text_Pub
      language: CSharp
      name:
        CSharp: Text_Pub
        VB: Text_Pub
      nameWithType:
        CSharp: Topic.Text_Pub
        VB: Topic.Text_Pub
      qualifiedName:
        CSharp: Domain.Entites.Topic.Text_Pub
        VB: Domain.Entites.Topic.Text_Pub
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/Topic.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Text_Pub
        path: ../Domain/Entites/Topic.cs
        startLine: 12
      syntax:
        content:
          CSharp: public string Text_Pub { get; set; }
          VB: Public Property Text_Pub As String
        parameters: []
        return:
          type: System.String
      overload: Domain.Entites.Topic.Text_Pub*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.Topic.Pub_Date
      commentId: P:Domain.Entites.Topic.Pub_Date
      language: CSharp
      name:
        CSharp: Pub_Date
        VB: Pub_Date
      nameWithType:
        CSharp: Topic.Pub_Date
        VB: Topic.Pub_Date
      qualifiedName:
        CSharp: Domain.Entites.Topic.Pub_Date
        VB: Domain.Entites.Topic.Pub_Date
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/Topic.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Pub_Date
        path: ../Domain/Entites/Topic.cs
        startLine: 13
      syntax:
        content:
          CSharp: public DateTime Pub_Date { get; set; }
          VB: Public Property Pub_Date As Date
        parameters: []
        return:
          type: System.DateTime
      overload: Domain.Entites.Topic.Pub_Date*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.Topic.Deleted
      commentId: P:Domain.Entites.Topic.Deleted
      language: CSharp
      name:
        CSharp: Deleted
        VB: Deleted
      nameWithType:
        CSharp: Topic.Deleted
        VB: Topic.Deleted
      qualifiedName:
        CSharp: Domain.Entites.Topic.Deleted
        VB: Domain.Entites.Topic.Deleted
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/Topic.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Deleted
        path: ../Domain/Entites/Topic.cs
        startLine: 14
      syntax:
        content:
          CSharp: public byte Deleted { get; set; }
          VB: Public Property Deleted As Byte
        parameters: []
        return:
          type: System.Byte
      overload: Domain.Entites.Topic.Deleted*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.Topic.Pub_Update_Date
      commentId: P:Domain.Entites.Topic.Pub_Update_Date
      language: CSharp
      name:
        CSharp: Pub_Update_Date
        VB: Pub_Update_Date
      nameWithType:
        CSharp: Topic.Pub_Update_Date
        VB: Topic.Pub_Update_Date
      qualifiedName:
        CSharp: Domain.Entites.Topic.Pub_Update_Date
        VB: Domain.Entites.Topic.Pub_Update_Date
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/Topic.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Pub_Update_Date
        path: ../Domain/Entites/Topic.cs
        startLine: 15
      syntax:
        content:
          CSharp: public DateTime? Pub_Update_Date { get; set; }
          VB: Public Property Pub_Update_Date As Date?
        parameters: []
        return:
          type: System.Nullable{System.DateTime}
      overload: Domain.Entites.Topic.Pub_Update_Date*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.Topic.Id_User
      commentId: P:Domain.Entites.Topic.Id_User
      language: CSharp
      name:
        CSharp: Id_User
        VB: Id_User
      nameWithType:
        CSharp: Topic.Id_User
        VB: Topic.Id_User
      qualifiedName:
        CSharp: Domain.Entites.Topic.Id_User
        VB: Domain.Entites.Topic.Id_User
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/Topic.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Id_User
        path: ../Domain/Entites/Topic.cs
        startLine: 16
      syntax:
        content:
          CSharp: public int Id_User { get; set; }
          VB: Public Property Id_User As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Domain.Entites.Topic.Id_User*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.Topic.Id_Rubric
      commentId: P:Domain.Entites.Topic.Id_Rubric
      language: CSharp
      name:
        CSharp: Id_Rubric
        VB: Id_Rubric
      nameWithType:
        CSharp: Topic.Id_Rubric
        VB: Topic.Id_Rubric
      qualifiedName:
        CSharp: Domain.Entites.Topic.Id_Rubric
        VB: Domain.Entites.Topic.Id_Rubric
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/Topic.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Id_Rubric
        path: ../Domain/Entites/Topic.cs
        startLine: 17
      syntax:
        content:
          CSharp: public int Id_Rubric { get; set; }
          VB: Public Property Id_Rubric As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Domain.Entites.Topic.Id_Rubric*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.Topic.Count_Views
      commentId: P:Domain.Entites.Topic.Count_Views
      language: CSharp
      name:
        CSharp: Count_Views
        VB: Count_Views
      nameWithType:
        CSharp: Topic.Count_Views
        VB: Topic.Count_Views
      qualifiedName:
        CSharp: Domain.Entites.Topic.Count_Views
        VB: Domain.Entites.Topic.Count_Views
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/Topic.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Count_Views
        path: ../Domain/Entites/Topic.cs
        startLine: 19
      syntax:
        content:
          CSharp: public int Count_Views { get; set; }
          VB: Public Property Count_Views As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Domain.Entites.Topic.Count_Views*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: Domain.Entites.TopicDetail
    commentId: T:Domain.Entites.TopicDetail
    language: CSharp
    name:
      CSharp: TopicDetail
      VB: TopicDetail
    nameWithType:
      CSharp: TopicDetail
      VB: TopicDetail
    qualifiedName:
      CSharp: Domain.Entites.TopicDetail
      VB: Domain.Entites.TopicDetail
    type: Class
    assemblies:
    - Domain
    namespace: Domain.Entites
    source:
      remote:
        path: Domain/Entites/TopicDetail.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: TopicDetail
      path: ../Domain/Entites/TopicDetail.cs
      startLine: 8
    syntax:
      content:
        CSharp: 'public class TopicDetail : Entity'
        VB: >-
          Public Class TopicDetail

              Inherits Entity
    inheritance:
    - System.Object
    - Domain.Entites.Entity
    inheritedMembers:
    - Domain.Entites.Entity.Id
    - Domain.Entites.Entity.Equals(System.Object)
    - Domain.Entites.Entity.GetHashCode
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.Entites.TopicDetail.Topic_Deleted
      commentId: P:Domain.Entites.TopicDetail.Topic_Deleted
      language: CSharp
      name:
        CSharp: Topic_Deleted
        VB: Topic_Deleted
      nameWithType:
        CSharp: TopicDetail.Topic_Deleted
        VB: TopicDetail.Topic_Deleted
      qualifiedName:
        CSharp: Domain.Entites.TopicDetail.Topic_Deleted
        VB: Domain.Entites.TopicDetail.Topic_Deleted
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/TopicDetail.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Topic_Deleted
        path: ../Domain/Entites/TopicDetail.cs
        startLine: 13
      syntax:
        content:
          CSharp: public bool Topic_Deleted { get; set; }
          VB: Public Property Topic_Deleted As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Domain.Entites.TopicDetail.Topic_Deleted*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.TopicDetail.Count_Views
      commentId: P:Domain.Entites.TopicDetail.Count_Views
      language: CSharp
      name:
        CSharp: Count_Views
        VB: Count_Views
      nameWithType:
        CSharp: TopicDetail.Count_Views
        VB: TopicDetail.Count_Views
      qualifiedName:
        CSharp: Domain.Entites.TopicDetail.Count_Views
        VB: Domain.Entites.TopicDetail.Count_Views
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/TopicDetail.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Count_Views
        path: ../Domain/Entites/TopicDetail.cs
        startLine: 14
      syntax:
        content:
          CSharp: public int Count_Views { get; set; }
          VB: Public Property Count_Views As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Domain.Entites.TopicDetail.Count_Views*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.TopicDetail.Child_Reply_Id
      commentId: P:Domain.Entites.TopicDetail.Child_Reply_Id
      language: CSharp
      name:
        CSharp: Child_Reply_Id
        VB: Child_Reply_Id
      nameWithType:
        CSharp: TopicDetail.Child_Reply_Id
        VB: TopicDetail.Child_Reply_Id
      qualifiedName:
        CSharp: Domain.Entites.TopicDetail.Child_Reply_Id
        VB: Domain.Entites.TopicDetail.Child_Reply_Id
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/TopicDetail.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Child_Reply_Id
        path: ../Domain/Entites/TopicDetail.cs
        startLine: 15
      syntax:
        content:
          CSharp: public int Child_Reply_Id { get; set; }
          VB: Public Property Child_Reply_Id As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Domain.Entites.TopicDetail.Child_Reply_Id*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.TopicDetail.Child_Reply_Deleted
      commentId: P:Domain.Entites.TopicDetail.Child_Reply_Deleted
      language: CSharp
      name:
        CSharp: Child_Reply_Deleted
        VB: Child_Reply_Deleted
      nameWithType:
        CSharp: TopicDetail.Child_Reply_Deleted
        VB: TopicDetail.Child_Reply_Deleted
      qualifiedName:
        CSharp: Domain.Entites.TopicDetail.Child_Reply_Deleted
        VB: Domain.Entites.TopicDetail.Child_Reply_Deleted
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/TopicDetail.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Child_Reply_Deleted
        path: ../Domain/Entites/TopicDetail.cs
        startLine: 16
      syntax:
        content:
          CSharp: public bool Child_Reply_Deleted { get; set; }
          VB: Public Property Child_Reply_Deleted As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Domain.Entites.TopicDetail.Child_Reply_Deleted*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.TopicDetail.Child_Reply_Text
      commentId: P:Domain.Entites.TopicDetail.Child_Reply_Text
      language: CSharp
      name:
        CSharp: Child_Reply_Text
        VB: Child_Reply_Text
      nameWithType:
        CSharp: TopicDetail.Child_Reply_Text
        VB: TopicDetail.Child_Reply_Text
      qualifiedName:
        CSharp: Domain.Entites.TopicDetail.Child_Reply_Text
        VB: Domain.Entites.TopicDetail.Child_Reply_Text
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/TopicDetail.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Child_Reply_Text
        path: ../Domain/Entites/TopicDetail.cs
        startLine: 17
      syntax:
        content:
          CSharp: public string Child_Reply_Text { get; set; }
          VB: Public Property Child_Reply_Text As String
        parameters: []
        return:
          type: System.String
      overload: Domain.Entites.TopicDetail.Child_Reply_Text*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.TopicDetail.Child_Reply_Date
      commentId: P:Domain.Entites.TopicDetail.Child_Reply_Date
      language: CSharp
      name:
        CSharp: Child_Reply_Date
        VB: Child_Reply_Date
      nameWithType:
        CSharp: TopicDetail.Child_Reply_Date
        VB: TopicDetail.Child_Reply_Date
      qualifiedName:
        CSharp: Domain.Entites.TopicDetail.Child_Reply_Date
        VB: Domain.Entites.TopicDetail.Child_Reply_Date
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/TopicDetail.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Child_Reply_Date
        path: ../Domain/Entites/TopicDetail.cs
        startLine: 18
      syntax:
        content:
          CSharp: public DateTime Child_Reply_Date { get; set; }
          VB: Public Property Child_Reply_Date As Date
        parameters: []
        return:
          type: System.DateTime
      overload: Domain.Entites.TopicDetail.Child_Reply_Date*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.TopicDetail.Child_Reply_Update_Date
      commentId: P:Domain.Entites.TopicDetail.Child_Reply_Update_Date
      language: CSharp
      name:
        CSharp: Child_Reply_Update_Date
        VB: Child_Reply_Update_Date
      nameWithType:
        CSharp: TopicDetail.Child_Reply_Update_Date
        VB: TopicDetail.Child_Reply_Update_Date
      qualifiedName:
        CSharp: Domain.Entites.TopicDetail.Child_Reply_Update_Date
        VB: Domain.Entites.TopicDetail.Child_Reply_Update_Date
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/TopicDetail.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Child_Reply_Update_Date
        path: ../Domain/Entites/TopicDetail.cs
        startLine: 19
      syntax:
        content:
          CSharp: public DateTime? Child_Reply_Update_Date { get; set; }
          VB: Public Property Child_Reply_Update_Date As Date?
        parameters: []
        return:
          type: System.Nullable{System.DateTime}
      overload: Domain.Entites.TopicDetail.Child_Reply_Update_Date*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.TopicDetail.Creator_Id_CR
      commentId: P:Domain.Entites.TopicDetail.Creator_Id_CR
      language: CSharp
      name:
        CSharp: Creator_Id_CR
        VB: Creator_Id_CR
      nameWithType:
        CSharp: TopicDetail.Creator_Id_CR
        VB: TopicDetail.Creator_Id_CR
      qualifiedName:
        CSharp: Domain.Entites.TopicDetail.Creator_Id_CR
        VB: Domain.Entites.TopicDetail.Creator_Id_CR
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/TopicDetail.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Creator_Id_CR
        path: ../Domain/Entites/TopicDetail.cs
        startLine: 20
      syntax:
        content:
          CSharp: public int Creator_Id_CR { get; set; }
          VB: Public Property Creator_Id_CR As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Domain.Entites.TopicDetail.Creator_Id_CR*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.TopicDetail.Creator_Nick_Name_CR
      commentId: P:Domain.Entites.TopicDetail.Creator_Nick_Name_CR
      language: CSharp
      name:
        CSharp: Creator_Nick_Name_CR
        VB: Creator_Nick_Name_CR
      nameWithType:
        CSharp: TopicDetail.Creator_Nick_Name_CR
        VB: TopicDetail.Creator_Nick_Name_CR
      qualifiedName:
        CSharp: Domain.Entites.TopicDetail.Creator_Nick_Name_CR
        VB: Domain.Entites.TopicDetail.Creator_Nick_Name_CR
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/TopicDetail.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Creator_Nick_Name_CR
        path: ../Domain/Entites/TopicDetail.cs
        startLine: 21
      syntax:
        content:
          CSharp: public string Creator_Nick_Name_CR { get; set; }
          VB: Public Property Creator_Nick_Name_CR As String
        parameters: []
        return:
          type: System.String
      overload: Domain.Entites.TopicDetail.Creator_Nick_Name_CR*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.TopicDetail.Parent_Reply_Id
      commentId: P:Domain.Entites.TopicDetail.Parent_Reply_Id
      language: CSharp
      name:
        CSharp: Parent_Reply_Id
        VB: Parent_Reply_Id
      nameWithType:
        CSharp: TopicDetail.Parent_Reply_Id
        VB: TopicDetail.Parent_Reply_Id
      qualifiedName:
        CSharp: Domain.Entites.TopicDetail.Parent_Reply_Id
        VB: Domain.Entites.TopicDetail.Parent_Reply_Id
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/TopicDetail.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Parent_Reply_Id
        path: ../Domain/Entites/TopicDetail.cs
        startLine: 22
      syntax:
        content:
          CSharp: public int? Parent_Reply_Id { get; set; }
          VB: Public Property Parent_Reply_Id As Integer?
        parameters: []
        return:
          type: System.Nullable{System.Int32}
      overload: Domain.Entites.TopicDetail.Parent_Reply_Id*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.TopicDetail.Parent_Reply_Deleted
      commentId: P:Domain.Entites.TopicDetail.Parent_Reply_Deleted
      language: CSharp
      name:
        CSharp: Parent_Reply_Deleted
        VB: Parent_Reply_Deleted
      nameWithType:
        CSharp: TopicDetail.Parent_Reply_Deleted
        VB: TopicDetail.Parent_Reply_Deleted
      qualifiedName:
        CSharp: Domain.Entites.TopicDetail.Parent_Reply_Deleted
        VB: Domain.Entites.TopicDetail.Parent_Reply_Deleted
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/TopicDetail.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Parent_Reply_Deleted
        path: ../Domain/Entites/TopicDetail.cs
        startLine: 23
      syntax:
        content:
          CSharp: public bool? Parent_Reply_Deleted { get; set; }
          VB: Public Property Parent_Reply_Deleted As Boolean?
        parameters: []
        return:
          type: System.Nullable{System.Boolean}
      overload: Domain.Entites.TopicDetail.Parent_Reply_Deleted*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.TopicDetail.Parent_Reply_Text
      commentId: P:Domain.Entites.TopicDetail.Parent_Reply_Text
      language: CSharp
      name:
        CSharp: Parent_Reply_Text
        VB: Parent_Reply_Text
      nameWithType:
        CSharp: TopicDetail.Parent_Reply_Text
        VB: TopicDetail.Parent_Reply_Text
      qualifiedName:
        CSharp: Domain.Entites.TopicDetail.Parent_Reply_Text
        VB: Domain.Entites.TopicDetail.Parent_Reply_Text
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/TopicDetail.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Parent_Reply_Text
        path: ../Domain/Entites/TopicDetail.cs
        startLine: 24
      syntax:
        content:
          CSharp: public string Parent_Reply_Text { get; set; }
          VB: Public Property Parent_Reply_Text As String
        parameters: []
        return:
          type: System.String
      overload: Domain.Entites.TopicDetail.Parent_Reply_Text*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.TopicDetail.Parent_Reply_Date
      commentId: P:Domain.Entites.TopicDetail.Parent_Reply_Date
      language: CSharp
      name:
        CSharp: Parent_Reply_Date
        VB: Parent_Reply_Date
      nameWithType:
        CSharp: TopicDetail.Parent_Reply_Date
        VB: TopicDetail.Parent_Reply_Date
      qualifiedName:
        CSharp: Domain.Entites.TopicDetail.Parent_Reply_Date
        VB: Domain.Entites.TopicDetail.Parent_Reply_Date
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/TopicDetail.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Parent_Reply_Date
        path: ../Domain/Entites/TopicDetail.cs
        startLine: 25
      syntax:
        content:
          CSharp: public DateTime? Parent_Reply_Date { get; set; }
          VB: Public Property Parent_Reply_Date As Date?
        parameters: []
        return:
          type: System.Nullable{System.DateTime}
      overload: Domain.Entites.TopicDetail.Parent_Reply_Date*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.TopicDetail.Parent_Reply_Update_Date
      commentId: P:Domain.Entites.TopicDetail.Parent_Reply_Update_Date
      language: CSharp
      name:
        CSharp: Parent_Reply_Update_Date
        VB: Parent_Reply_Update_Date
      nameWithType:
        CSharp: TopicDetail.Parent_Reply_Update_Date
        VB: TopicDetail.Parent_Reply_Update_Date
      qualifiedName:
        CSharp: Domain.Entites.TopicDetail.Parent_Reply_Update_Date
        VB: Domain.Entites.TopicDetail.Parent_Reply_Update_Date
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/TopicDetail.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Parent_Reply_Update_Date
        path: ../Domain/Entites/TopicDetail.cs
        startLine: 26
      syntax:
        content:
          CSharp: public DateTime? Parent_Reply_Update_Date { get; set; }
          VB: Public Property Parent_Reply_Update_Date As Date?
        parameters: []
        return:
          type: System.Nullable{System.DateTime}
      overload: Domain.Entites.TopicDetail.Parent_Reply_Update_Date*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.TopicDetail.Creator_Id_PR
      commentId: P:Domain.Entites.TopicDetail.Creator_Id_PR
      language: CSharp
      name:
        CSharp: Creator_Id_PR
        VB: Creator_Id_PR
      nameWithType:
        CSharp: TopicDetail.Creator_Id_PR
        VB: TopicDetail.Creator_Id_PR
      qualifiedName:
        CSharp: Domain.Entites.TopicDetail.Creator_Id_PR
        VB: Domain.Entites.TopicDetail.Creator_Id_PR
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/TopicDetail.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Creator_Id_PR
        path: ../Domain/Entites/TopicDetail.cs
        startLine: 27
      syntax:
        content:
          CSharp: public int? Creator_Id_PR { get; set; }
          VB: Public Property Creator_Id_PR As Integer?
        parameters: []
        return:
          type: System.Nullable{System.Int32}
      overload: Domain.Entites.TopicDetail.Creator_Id_PR*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites.TopicDetail.Creator_Nick_Name_PR
      commentId: P:Domain.Entites.TopicDetail.Creator_Nick_Name_PR
      language: CSharp
      name:
        CSharp: Creator_Nick_Name_PR
        VB: Creator_Nick_Name_PR
      nameWithType:
        CSharp: TopicDetail.Creator_Nick_Name_PR
        VB: TopicDetail.Creator_Nick_Name_PR
      qualifiedName:
        CSharp: Domain.Entites.TopicDetail.Creator_Nick_Name_PR
        VB: Domain.Entites.TopicDetail.Creator_Nick_Name_PR
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/TopicDetail.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Creator_Nick_Name_PR
        path: ../Domain/Entites/TopicDetail.cs
        startLine: 28
      syntax:
        content:
          CSharp: public string Creator_Nick_Name_PR { get; set; }
          VB: Public Property Creator_Nick_Name_PR As String
        parameters: []
        return:
          type: System.String
      overload: Domain.Entites.TopicDetail.Creator_Nick_Name_PR*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: Domain.Entites._User
    commentId: T:Domain.Entites._User
    language: CSharp
    name:
      CSharp: _User
      VB: _User
    nameWithType:
      CSharp: _User
      VB: _User
    qualifiedName:
      CSharp: Domain.Entites._User
      VB: Domain.Entites._User
    type: Class
    assemblies:
    - Domain
    namespace: Domain.Entites
    source:
      remote:
        path: Domain/Entites/_User.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: _User
      path: ../Domain/Entites/_User.cs
      startLine: 8
    syntax:
      content:
        CSharp: 'public class _User : Entity'
        VB: >-
          Public Class _User

              Inherits Entity
    inheritance:
    - System.Object
    - Domain.Entites.Entity
    inheritedMembers:
    - Domain.Entites.Entity.Id
    - Domain.Entites.Entity.Equals(System.Object)
    - Domain.Entites.Entity.GetHashCode
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.Entites._User.Name
      commentId: P:Domain.Entites._User.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: _User.Name
        VB: _User.Name
      qualifiedName:
        CSharp: Domain.Entites._User.Name
        VB: Domain.Entites._User.Name
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/_User.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Name
        path: ../Domain/Entites/_User.cs
        startLine: 11
      syntax:
        content:
          CSharp: public string Name { get; set; }
          VB: Public Property Name As String
        parameters: []
        return:
          type: System.String
      overload: Domain.Entites._User.Name*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites._User.First_Name
      commentId: P:Domain.Entites._User.First_Name
      language: CSharp
      name:
        CSharp: First_Name
        VB: First_Name
      nameWithType:
        CSharp: _User.First_Name
        VB: _User.First_Name
      qualifiedName:
        CSharp: Domain.Entites._User.First_Name
        VB: Domain.Entites._User.First_Name
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/_User.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: First_Name
        path: ../Domain/Entites/_User.cs
        startLine: 12
      syntax:
        content:
          CSharp: public string First_Name { get; set; }
          VB: Public Property First_Name As String
        parameters: []
        return:
          type: System.String
      overload: Domain.Entites._User.First_Name*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites._User.Nick_Name
      commentId: P:Domain.Entites._User.Nick_Name
      language: CSharp
      name:
        CSharp: Nick_Name
        VB: Nick_Name
      nameWithType:
        CSharp: _User.Nick_Name
        VB: _User.Nick_Name
      qualifiedName:
        CSharp: Domain.Entites._User.Nick_Name
        VB: Domain.Entites._User.Nick_Name
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/_User.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Nick_Name
        path: ../Domain/Entites/_User.cs
        startLine: 13
      syntax:
        content:
          CSharp: public string Nick_Name { get; set; }
          VB: Public Property Nick_Name As String
        parameters: []
        return:
          type: System.String
      overload: Domain.Entites._User.Nick_Name*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites._User.Ph_No
      commentId: P:Domain.Entites._User.Ph_No
      language: CSharp
      name:
        CSharp: Ph_No
        VB: Ph_No
      nameWithType:
        CSharp: _User.Ph_No
        VB: _User.Ph_No
      qualifiedName:
        CSharp: Domain.Entites._User.Ph_No
        VB: Domain.Entites._User.Ph_No
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/_User.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Ph_No
        path: ../Domain/Entites/_User.cs
        startLine: 14
      syntax:
        content:
          CSharp: public string Ph_No { get; set; }
          VB: Public Property Ph_No As String
        parameters: []
        return:
          type: System.String
      overload: Domain.Entites._User.Ph_No*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites._User.Photo
      commentId: P:Domain.Entites._User.Photo
      language: CSharp
      name:
        CSharp: Photo
        VB: Photo
      nameWithType:
        CSharp: _User.Photo
        VB: _User.Photo
      qualifiedName:
        CSharp: Domain.Entites._User.Photo
        VB: Domain.Entites._User.Photo
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/_User.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Photo
        path: ../Domain/Entites/_User.cs
        startLine: 15
      syntax:
        content:
          CSharp: public byte[] Photo { get; set; }
          VB: Public Property Photo As Byte()
        parameters: []
        return:
          type: System.Byte[]
      overload: Domain.Entites._User.Photo*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites._User.E_Mail
      commentId: P:Domain.Entites._User.E_Mail
      language: CSharp
      name:
        CSharp: E_Mail
        VB: E_Mail
      nameWithType:
        CSharp: _User.E_Mail
        VB: _User.E_Mail
      qualifiedName:
        CSharp: Domain.Entites._User.E_Mail
        VB: Domain.Entites._User.E_Mail
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/_User.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: E_Mail
        path: ../Domain/Entites/_User.cs
        startLine: 16
      syntax:
        content:
          CSharp: public string E_Mail { get; set; }
          VB: Public Property E_Mail As String
        parameters: []
        return:
          type: System.String
      overload: Domain.Entites._User.E_Mail*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites._User.Moderator_Y_N
      commentId: P:Domain.Entites._User.Moderator_Y_N
      language: CSharp
      name:
        CSharp: Moderator_Y_N
        VB: Moderator_Y_N
      nameWithType:
        CSharp: _User.Moderator_Y_N
        VB: _User.Moderator_Y_N
      qualifiedName:
        CSharp: Domain.Entites._User.Moderator_Y_N
        VB: Domain.Entites._User.Moderator_Y_N
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/_User.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Moderator_Y_N
        path: ../Domain/Entites/_User.cs
        startLine: 17
      syntax:
        content:
          CSharp: public bool Moderator_Y_N { get; set; }
          VB: Public Property Moderator_Y_N As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Domain.Entites._User.Moderator_Y_N*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites._User.Password
      commentId: P:Domain.Entites._User.Password
      language: CSharp
      name:
        CSharp: Password
        VB: Password
      nameWithType:
        CSharp: _User.Password
        VB: _User.Password
      qualifiedName:
        CSharp: Domain.Entites._User.Password
        VB: Domain.Entites._User.Password
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/_User.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Password
        path: ../Domain/Entites/_User.cs
        startLine: 18
      syntax:
        content:
          CSharp: public string Password { get; set; }
          VB: Public Property Password As String
        parameters: []
        return:
          type: System.String
      overload: Domain.Entites._User.Password*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites._User.Count_Replies
      commentId: P:Domain.Entites._User.Count_Replies
      language: CSharp
      name:
        CSharp: Count_Replies
        VB: Count_Replies
      nameWithType:
        CSharp: _User.Count_Replies
        VB: _User.Count_Replies
      qualifiedName:
        CSharp: Domain.Entites._User.Count_Replies
        VB: Domain.Entites._User.Count_Replies
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/_User.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Count_Replies
        path: ../Domain/Entites/_User.cs
        startLine: 19
      syntax:
        content:
          CSharp: public int Count_Replies { get; set; }
          VB: Public Property Count_Replies As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Domain.Entites._User.Count_Replies*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Domain.Entites._User.Count_Topics
      commentId: P:Domain.Entites._User.Count_Topics
      language: CSharp
      name:
        CSharp: Count_Topics
        VB: Count_Topics
      nameWithType:
        CSharp: _User.Count_Topics
        VB: _User.Count_Topics
      qualifiedName:
        CSharp: Domain.Entites._User.Count_Topics
        VB: Domain.Entites._User.Count_Topics
      type: Property
      assemblies:
      - Domain
      namespace: Domain.Entites
      source:
        remote:
          path: Domain/Entites/_User.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Count_Topics
        path: ../Domain/Entites/_User.cs
        startLine: 20
      syntax:
        content:
          CSharp: public int Count_Topics { get; set; }
          VB: Public Property Count_Topics As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Domain.Entites._User.Count_Topics*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
- id: Domain.Exceptions
  commentId: N:Domain.Exceptions
  language: CSharp
  name:
    CSharp: Domain.Exceptions
    VB: Domain.Exceptions
  nameWithType:
    CSharp: Domain.Exceptions
    VB: Domain.Exceptions
  qualifiedName:
    CSharp: Domain.Exceptions
    VB: Domain.Exceptions
  type: Namespace
  assemblies:
  - Domain
  modifiers: {}
  items:
  - id: Domain.Exceptions.AuthentificationFailException
    commentId: T:Domain.Exceptions.AuthentificationFailException
    language: CSharp
    name:
      CSharp: AuthentificationFailException
      VB: AuthentificationFailException
    nameWithType:
      CSharp: AuthentificationFailException
      VB: AuthentificationFailException
    qualifiedName:
      CSharp: Domain.Exceptions.AuthentificationFailException
      VB: Domain.Exceptions.AuthentificationFailException
    type: Class
    assemblies:
    - Domain
    namespace: Domain.Exceptions
    source:
      remote:
        path: Domain/Exceptions/AuthentificationFailException.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: AuthentificationFailException
      path: ../Domain/Exceptions/AuthentificationFailException.cs
      startLine: 8
    syntax:
      content:
        CSharp: 'public class AuthentificationFailException : Exception, ISerializable'
        VB: >-
          Public Class AuthentificationFailException

              Inherits Exception

              Implements ISerializable
    inheritance:
    - System.Object
    - System.Exception
    implements:
    - System.Runtime.Serialization.ISerializable
    inheritedMembers:
    - System.Exception.GetBaseException
    - System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    - System.Exception.GetType
    - System.Exception.ToString
    - System.Exception.Data
    - System.Exception.HelpLink
    - System.Exception.HResult
    - System.Exception.InnerException
    - System.Exception.Message
    - System.Exception.Source
    - System.Exception.StackTrace
    - System.Exception.TargetSite
    - System.Exception.SerializeObjectState
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.Exceptions.AuthentificationFailException.#ctor
      commentId: M:Domain.Exceptions.AuthentificationFailException.#ctor
      language: CSharp
      name:
        CSharp: AuthentificationFailException()
        VB: AuthentificationFailException()
      nameWithType:
        CSharp: AuthentificationFailException.AuthentificationFailException()
        VB: AuthentificationFailException.AuthentificationFailException()
      qualifiedName:
        CSharp: Domain.Exceptions.AuthentificationFailException.AuthentificationFailException()
        VB: Domain.Exceptions.AuthentificationFailException.AuthentificationFailException()
      type: Constructor
      assemblies:
      - Domain
      namespace: Domain.Exceptions
      source:
        remote:
          path: Domain/Exceptions/AuthentificationFailException.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: .ctor
        path: ../Domain/Exceptions/AuthentificationFailException.cs
        startLine: 10
      syntax:
        content:
          CSharp: public AuthentificationFailException()
          VB: Public Sub New
      overload: Domain.Exceptions.AuthentificationFailException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Domain.Exceptions.ForbiddenAccessException
    commentId: T:Domain.Exceptions.ForbiddenAccessException
    language: CSharp
    name:
      CSharp: ForbiddenAccessException
      VB: ForbiddenAccessException
    nameWithType:
      CSharp: ForbiddenAccessException
      VB: ForbiddenAccessException
    qualifiedName:
      CSharp: Domain.Exceptions.ForbiddenAccessException
      VB: Domain.Exceptions.ForbiddenAccessException
    type: Class
    assemblies:
    - Domain
    namespace: Domain.Exceptions
    source:
      remote:
        path: Domain/Exceptions/ForbiddenAccessException.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: ForbiddenAccessException
      path: ../Domain/Exceptions/ForbiddenAccessException.cs
      startLine: 8
    syntax:
      content:
        CSharp: 'public class ForbiddenAccessException : Exception, ISerializable'
        VB: >-
          Public Class ForbiddenAccessException

              Inherits Exception

              Implements ISerializable
    inheritance:
    - System.Object
    - System.Exception
    implements:
    - System.Runtime.Serialization.ISerializable
    inheritedMembers:
    - System.Exception.GetBaseException
    - System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    - System.Exception.GetType
    - System.Exception.ToString
    - System.Exception.Data
    - System.Exception.HelpLink
    - System.Exception.HResult
    - System.Exception.InnerException
    - System.Exception.Message
    - System.Exception.Source
    - System.Exception.StackTrace
    - System.Exception.TargetSite
    - System.Exception.SerializeObjectState
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.Exceptions.ForbiddenAccessException.#ctor
      commentId: M:Domain.Exceptions.ForbiddenAccessException.#ctor
      language: CSharp
      name:
        CSharp: ForbiddenAccessException()
        VB: ForbiddenAccessException()
      nameWithType:
        CSharp: ForbiddenAccessException.ForbiddenAccessException()
        VB: ForbiddenAccessException.ForbiddenAccessException()
      qualifiedName:
        CSharp: Domain.Exceptions.ForbiddenAccessException.ForbiddenAccessException()
        VB: Domain.Exceptions.ForbiddenAccessException.ForbiddenAccessException()
      type: Constructor
      assemblies:
      - Domain
      namespace: Domain.Exceptions
      source:
        remote:
          path: Domain/Exceptions/ForbiddenAccessException.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: .ctor
        path: ../Domain/Exceptions/ForbiddenAccessException.cs
        startLine: 10
      syntax:
        content:
          CSharp: public ForbiddenAccessException()
          VB: Public Sub New
      overload: Domain.Exceptions.ForbiddenAccessException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Domain.Exceptions.ForbiddenAccessException.#ctor(System.String)
      commentId: M:Domain.Exceptions.ForbiddenAccessException.#ctor(System.String)
      language: CSharp
      name:
        CSharp: ForbiddenAccessException(String)
        VB: ForbiddenAccessException(String)
      nameWithType:
        CSharp: ForbiddenAccessException.ForbiddenAccessException(String)
        VB: ForbiddenAccessException.ForbiddenAccessException(String)
      qualifiedName:
        CSharp: Domain.Exceptions.ForbiddenAccessException.ForbiddenAccessException(System.String)
        VB: Domain.Exceptions.ForbiddenAccessException.ForbiddenAccessException(System.String)
      type: Constructor
      assemblies:
      - Domain
      namespace: Domain.Exceptions
      source:
        remote:
          path: Domain/Exceptions/ForbiddenAccessException.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: .ctor
        path: ../Domain/Exceptions/ForbiddenAccessException.cs
        startLine: 14
      syntax:
        content:
          CSharp: public ForbiddenAccessException(string message)
          VB: Public Sub New(message As String)
        parameters:
        - id: message
          type: System.String
      overload: Domain.Exceptions.ForbiddenAccessException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Domain.Exceptions.InsertSQLFailureException
    commentId: T:Domain.Exceptions.InsertSQLFailureException
    language: CSharp
    name:
      CSharp: InsertSQLFailureException
      VB: InsertSQLFailureException
    nameWithType:
      CSharp: InsertSQLFailureException
      VB: InsertSQLFailureException
    qualifiedName:
      CSharp: Domain.Exceptions.InsertSQLFailureException
      VB: Domain.Exceptions.InsertSQLFailureException
    type: Class
    assemblies:
    - Domain
    namespace: Domain.Exceptions
    source:
      remote:
        path: Domain/Exceptions/InsertSQLFailureException.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: InsertSQLFailureException
      path: ../Domain/Exceptions/InsertSQLFailureException.cs
      startLine: 9
    syntax:
      content:
        CSharp: 'public class InsertSQLFailureException : Exception, ISerializable'
        VB: >-
          Public Class InsertSQLFailureException

              Inherits Exception

              Implements ISerializable
    inheritance:
    - System.Object
    - System.Exception
    implements:
    - System.Runtime.Serialization.ISerializable
    inheritedMembers:
    - System.Exception.GetBaseException
    - System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    - System.Exception.GetType
    - System.Exception.ToString
    - System.Exception.Data
    - System.Exception.HelpLink
    - System.Exception.HResult
    - System.Exception.InnerException
    - System.Exception.Message
    - System.Exception.Source
    - System.Exception.StackTrace
    - System.Exception.TargetSite
    - System.Exception.SerializeObjectState
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.Exceptions.InsertSQLFailureException.#ctor(Domain.Entites.Entity)
      commentId: M:Domain.Exceptions.InsertSQLFailureException.#ctor(Domain.Entites.Entity)
      language: CSharp
      name:
        CSharp: InsertSQLFailureException(Entity)
        VB: InsertSQLFailureException(Entity)
      nameWithType:
        CSharp: InsertSQLFailureException.InsertSQLFailureException(Entity)
        VB: InsertSQLFailureException.InsertSQLFailureException(Entity)
      qualifiedName:
        CSharp: Domain.Exceptions.InsertSQLFailureException.InsertSQLFailureException(Domain.Entites.Entity)
        VB: Domain.Exceptions.InsertSQLFailureException.InsertSQLFailureException(Domain.Entites.Entity)
      type: Constructor
      assemblies:
      - Domain
      namespace: Domain.Exceptions
      source:
        remote:
          path: Domain/Exceptions/InsertSQLFailureException.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: .ctor
        path: ../Domain/Exceptions/InsertSQLFailureException.cs
        startLine: 11
      syntax:
        content:
          CSharp: public InsertSQLFailureException(Entity entity)
          VB: Public Sub New(entity As Entity)
        parameters:
        - id: entity
          type: Domain.Entites.Entity
      overload: Domain.Exceptions.InsertSQLFailureException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Domain.Exceptions.InsertSQLFailureException.#ctor(System.String)
      commentId: M:Domain.Exceptions.InsertSQLFailureException.#ctor(System.String)
      language: CSharp
      name:
        CSharp: InsertSQLFailureException(String)
        VB: InsertSQLFailureException(String)
      nameWithType:
        CSharp: InsertSQLFailureException.InsertSQLFailureException(String)
        VB: InsertSQLFailureException.InsertSQLFailureException(String)
      qualifiedName:
        CSharp: Domain.Exceptions.InsertSQLFailureException.InsertSQLFailureException(System.String)
        VB: Domain.Exceptions.InsertSQLFailureException.InsertSQLFailureException(System.String)
      type: Constructor
      assemblies:
      - Domain
      namespace: Domain.Exceptions
      source:
        remote:
          path: Domain/Exceptions/InsertSQLFailureException.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: .ctor
        path: ../Domain/Exceptions/InsertSQLFailureException.cs
        startLine: 16
      syntax:
        content:
          CSharp: public InsertSQLFailureException(string message)
          VB: Public Sub New(message As String)
        parameters:
        - id: message
          type: System.String
      overload: Domain.Exceptions.InsertSQLFailureException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Domain.Exceptions.NotFoundException
    commentId: T:Domain.Exceptions.NotFoundException
    language: CSharp
    name:
      CSharp: NotFoundException
      VB: NotFoundException
    nameWithType:
      CSharp: NotFoundException
      VB: NotFoundException
    qualifiedName:
      CSharp: Domain.Exceptions.NotFoundException
      VB: Domain.Exceptions.NotFoundException
    type: Class
    assemblies:
    - Domain
    namespace: Domain.Exceptions
    source:
      remote:
        path: Domain/Exceptions/NotFoundException.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: NotFoundException
      path: ../Domain/Exceptions/NotFoundException.cs
      startLine: 4
    syntax:
      content:
        CSharp: 'public class NotFoundException : Exception, ISerializable'
        VB: >-
          Public Class NotFoundException

              Inherits Exception

              Implements ISerializable
    inheritance:
    - System.Object
    - System.Exception
    implements:
    - System.Runtime.Serialization.ISerializable
    inheritedMembers:
    - System.Exception.GetBaseException
    - System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    - System.Exception.GetType
    - System.Exception.ToString
    - System.Exception.Data
    - System.Exception.HelpLink
    - System.Exception.HResult
    - System.Exception.InnerException
    - System.Exception.Message
    - System.Exception.Source
    - System.Exception.StackTrace
    - System.Exception.TargetSite
    - System.Exception.SerializeObjectState
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.Exceptions.NotFoundException.#ctor
      commentId: M:Domain.Exceptions.NotFoundException.#ctor
      language: CSharp
      name:
        CSharp: NotFoundException()
        VB: NotFoundException()
      nameWithType:
        CSharp: NotFoundException.NotFoundException()
        VB: NotFoundException.NotFoundException()
      qualifiedName:
        CSharp: Domain.Exceptions.NotFoundException.NotFoundException()
        VB: Domain.Exceptions.NotFoundException.NotFoundException()
      type: Constructor
      assemblies:
      - Domain
      namespace: Domain.Exceptions
      source:
        remote:
          path: Domain/Exceptions/NotFoundException.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: .ctor
        path: ../Domain/Exceptions/NotFoundException.cs
        startLine: 6
      syntax:
        content:
          CSharp: public NotFoundException()
          VB: Public Sub New
      overload: Domain.Exceptions.NotFoundException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Domain.Exceptions.NotFoundException.#ctor(System.String)
      commentId: M:Domain.Exceptions.NotFoundException.#ctor(System.String)
      language: CSharp
      name:
        CSharp: NotFoundException(String)
        VB: NotFoundException(String)
      nameWithType:
        CSharp: NotFoundException.NotFoundException(String)
        VB: NotFoundException.NotFoundException(String)
      qualifiedName:
        CSharp: Domain.Exceptions.NotFoundException.NotFoundException(System.String)
        VB: Domain.Exceptions.NotFoundException.NotFoundException(System.String)
      type: Constructor
      assemblies:
      - Domain
      namespace: Domain.Exceptions
      source:
        remote:
          path: Domain/Exceptions/NotFoundException.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: .ctor
        path: ../Domain/Exceptions/NotFoundException.cs
        startLine: 11
      syntax:
        content:
          CSharp: public NotFoundException(string message)
          VB: Public Sub New(message As String)
        parameters:
        - id: message
          type: System.String
      overload: Domain.Exceptions.NotFoundException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Domain.Exceptions.NotFoundException.#ctor(System.String,System.Exception)
      commentId: M:Domain.Exceptions.NotFoundException.#ctor(System.String,System.Exception)
      language: CSharp
      name:
        CSharp: NotFoundException(String, Exception)
        VB: NotFoundException(String, Exception)
      nameWithType:
        CSharp: NotFoundException.NotFoundException(String, Exception)
        VB: NotFoundException.NotFoundException(String, Exception)
      qualifiedName:
        CSharp: Domain.Exceptions.NotFoundException.NotFoundException(System.String, System.Exception)
        VB: Domain.Exceptions.NotFoundException.NotFoundException(System.String, System.Exception)
      type: Constructor
      assemblies:
      - Domain
      namespace: Domain.Exceptions
      source:
        remote:
          path: Domain/Exceptions/NotFoundException.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: .ctor
        path: ../Domain/Exceptions/NotFoundException.cs
        startLine: 16
      syntax:
        content:
          CSharp: public NotFoundException(string message, Exception innerException)
          VB: Public Sub New(message As String, innerException As Exception)
        parameters:
        - id: message
          type: System.String
        - id: innerException
          type: System.Exception
      overload: Domain.Exceptions.NotFoundException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Domain.Exceptions.NotFoundException.#ctor(System.String,System.Object)
      commentId: M:Domain.Exceptions.NotFoundException.#ctor(System.String,System.Object)
      language: CSharp
      name:
        CSharp: NotFoundException(String, Object)
        VB: NotFoundException(String, Object)
      nameWithType:
        CSharp: NotFoundException.NotFoundException(String, Object)
        VB: NotFoundException.NotFoundException(String, Object)
      qualifiedName:
        CSharp: Domain.Exceptions.NotFoundException.NotFoundException(System.String, System.Object)
        VB: Domain.Exceptions.NotFoundException.NotFoundException(System.String, System.Object)
      type: Constructor
      assemblies:
      - Domain
      namespace: Domain.Exceptions
      source:
        remote:
          path: Domain/Exceptions/NotFoundException.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: .ctor
        path: ../Domain/Exceptions/NotFoundException.cs
        startLine: 21
      syntax:
        content:
          CSharp: public NotFoundException(string name, object key)
          VB: Public Sub New(name As String, key As Object)
        parameters:
        - id: name
          type: System.String
        - id: key
          type: System.Object
      overload: Domain.Exceptions.NotFoundException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Domain.Exceptions.UnknownException
    commentId: T:Domain.Exceptions.UnknownException
    language: CSharp
    name:
      CSharp: UnknownException
      VB: UnknownException
    nameWithType:
      CSharp: UnknownException
      VB: UnknownException
    qualifiedName:
      CSharp: Domain.Exceptions.UnknownException
      VB: Domain.Exceptions.UnknownException
    type: Class
    assemblies:
    - Domain
    namespace: Domain.Exceptions
    source:
      remote:
        path: Domain/Exceptions/UnknownException.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: UnknownException
      path: ../Domain/Exceptions/UnknownException.cs
      startLine: 8
    syntax:
      content:
        CSharp: 'public class UnknownException : Exception, ISerializable'
        VB: >-
          Public Class UnknownException

              Inherits Exception

              Implements ISerializable
    inheritance:
    - System.Object
    - System.Exception
    implements:
    - System.Runtime.Serialization.ISerializable
    inheritedMembers:
    - System.Exception.GetBaseException
    - System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    - System.Exception.GetType
    - System.Exception.ToString
    - System.Exception.Data
    - System.Exception.HelpLink
    - System.Exception.HResult
    - System.Exception.InnerException
    - System.Exception.Message
    - System.Exception.Source
    - System.Exception.StackTrace
    - System.Exception.TargetSite
    - System.Exception.SerializeObjectState
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.Exceptions.UnknownException.#ctor
      commentId: M:Domain.Exceptions.UnknownException.#ctor
      language: CSharp
      name:
        CSharp: UnknownException()
        VB: UnknownException()
      nameWithType:
        CSharp: UnknownException.UnknownException()
        VB: UnknownException.UnknownException()
      qualifiedName:
        CSharp: Domain.Exceptions.UnknownException.UnknownException()
        VB: Domain.Exceptions.UnknownException.UnknownException()
      type: Constructor
      assemblies:
      - Domain
      namespace: Domain.Exceptions
      source:
        remote:
          path: Domain/Exceptions/UnknownException.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: .ctor
        path: ../Domain/Exceptions/UnknownException.cs
        startLine: 10
      syntax:
        content:
          CSharp: public UnknownException()
          VB: Public Sub New
      overload: Domain.Exceptions.UnknownException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Domain.Exceptions.UnknownException.#ctor(System.String)
      commentId: M:Domain.Exceptions.UnknownException.#ctor(System.String)
      language: CSharp
      name:
        CSharp: UnknownException(String)
        VB: UnknownException(String)
      nameWithType:
        CSharp: UnknownException.UnknownException(String)
        VB: UnknownException.UnknownException(String)
      qualifiedName:
        CSharp: Domain.Exceptions.UnknownException.UnknownException(System.String)
        VB: Domain.Exceptions.UnknownException.UnknownException(System.String)
      type: Constructor
      assemblies:
      - Domain
      namespace: Domain.Exceptions
      source:
        remote:
          path: Domain/Exceptions/UnknownException.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: .ctor
        path: ../Domain/Exceptions/UnknownException.cs
        startLine: 15
      syntax:
        content:
          CSharp: public UnknownException(string message)
          VB: Public Sub New(message As String)
        parameters:
        - id: message
          type: System.String
      overload: Domain.Exceptions.UnknownException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Domain.Exceptions.UnknownException.#ctor(System.String,System.Exception)
      commentId: M:Domain.Exceptions.UnknownException.#ctor(System.String,System.Exception)
      language: CSharp
      name:
        CSharp: UnknownException(String, Exception)
        VB: UnknownException(String, Exception)
      nameWithType:
        CSharp: UnknownException.UnknownException(String, Exception)
        VB: UnknownException.UnknownException(String, Exception)
      qualifiedName:
        CSharp: Domain.Exceptions.UnknownException.UnknownException(System.String, System.Exception)
        VB: Domain.Exceptions.UnknownException.UnknownException(System.String, System.Exception)
      type: Constructor
      assemblies:
      - Domain
      namespace: Domain.Exceptions
      source:
        remote:
          path: Domain/Exceptions/UnknownException.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: .ctor
        path: ../Domain/Exceptions/UnknownException.cs
        startLine: 20
      syntax:
        content:
          CSharp: public UnknownException(string message, Exception innerException)
          VB: Public Sub New(message As String, innerException As Exception)
        parameters:
        - id: message
          type: System.String
        - id: innerException
          type: System.Exception
      overload: Domain.Exceptions.UnknownException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Domain.Exceptions.UnknownException.#ctor(System.String,System.Object)
      commentId: M:Domain.Exceptions.UnknownException.#ctor(System.String,System.Object)
      language: CSharp
      name:
        CSharp: UnknownException(String, Object)
        VB: UnknownException(String, Object)
      nameWithType:
        CSharp: UnknownException.UnknownException(String, Object)
        VB: UnknownException.UnknownException(String, Object)
      qualifiedName:
        CSharp: Domain.Exceptions.UnknownException.UnknownException(System.String, System.Object)
        VB: Domain.Exceptions.UnknownException.UnknownException(System.String, System.Object)
      type: Constructor
      assemblies:
      - Domain
      namespace: Domain.Exceptions
      source:
        remote:
          path: Domain/Exceptions/UnknownException.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: .ctor
        path: ../Domain/Exceptions/UnknownException.cs
        startLine: 25
      syntax:
        content:
          CSharp: public UnknownException(string name, object key)
          VB: Public Sub New(name As String, key As Object)
        parameters:
        - id: name
          type: System.String
        - id: key
          type: System.Object
      overload: Domain.Exceptions.UnknownException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Domain.Exceptions.UpdateSQLFailureException
    commentId: T:Domain.Exceptions.UpdateSQLFailureException
    language: CSharp
    name:
      CSharp: UpdateSQLFailureException
      VB: UpdateSQLFailureException
    nameWithType:
      CSharp: UpdateSQLFailureException
      VB: UpdateSQLFailureException
    qualifiedName:
      CSharp: Domain.Exceptions.UpdateSQLFailureException
      VB: Domain.Exceptions.UpdateSQLFailureException
    type: Class
    assemblies:
    - Domain
    namespace: Domain.Exceptions
    source:
      remote:
        path: Domain/Exceptions/UpdateSQLFailureException.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: UpdateSQLFailureException
      path: ../Domain/Exceptions/UpdateSQLFailureException.cs
      startLine: 9
    syntax:
      content:
        CSharp: 'public class UpdateSQLFailureException : Exception, ISerializable'
        VB: >-
          Public Class UpdateSQLFailureException

              Inherits Exception

              Implements ISerializable
    inheritance:
    - System.Object
    - System.Exception
    implements:
    - System.Runtime.Serialization.ISerializable
    inheritedMembers:
    - System.Exception.GetBaseException
    - System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    - System.Exception.GetType
    - System.Exception.ToString
    - System.Exception.Data
    - System.Exception.HelpLink
    - System.Exception.HResult
    - System.Exception.InnerException
    - System.Exception.Message
    - System.Exception.Source
    - System.Exception.StackTrace
    - System.Exception.TargetSite
    - System.Exception.SerializeObjectState
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Domain.Exceptions.UpdateSQLFailureException.#ctor(Domain.Entites.Entity)
      commentId: M:Domain.Exceptions.UpdateSQLFailureException.#ctor(Domain.Entites.Entity)
      language: CSharp
      name:
        CSharp: UpdateSQLFailureException(Entity)
        VB: UpdateSQLFailureException(Entity)
      nameWithType:
        CSharp: UpdateSQLFailureException.UpdateSQLFailureException(Entity)
        VB: UpdateSQLFailureException.UpdateSQLFailureException(Entity)
      qualifiedName:
        CSharp: Domain.Exceptions.UpdateSQLFailureException.UpdateSQLFailureException(Domain.Entites.Entity)
        VB: Domain.Exceptions.UpdateSQLFailureException.UpdateSQLFailureException(Domain.Entites.Entity)
      type: Constructor
      assemblies:
      - Domain
      namespace: Domain.Exceptions
      source:
        remote:
          path: Domain/Exceptions/UpdateSQLFailureException.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: .ctor
        path: ../Domain/Exceptions/UpdateSQLFailureException.cs
        startLine: 12
      syntax:
        content:
          CSharp: public UpdateSQLFailureException(Entity entity)
          VB: Public Sub New(entity As Entity)
        parameters:
        - id: entity
          type: Domain.Entites.Entity
      overload: Domain.Exceptions.UpdateSQLFailureException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Domain.Exceptions.UpdateSQLFailureException.#ctor
      commentId: M:Domain.Exceptions.UpdateSQLFailureException.#ctor
      language: CSharp
      name:
        CSharp: UpdateSQLFailureException()
        VB: UpdateSQLFailureException()
      nameWithType:
        CSharp: UpdateSQLFailureException.UpdateSQLFailureException()
        VB: UpdateSQLFailureException.UpdateSQLFailureException()
      qualifiedName:
        CSharp: Domain.Exceptions.UpdateSQLFailureException.UpdateSQLFailureException()
        VB: Domain.Exceptions.UpdateSQLFailureException.UpdateSQLFailureException()
      type: Constructor
      assemblies:
      - Domain
      namespace: Domain.Exceptions
      source:
        remote:
          path: Domain/Exceptions/UpdateSQLFailureException.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: .ctor
        path: ../Domain/Exceptions/UpdateSQLFailureException.cs
        startLine: 17
      syntax:
        content:
          CSharp: public UpdateSQLFailureException()
          VB: Public Sub New
      overload: Domain.Exceptions.UpdateSQLFailureException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
references:
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  Microsoft.Extensions.DependencyInjection:
    name:
      CSharp:
      - name: Microsoft.Extensions.DependencyInjection
        nameWithType: Microsoft.Extensions.DependencyInjection
        qualifiedName: Microsoft.Extensions.DependencyInjection
        isExternal: true
      VB:
      - name: Microsoft.Extensions.DependencyInjection
        nameWithType: Microsoft.Extensions.DependencyInjection
        qualifiedName: Microsoft.Extensions.DependencyInjection
    isDefinition: true
    commentId: N:Microsoft.Extensions.DependencyInjection
  Microsoft.Extensions.DependencyInjection.IServiceCollection:
    name:
      CSharp:
      - id: Microsoft.Extensions.DependencyInjection.IServiceCollection
        name: IServiceCollection
        nameWithType: IServiceCollection
        qualifiedName: Microsoft.Extensions.DependencyInjection.IServiceCollection
        isExternal: true
      VB:
      - id: Microsoft.Extensions.DependencyInjection.IServiceCollection
        name: IServiceCollection
        nameWithType: IServiceCollection
        qualifiedName: Microsoft.Extensions.DependencyInjection.IServiceCollection
        isExternal: true
    isDefinition: true
    parent: Microsoft.Extensions.DependencyInjection
    commentId: T:Microsoft.Extensions.DependencyInjection.IServiceCollection
  Domaine.DomainExtensions.AddDomain*:
    name:
      CSharp:
      - id: Domaine.DomainExtensions.AddDomain*
        name: AddDomain
        nameWithType: DomainExtensions.AddDomain
        qualifiedName: Domaine.DomainExtensions.AddDomain
      VB:
      - id: Domaine.DomainExtensions.AddDomain*
        name: AddDomain
        nameWithType: DomainExtensions.AddDomain
        qualifiedName: Domaine.DomainExtensions.AddDomain
    isDefinition: true
    commentId: Overload:Domaine.DomainExtensions.AddDomain
  Domaine.DomainExtensions:
    name:
      CSharp:
      - id: Domaine.DomainExtensions
        name: DomainExtensions
        nameWithType: DomainExtensions
        qualifiedName: Domaine.DomainExtensions
      VB:
      - id: Domaine.DomainExtensions
        name: DomainExtensions
        nameWithType: DomainExtensions
        qualifiedName: Domaine.DomainExtensions
    isDefinition: true
    commentId: T:Domaine.DomainExtensions
  Domaine:
    name:
      CSharp:
      - name: Domaine
        nameWithType: Domaine
        qualifiedName: Domaine
      VB:
      - name: Domaine
        nameWithType: Domaine
        qualifiedName: Domaine
    isDefinition: true
    commentId: N:Domaine
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  Domain.DTO.CreateUserRequestDTO.Name*:
    name:
      CSharp:
      - id: Domain.DTO.CreateUserRequestDTO.Name*
        name: Name
        nameWithType: CreateUserRequestDTO.Name
        qualifiedName: Domain.DTO.CreateUserRequestDTO.Name
      VB:
      - id: Domain.DTO.CreateUserRequestDTO.Name*
        name: Name
        nameWithType: CreateUserRequestDTO.Name
        qualifiedName: Domain.DTO.CreateUserRequestDTO.Name
    isDefinition: true
    commentId: Overload:Domain.DTO.CreateUserRequestDTO.Name
  Domain.DTO.CreateUserRequestDTO.First_Name*:
    name:
      CSharp:
      - id: Domain.DTO.CreateUserRequestDTO.First_Name*
        name: First_Name
        nameWithType: CreateUserRequestDTO.First_Name
        qualifiedName: Domain.DTO.CreateUserRequestDTO.First_Name
      VB:
      - id: Domain.DTO.CreateUserRequestDTO.First_Name*
        name: First_Name
        nameWithType: CreateUserRequestDTO.First_Name
        qualifiedName: Domain.DTO.CreateUserRequestDTO.First_Name
    isDefinition: true
    commentId: Overload:Domain.DTO.CreateUserRequestDTO.First_Name
  Domain.DTO.CreateUserRequestDTO.Login_Name*:
    name:
      CSharp:
      - id: Domain.DTO.CreateUserRequestDTO.Login_Name*
        name: Login_Name
        nameWithType: CreateUserRequestDTO.Login_Name
        qualifiedName: Domain.DTO.CreateUserRequestDTO.Login_Name
      VB:
      - id: Domain.DTO.CreateUserRequestDTO.Login_Name*
        name: Login_Name
        nameWithType: CreateUserRequestDTO.Login_Name
        qualifiedName: Domain.DTO.CreateUserRequestDTO.Login_Name
    isDefinition: true
    commentId: Overload:Domain.DTO.CreateUserRequestDTO.Login_Name
  Domain.DTO.CreateUserRequestDTO.Ph_No*:
    name:
      CSharp:
      - id: Domain.DTO.CreateUserRequestDTO.Ph_No*
        name: Ph_No
        nameWithType: CreateUserRequestDTO.Ph_No
        qualifiedName: Domain.DTO.CreateUserRequestDTO.Ph_No
      VB:
      - id: Domain.DTO.CreateUserRequestDTO.Ph_No*
        name: Ph_No
        nameWithType: CreateUserRequestDTO.Ph_No
        qualifiedName: Domain.DTO.CreateUserRequestDTO.Ph_No
    isDefinition: true
    commentId: Overload:Domain.DTO.CreateUserRequestDTO.Ph_No
  Domain.DTO.CreateUserRequestDTO.E_Mail*:
    name:
      CSharp:
      - id: Domain.DTO.CreateUserRequestDTO.E_Mail*
        name: E_Mail
        nameWithType: CreateUserRequestDTO.E_Mail
        qualifiedName: Domain.DTO.CreateUserRequestDTO.E_Mail
      VB:
      - id: Domain.DTO.CreateUserRequestDTO.E_Mail*
        name: E_Mail
        nameWithType: CreateUserRequestDTO.E_Mail
        qualifiedName: Domain.DTO.CreateUserRequestDTO.E_Mail
    isDefinition: true
    commentId: Overload:Domain.DTO.CreateUserRequestDTO.E_Mail
  Domain.DTO.CreateUserRequestDTO.Password*:
    name:
      CSharp:
      - id: Domain.DTO.CreateUserRequestDTO.Password*
        name: Password
        nameWithType: CreateUserRequestDTO.Password
        qualifiedName: Domain.DTO.CreateUserRequestDTO.Password
      VB:
      - id: Domain.DTO.CreateUserRequestDTO.Password*
        name: Password
        nameWithType: CreateUserRequestDTO.Password
        qualifiedName: Domain.DTO.CreateUserRequestDTO.Password
    isDefinition: true
    commentId: Overload:Domain.DTO.CreateUserRequestDTO.Password
  Domain.DTO.CreateUserRequestDTO:
    name:
      CSharp:
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      VB:
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
    isDefinition: true
    commentId: T:Domain.DTO.CreateUserRequestDTO
  FluentValidation.AbstractValidator`1:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1
        name: AbstractValidator
        nameWithType: AbstractValidator
        qualifiedName: FluentValidation.AbstractValidator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: FluentValidation.AbstractValidator`1
        name: AbstractValidator
        nameWithType: AbstractValidator
        qualifiedName: FluentValidation.AbstractValidator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:FluentValidation.AbstractValidator`1
  FluentValidation:
    name:
      CSharp:
      - name: FluentValidation
        nameWithType: FluentValidation
        qualifiedName: FluentValidation
        isExternal: true
      VB:
      - name: FluentValidation
        nameWithType: FluentValidation
        qualifiedName: FluentValidation
    isDefinition: true
    commentId: N:FluentValidation
  FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1
        name: AbstractValidator
        nameWithType: AbstractValidator
        qualifiedName: FluentValidation.AbstractValidator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: FluentValidation.AbstractValidator`1
        name: AbstractValidator
        nameWithType: AbstractValidator
        qualifiedName: FluentValidation.AbstractValidator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1
    parent: FluentValidation
    commentId: T:FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}
  FluentValidation.AbstractValidator`1.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext):
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
        name: IValidator.Validate
        nameWithType: AbstractValidator<T>.IValidator.Validate
        qualifiedName: FluentValidation.AbstractValidator<T>.FluentValidation.IValidator.Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidationContext
        name: IValidationContext
        nameWithType: IValidationContext
        qualifiedName: FluentValidation.IValidationContext
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
        name: FluentValidation.IValidator.Validate
        nameWithType: AbstractValidator(Of T).FluentValidation.IValidator.Validate
        qualifiedName: FluentValidation.AbstractValidator(Of T).FluentValidation.IValidator.Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidationContext
        name: IValidationContext
        nameWithType: IValidationContext
        qualifiedName: FluentValidation.IValidationContext
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:FluentValidation.AbstractValidator`1.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
  ? FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
        name: IValidator.Validate
        nameWithType: AbstractValidator<CreateUserRequestDTO>.IValidator.Validate
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.CreateUserRequestDTO>.FluentValidation.IValidator.Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidationContext
        name: IValidationContext
        nameWithType: IValidationContext
        qualifiedName: FluentValidation.IValidationContext
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
        name: FluentValidation.IValidator.Validate
        nameWithType: AbstractValidator(Of CreateUserRequestDTO).FluentValidation.IValidator.Validate
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.CreateUserRequestDTO).FluentValidation.IValidator.Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidationContext
        name: IValidationContext
        nameWithType: IValidationContext
        qualifiedName: FluentValidation.IValidationContext
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
    parent: FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
  ? FluentValidation.AbstractValidator`1.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
        name: IValidator.ValidateAsync
        nameWithType: AbstractValidator<T>.IValidator.ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator<T>.FluentValidation.IValidator.ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidationContext
        name: IValidationContext
        nameWithType: IValidationContext
        qualifiedName: FluentValidation.IValidationContext
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
        name: FluentValidation.IValidator.ValidateAsync
        nameWithType: AbstractValidator(Of T).FluentValidation.IValidator.ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator(Of T).FluentValidation.IValidator.ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidationContext
        name: IValidationContext
        nameWithType: IValidationContext
        qualifiedName: FluentValidation.IValidationContext
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:FluentValidation.AbstractValidator`1.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
  ? FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
        name: IValidator.ValidateAsync
        nameWithType: AbstractValidator<CreateUserRequestDTO>.IValidator.ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.CreateUserRequestDTO>.FluentValidation.IValidator.ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidationContext
        name: IValidationContext
        nameWithType: IValidationContext
        qualifiedName: FluentValidation.IValidationContext
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
        name: FluentValidation.IValidator.ValidateAsync
        nameWithType: AbstractValidator(Of CreateUserRequestDTO).FluentValidation.IValidator.ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.CreateUserRequestDTO).FluentValidation.IValidator.ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidationContext
        name: IValidationContext
        nameWithType: IValidationContext
        qualifiedName: FluentValidation.IValidationContext
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
    parent: FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
  FluentValidation.AbstractValidator`1.Validate(`0):
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Validate(`0)
        name: Validate
        nameWithType: AbstractValidator<T>.Validate
        qualifiedName: FluentValidation.AbstractValidator<T>.Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Validate(`0)
        name: Validate
        nameWithType: AbstractValidator(Of T).Validate
        qualifiedName: FluentValidation.AbstractValidator(Of T).Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:FluentValidation.AbstractValidator`1.Validate(`0)
  FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.Validate(Domain.DTO.CreateUserRequestDTO):
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Validate(`0)
        name: Validate
        nameWithType: AbstractValidator<CreateUserRequestDTO>.Validate
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.CreateUserRequestDTO>.Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Validate(`0)
        name: Validate
        nameWithType: AbstractValidator(Of CreateUserRequestDTO).Validate
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.CreateUserRequestDTO).Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Validate(`0)
    parent: FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.Validate(Domain.DTO.CreateUserRequestDTO)
  FluentValidation.AbstractValidator`1.ValidateAsync(`0,System.Threading.CancellationToken):
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.ValidateAsync(`0,System.Threading.CancellationToken)
        name: ValidateAsync
        nameWithType: AbstractValidator<T>.ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator<T>.ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.ValidateAsync(`0,System.Threading.CancellationToken)
        name: ValidateAsync
        nameWithType: AbstractValidator(Of T).ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator(Of T).ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:FluentValidation.AbstractValidator`1.ValidateAsync(`0,System.Threading.CancellationToken)
  ? FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.ValidateAsync(Domain.DTO.CreateUserRequestDTO,System.Threading.CancellationToken)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.ValidateAsync(`0,System.Threading.CancellationToken)
        name: ValidateAsync
        nameWithType: AbstractValidator<CreateUserRequestDTO>.ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.CreateUserRequestDTO>.ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.ValidateAsync(`0,System.Threading.CancellationToken)
        name: ValidateAsync
        nameWithType: AbstractValidator(Of CreateUserRequestDTO).ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.CreateUserRequestDTO).ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.ValidateAsync(`0,System.Threading.CancellationToken)
    parent: FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.ValidateAsync(Domain.DTO.CreateUserRequestDTO,System.Threading.CancellationToken)
  FluentValidation.AbstractValidator`1.Validate(FluentValidation.ValidationContext{`0}):
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Validate(FluentValidation.ValidationContext{`0})
        name: Validate
        nameWithType: AbstractValidator<T>.Validate
        qualifiedName: FluentValidation.AbstractValidator<T>.Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Validate(FluentValidation.ValidationContext{`0})
        name: Validate
        nameWithType: AbstractValidator(Of T).Validate
        qualifiedName: FluentValidation.AbstractValidator(Of T).Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:FluentValidation.AbstractValidator`1.Validate(FluentValidation.ValidationContext{`0})
  ? FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.Validate(FluentValidation.ValidationContext{Domain.DTO.CreateUserRequestDTO})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Validate(FluentValidation.ValidationContext{`0})
        name: Validate
        nameWithType: AbstractValidator<CreateUserRequestDTO>.Validate
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.CreateUserRequestDTO>.Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Validate(FluentValidation.ValidationContext{`0})
        name: Validate
        nameWithType: AbstractValidator(Of CreateUserRequestDTO).Validate
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.CreateUserRequestDTO).Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Validate(FluentValidation.ValidationContext{`0})
    parent: FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.Validate(FluentValidation.ValidationContext{Domain.DTO.CreateUserRequestDTO})
  FluentValidation.AbstractValidator`1.ValidateAsync(FluentValidation.ValidationContext{`0},System.Threading.CancellationToken):
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.ValidateAsync(FluentValidation.ValidationContext{`0},System.Threading.CancellationToken)
        name: ValidateAsync
        nameWithType: AbstractValidator<T>.ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator<T>.ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.ValidateAsync(FluentValidation.ValidationContext{`0},System.Threading.CancellationToken)
        name: ValidateAsync
        nameWithType: AbstractValidator(Of T).ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator(Of T).ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:FluentValidation.AbstractValidator`1.ValidateAsync(FluentValidation.ValidationContext{`0},System.Threading.CancellationToken)
  ? FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.ValidateAsync(FluentValidation.ValidationContext{Domain.DTO.CreateUserRequestDTO},System.Threading.CancellationToken)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.ValidateAsync(FluentValidation.ValidationContext{`0},System.Threading.CancellationToken)
        name: ValidateAsync
        nameWithType: AbstractValidator<CreateUserRequestDTO>.ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.CreateUserRequestDTO>.ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.ValidateAsync(FluentValidation.ValidationContext{`0},System.Threading.CancellationToken)
        name: ValidateAsync
        nameWithType: AbstractValidator(Of CreateUserRequestDTO).ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.CreateUserRequestDTO).ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.ValidateAsync(FluentValidation.ValidationContext{`0},System.Threading.CancellationToken)
    parent: FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.ValidateAsync(FluentValidation.ValidationContext{Domain.DTO.CreateUserRequestDTO},System.Threading.CancellationToken)
  FluentValidation.AbstractValidator`1.CreateDescriptor:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.CreateDescriptor
        name: CreateDescriptor
        nameWithType: AbstractValidator<T>.CreateDescriptor
        qualifiedName: FluentValidation.AbstractValidator<T>.CreateDescriptor
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.CreateDescriptor
        name: CreateDescriptor
        nameWithType: AbstractValidator(Of T).CreateDescriptor
        qualifiedName: FluentValidation.AbstractValidator(Of T).CreateDescriptor
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:FluentValidation.AbstractValidator`1.CreateDescriptor
  FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.CreateDescriptor:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.CreateDescriptor
        name: CreateDescriptor
        nameWithType: AbstractValidator<CreateUserRequestDTO>.CreateDescriptor
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.CreateUserRequestDTO>.CreateDescriptor
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.CreateDescriptor
        name: CreateDescriptor
        nameWithType: AbstractValidator(Of CreateUserRequestDTO).CreateDescriptor
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.CreateUserRequestDTO).CreateDescriptor
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.CreateDescriptor
    parent: FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.CreateDescriptor
  FluentValidation.AbstractValidator`1.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type):
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
        name: IValidator.CanValidateInstancesOfType
        nameWithType: AbstractValidator<T>.IValidator.CanValidateInstancesOfType
        qualifiedName: FluentValidation.AbstractValidator<T>.FluentValidation.IValidator.CanValidateInstancesOfType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
        name: FluentValidation.IValidator.CanValidateInstancesOfType
        nameWithType: AbstractValidator(Of T).FluentValidation.IValidator.CanValidateInstancesOfType
        qualifiedName: FluentValidation.AbstractValidator(Of T).FluentValidation.IValidator.CanValidateInstancesOfType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:FluentValidation.AbstractValidator`1.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
  ? FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
        name: IValidator.CanValidateInstancesOfType
        nameWithType: AbstractValidator<CreateUserRequestDTO>.IValidator.CanValidateInstancesOfType
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.CreateUserRequestDTO>.FluentValidation.IValidator.CanValidateInstancesOfType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
        name: FluentValidation.IValidator.CanValidateInstancesOfType
        nameWithType: AbstractValidator(Of CreateUserRequestDTO).FluentValidation.IValidator.CanValidateInstancesOfType
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.CreateUserRequestDTO).FluentValidation.IValidator.CanValidateInstancesOfType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
    parent: FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
  FluentValidation.AbstractValidator`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}}):
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
        name: RuleFor<TProperty>
        nameWithType: AbstractValidator<T>.RuleFor<TProperty>
        qualifiedName: FluentValidation.AbstractValidator<T>.RuleFor<TProperty>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
        name: RuleFor(Of TProperty)
        nameWithType: AbstractValidator(Of T).RuleFor(Of TProperty)
        qualifiedName: FluentValidation.AbstractValidator(Of T).RuleFor(Of TProperty)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:FluentValidation.AbstractValidator`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  ? FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.RuleFor``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.CreateUserRequestDTO,{TProperty}}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
        name: RuleFor<TProperty>
        nameWithType: AbstractValidator<CreateUserRequestDTO>.RuleFor<TProperty>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.CreateUserRequestDTO>.RuleFor<TProperty>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
        name: RuleFor(Of TProperty)
        nameWithType: AbstractValidator(Of CreateUserRequestDTO).RuleFor(Of TProperty)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.CreateUserRequestDTO).RuleFor(Of TProperty)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    parent: FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.RuleFor``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.CreateUserRequestDTO,``0}})
  FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``1}):
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``1})
        name: Transform<TProperty, TTransformed>
        nameWithType: AbstractValidator<T>.Transform<TProperty, TTransformed>
        qualifiedName: FluentValidation.AbstractValidator<T>.Transform<TProperty, TTransformed>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``1})
        name: Transform(Of TProperty, TTransformed)
        nameWithType: AbstractValidator(Of T).Transform(Of TProperty, TTransformed)
        qualifiedName: FluentValidation.AbstractValidator(Of T).Transform(Of TProperty, TTransformed)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``1})
  ? FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.CreateUserRequestDTO,{TProperty}}},System.Func{{TProperty},{TTransformed}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``1})
        name: Transform<TProperty, TTransformed>
        nameWithType: AbstractValidator<CreateUserRequestDTO>.Transform<TProperty, TTransformed>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.CreateUserRequestDTO>.Transform<TProperty, TTransformed>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``1})
        name: Transform(Of TProperty, TTransformed)
        nameWithType: AbstractValidator(Of CreateUserRequestDTO).Transform(Of TProperty, TTransformed)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.CreateUserRequestDTO).Transform(Of TProperty, TTransformed)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``1})
    parent: FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.CreateUserRequestDTO,``0}},System.Func{``0,``1})
  ? FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{`0,``0,``1})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{`0,``0,``1})
        name: Transform<TProperty, TTransformed>
        nameWithType: AbstractValidator<T>.Transform<TProperty, TTransformed>
        qualifiedName: FluentValidation.AbstractValidator<T>.Transform<TProperty, TTransformed>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{`0,``0,``1})
        name: Transform(Of TProperty, TTransformed)
        nameWithType: AbstractValidator(Of T).Transform(Of TProperty, TTransformed)
        qualifiedName: FluentValidation.AbstractValidator(Of T).Transform(Of TProperty, TTransformed)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{`0,``0,``1})
  ? FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.CreateUserRequestDTO,{TProperty}}},System.Func{Domain.DTO.CreateUserRequestDTO,{TProperty},{TTransformed}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{`0,``0,``1})
        name: Transform<TProperty, TTransformed>
        nameWithType: AbstractValidator<CreateUserRequestDTO>.Transform<TProperty, TTransformed>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.CreateUserRequestDTO>.Transform<TProperty, TTransformed>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{`0,``0,``1})
        name: Transform(Of TProperty, TTransformed)
        nameWithType: AbstractValidator(Of CreateUserRequestDTO).Transform(Of TProperty, TTransformed)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.CreateUserRequestDTO).Transform(Of TProperty, TTransformed)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{`0,``0,``1})
    parent: FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.CreateUserRequestDTO,``0}},System.Func{Domain.DTO.CreateUserRequestDTO,``0,``1})
  ? FluentValidation.AbstractValidator`1.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})
        name: RuleForEach<TElement>
        nameWithType: AbstractValidator<T>.RuleForEach<TElement>
        qualifiedName: FluentValidation.AbstractValidator<T>.RuleForEach<TElement>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})
        name: RuleForEach(Of TElement)
        nameWithType: AbstractValidator(Of T).RuleForEach(Of TElement)
        qualifiedName: FluentValidation.AbstractValidator(Of T).RuleForEach(Of TElement)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:FluentValidation.AbstractValidator`1.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})
  ? FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.CreateUserRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})
        name: RuleForEach<TElement>
        nameWithType: AbstractValidator<CreateUserRequestDTO>.RuleForEach<TElement>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.CreateUserRequestDTO>.RuleForEach<TElement>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})
        name: RuleForEach(Of TElement)
        nameWithType: AbstractValidator(Of CreateUserRequestDTO).RuleForEach(Of TElement)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.CreateUserRequestDTO).RuleForEach(Of TElement)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})
    parent: FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.CreateUserRequestDTO,System.Collections.Generic.IEnumerable{``0}}})
  ? FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1})
        name: TransformForEach<TElement, TTransformed>
        nameWithType: AbstractValidator<T>.TransformForEach<TElement, TTransformed>
        qualifiedName: FluentValidation.AbstractValidator<T>.TransformForEach<TElement, TTransformed>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1})
        name: TransformForEach(Of TElement, TTransformed)
        nameWithType: AbstractValidator(Of T).TransformForEach(Of TElement, TTransformed)
        qualifiedName: FluentValidation.AbstractValidator(Of T).TransformForEach(Of TElement, TTransformed)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1})
  ? FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.CreateUserRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}},System.Func{{TElement},{TTransformed}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1})
        name: TransformForEach<TElement, TTransformed>
        nameWithType: AbstractValidator<CreateUserRequestDTO>.TransformForEach<TElement, TTransformed>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.CreateUserRequestDTO>.TransformForEach<TElement, TTransformed>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1})
        name: TransformForEach(Of TElement, TTransformed)
        nameWithType: AbstractValidator(Of CreateUserRequestDTO).TransformForEach(Of TElement, TTransformed)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.CreateUserRequestDTO).TransformForEach(Of TElement, TTransformed)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1})
    parent: FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.CreateUserRequestDTO,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1})
  ? FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{`0,``0,``1})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{`0,``0,``1})
        name: TransformForEach<TElement, TTransformed>
        nameWithType: AbstractValidator<T>.TransformForEach<TElement, TTransformed>
        qualifiedName: FluentValidation.AbstractValidator<T>.TransformForEach<TElement, TTransformed>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{`0,``0,``1})
        name: TransformForEach(Of TElement, TTransformed)
        nameWithType: AbstractValidator(Of T).TransformForEach(Of TElement, TTransformed)
        qualifiedName: FluentValidation.AbstractValidator(Of T).TransformForEach(Of TElement, TTransformed)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{`0,``0,``1})
  ? FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.CreateUserRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}},System.Func{Domain.DTO.CreateUserRequestDTO,{TElement},{TTransformed}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{`0,``0,``1})
        name: TransformForEach<TElement, TTransformed>
        nameWithType: AbstractValidator<CreateUserRequestDTO>.TransformForEach<TElement, TTransformed>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.CreateUserRequestDTO>.TransformForEach<TElement, TTransformed>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{`0,``0,``1})
        name: TransformForEach(Of TElement, TTransformed)
        nameWithType: AbstractValidator(Of CreateUserRequestDTO).TransformForEach(Of TElement, TTransformed)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.CreateUserRequestDTO).TransformForEach(Of TElement, TTransformed)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{`0,``0,``1})
    parent: FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.CreateUserRequestDTO,System.Collections.Generic.IEnumerable{``0}}},System.Func{Domain.DTO.CreateUserRequestDTO,``0,``1})
  FluentValidation.AbstractValidator`1.RuleSet(System.String,System.Action):
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RuleSet(System.String,System.Action)
        name: RuleSet
        nameWithType: AbstractValidator<T>.RuleSet
        qualifiedName: FluentValidation.AbstractValidator<T>.RuleSet
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.RuleSet(System.String,System.Action)
        name: RuleSet
        nameWithType: AbstractValidator(Of T).RuleSet
        qualifiedName: FluentValidation.AbstractValidator(Of T).RuleSet
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:FluentValidation.AbstractValidator`1.RuleSet(System.String,System.Action)
  FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.RuleSet(System.String,System.Action):
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RuleSet(System.String,System.Action)
        name: RuleSet
        nameWithType: AbstractValidator<CreateUserRequestDTO>.RuleSet
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.CreateUserRequestDTO>.RuleSet
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.RuleSet(System.String,System.Action)
        name: RuleSet
        nameWithType: AbstractValidator(Of CreateUserRequestDTO).RuleSet
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.CreateUserRequestDTO).RuleSet
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.RuleSet(System.String,System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.RuleSet(System.String,System.Action)
  FluentValidation.AbstractValidator`1.When(System.Func{`0,System.Boolean},System.Action):
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.When(System.Func{`0,System.Boolean},System.Action)
        name: When
        nameWithType: AbstractValidator<T>.When
        qualifiedName: FluentValidation.AbstractValidator<T>.When
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.When(System.Func{`0,System.Boolean},System.Action)
        name: When
        nameWithType: AbstractValidator(Of T).When
        qualifiedName: FluentValidation.AbstractValidator(Of T).When
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:FluentValidation.AbstractValidator`1.When(System.Func{`0,System.Boolean},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.When(System.Func{Domain.DTO.CreateUserRequestDTO,System.Boolean},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.When(System.Func{`0,System.Boolean},System.Action)
        name: When
        nameWithType: AbstractValidator<CreateUserRequestDTO>.When
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.CreateUserRequestDTO>.When
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.When(System.Func{`0,System.Boolean},System.Action)
        name: When
        nameWithType: AbstractValidator(Of CreateUserRequestDTO).When
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.CreateUserRequestDTO).When
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.When(System.Func{`0,System.Boolean},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.When(System.Func{Domain.DTO.CreateUserRequestDTO,System.Boolean},System.Action)
  FluentValidation.AbstractValidator`1.When(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action):
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.When(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
        name: When
        nameWithType: AbstractValidator<T>.When
        qualifiedName: FluentValidation.AbstractValidator<T>.When
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.When(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
        name: When
        nameWithType: AbstractValidator(Of T).When
        qualifiedName: FluentValidation.AbstractValidator(Of T).When
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:FluentValidation.AbstractValidator`1.When(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.When(System.Func{Domain.DTO.CreateUserRequestDTO,FluentValidation.ValidationContext{Domain.DTO.CreateUserRequestDTO},System.Boolean},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.When(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
        name: When
        nameWithType: AbstractValidator<CreateUserRequestDTO>.When
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.CreateUserRequestDTO>.When
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.When(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
        name: When
        nameWithType: AbstractValidator(Of CreateUserRequestDTO).When
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.CreateUserRequestDTO).When
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.When(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.When(System.Func{Domain.DTO.CreateUserRequestDTO,FluentValidation.ValidationContext{Domain.DTO.CreateUserRequestDTO},System.Boolean},System.Action)
  FluentValidation.AbstractValidator`1.Unless(System.Func{`0,System.Boolean},System.Action):
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,System.Boolean},System.Action)
        name: Unless
        nameWithType: AbstractValidator<T>.Unless
        qualifiedName: FluentValidation.AbstractValidator<T>.Unless
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,System.Boolean},System.Action)
        name: Unless
        nameWithType: AbstractValidator(Of T).Unless
        qualifiedName: FluentValidation.AbstractValidator(Of T).Unless
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:FluentValidation.AbstractValidator`1.Unless(System.Func{`0,System.Boolean},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.Unless(System.Func{Domain.DTO.CreateUserRequestDTO,System.Boolean},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,System.Boolean},System.Action)
        name: Unless
        nameWithType: AbstractValidator<CreateUserRequestDTO>.Unless
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.CreateUserRequestDTO>.Unless
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,System.Boolean},System.Action)
        name: Unless
        nameWithType: AbstractValidator(Of CreateUserRequestDTO).Unless
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.CreateUserRequestDTO).Unless
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,System.Boolean},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.Unless(System.Func{Domain.DTO.CreateUserRequestDTO,System.Boolean},System.Action)
  FluentValidation.AbstractValidator`1.Unless(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action):
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
        name: Unless
        nameWithType: AbstractValidator<T>.Unless
        qualifiedName: FluentValidation.AbstractValidator<T>.Unless
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
        name: Unless
        nameWithType: AbstractValidator(Of T).Unless
        qualifiedName: FluentValidation.AbstractValidator(Of T).Unless
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:FluentValidation.AbstractValidator`1.Unless(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.Unless(System.Func{Domain.DTO.CreateUserRequestDTO,FluentValidation.ValidationContext{Domain.DTO.CreateUserRequestDTO},System.Boolean},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
        name: Unless
        nameWithType: AbstractValidator<CreateUserRequestDTO>.Unless
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.CreateUserRequestDTO>.Unless
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
        name: Unless
        nameWithType: AbstractValidator(Of CreateUserRequestDTO).Unless
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.CreateUserRequestDTO).Unless
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.Unless(System.Func{Domain.DTO.CreateUserRequestDTO,FluentValidation.ValidationContext{Domain.DTO.CreateUserRequestDTO},System.Boolean},System.Action)
  ? FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: WhenAsync
        nameWithType: AbstractValidator<T>.WhenAsync
        qualifiedName: FluentValidation.AbstractValidator<T>.WhenAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: WhenAsync
        nameWithType: AbstractValidator(Of T).WhenAsync
        qualifiedName: FluentValidation.AbstractValidator(Of T).WhenAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.WhenAsync(System.Func{Domain.DTO.CreateUserRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: WhenAsync
        nameWithType: AbstractValidator<CreateUserRequestDTO>.WhenAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.CreateUserRequestDTO>.WhenAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: WhenAsync
        nameWithType: AbstractValidator(Of CreateUserRequestDTO).WhenAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.CreateUserRequestDTO).WhenAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.WhenAsync(System.Func{Domain.DTO.CreateUserRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  ? FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: WhenAsync
        nameWithType: AbstractValidator<T>.WhenAsync
        qualifiedName: FluentValidation.AbstractValidator<T>.WhenAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`4
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: WhenAsync
        nameWithType: AbstractValidator(Of T).WhenAsync
        qualifiedName: FluentValidation.AbstractValidator(Of T).WhenAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`4
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.WhenAsync(System.Func{Domain.DTO.CreateUserRequestDTO,FluentValidation.ValidationContext{Domain.DTO.CreateUserRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: WhenAsync
        nameWithType: AbstractValidator<CreateUserRequestDTO>.WhenAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.CreateUserRequestDTO>.WhenAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`4
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: WhenAsync
        nameWithType: AbstractValidator(Of CreateUserRequestDTO).WhenAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.CreateUserRequestDTO).WhenAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`4
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.WhenAsync(System.Func{Domain.DTO.CreateUserRequestDTO,FluentValidation.ValidationContext{Domain.DTO.CreateUserRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  ? FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: UnlessAsync
        nameWithType: AbstractValidator<T>.UnlessAsync
        qualifiedName: FluentValidation.AbstractValidator<T>.UnlessAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: UnlessAsync
        nameWithType: AbstractValidator(Of T).UnlessAsync
        qualifiedName: FluentValidation.AbstractValidator(Of T).UnlessAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.UnlessAsync(System.Func{Domain.DTO.CreateUserRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: UnlessAsync
        nameWithType: AbstractValidator<CreateUserRequestDTO>.UnlessAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.CreateUserRequestDTO>.UnlessAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: UnlessAsync
        nameWithType: AbstractValidator(Of CreateUserRequestDTO).UnlessAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.CreateUserRequestDTO).UnlessAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.UnlessAsync(System.Func{Domain.DTO.CreateUserRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  ? FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: UnlessAsync
        nameWithType: AbstractValidator<T>.UnlessAsync
        qualifiedName: FluentValidation.AbstractValidator<T>.UnlessAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`4
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: UnlessAsync
        nameWithType: AbstractValidator(Of T).UnlessAsync
        qualifiedName: FluentValidation.AbstractValidator(Of T).UnlessAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`4
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.UnlessAsync(System.Func{Domain.DTO.CreateUserRequestDTO,FluentValidation.ValidationContext{Domain.DTO.CreateUserRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: UnlessAsync
        nameWithType: AbstractValidator<CreateUserRequestDTO>.UnlessAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.CreateUserRequestDTO>.UnlessAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`4
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: UnlessAsync
        nameWithType: AbstractValidator(Of CreateUserRequestDTO).UnlessAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.CreateUserRequestDTO).UnlessAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`4
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.UnlessAsync(System.Func{Domain.DTO.CreateUserRequestDTO,FluentValidation.ValidationContext{Domain.DTO.CreateUserRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  FluentValidation.AbstractValidator`1.Include(FluentValidation.IValidator{`0}):
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Include(FluentValidation.IValidator{`0})
        name: Include
        nameWithType: AbstractValidator<T>.Include
        qualifiedName: FluentValidation.AbstractValidator<T>.Include
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidator`1
        name: IValidator
        nameWithType: IValidator
        qualifiedName: FluentValidation.IValidator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Include(FluentValidation.IValidator{`0})
        name: Include
        nameWithType: AbstractValidator(Of T).Include
        qualifiedName: FluentValidation.AbstractValidator(Of T).Include
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidator`1
        name: IValidator
        nameWithType: IValidator
        qualifiedName: FluentValidation.IValidator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:FluentValidation.AbstractValidator`1.Include(FluentValidation.IValidator{`0})
  ? FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.Include(FluentValidation.IValidator{Domain.DTO.CreateUserRequestDTO})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Include(FluentValidation.IValidator{`0})
        name: Include
        nameWithType: AbstractValidator<CreateUserRequestDTO>.Include
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.CreateUserRequestDTO>.Include
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidator`1
        name: IValidator
        nameWithType: IValidator
        qualifiedName: FluentValidation.IValidator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Include(FluentValidation.IValidator{`0})
        name: Include
        nameWithType: AbstractValidator(Of CreateUserRequestDTO).Include
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.CreateUserRequestDTO).Include
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidator`1
        name: IValidator
        nameWithType: IValidator
        qualifiedName: FluentValidation.IValidator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Include(FluentValidation.IValidator{`0})
    parent: FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.Include(FluentValidation.IValidator{Domain.DTO.CreateUserRequestDTO})
  FluentValidation.AbstractValidator`1.Include``1(System.Func{`0,``0}):
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Include``1(System.Func{`0,``0})
        name: Include<TValidator>
        nameWithType: AbstractValidator<T>.Include<TValidator>
        qualifiedName: FluentValidation.AbstractValidator<T>.Include<TValidator>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValidator
        nameWithType: TValidator
        qualifiedName: TValidator
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Include``1(System.Func{`0,``0})
        name: Include(Of TValidator)
        nameWithType: AbstractValidator(Of T).Include(Of TValidator)
        qualifiedName: FluentValidation.AbstractValidator(Of T).Include(Of TValidator)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValidator
        nameWithType: TValidator
        qualifiedName: TValidator
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:FluentValidation.AbstractValidator`1.Include``1(System.Func{`0,``0})
  ? FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.Include``1(System.Func{Domain.DTO.CreateUserRequestDTO,{TValidator}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Include``1(System.Func{`0,``0})
        name: Include<TValidator>
        nameWithType: AbstractValidator<CreateUserRequestDTO>.Include<TValidator>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.CreateUserRequestDTO>.Include<TValidator>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValidator
        nameWithType: TValidator
        qualifiedName: TValidator
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Include``1(System.Func{`0,``0})
        name: Include(Of TValidator)
        nameWithType: AbstractValidator(Of CreateUserRequestDTO).Include(Of TValidator)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.CreateUserRequestDTO).Include(Of TValidator)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValidator
        nameWithType: TValidator
        qualifiedName: TValidator
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Include``1(System.Func{`0,``0})
    parent: FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.Include``1(System.Func{Domain.DTO.CreateUserRequestDTO,``0})
  FluentValidation.AbstractValidator`1.GetEnumerator:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.GetEnumerator
        name: GetEnumerator
        nameWithType: AbstractValidator<T>.GetEnumerator
        qualifiedName: FluentValidation.AbstractValidator<T>.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.GetEnumerator
        name: GetEnumerator
        nameWithType: AbstractValidator(Of T).GetEnumerator
        qualifiedName: FluentValidation.AbstractValidator(Of T).GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:FluentValidation.AbstractValidator`1.GetEnumerator
  FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.GetEnumerator:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.GetEnumerator
        name: GetEnumerator
        nameWithType: AbstractValidator<CreateUserRequestDTO>.GetEnumerator
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.CreateUserRequestDTO>.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.GetEnumerator
        name: GetEnumerator
        nameWithType: AbstractValidator(Of CreateUserRequestDTO).GetEnumerator
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.CreateUserRequestDTO).GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.GetEnumerator
    parent: FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.GetEnumerator
  FluentValidation.AbstractValidator`1.System#Collections#IEnumerable#GetEnumerator:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.System#Collections#IEnumerable#GetEnumerator
        name: IEnumerable.GetEnumerator
        nameWithType: AbstractValidator<T>.IEnumerable.GetEnumerator
        qualifiedName: FluentValidation.AbstractValidator<T>.System.Collections.IEnumerable.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.System#Collections#IEnumerable#GetEnumerator
        name: System.Collections.IEnumerable.GetEnumerator
        nameWithType: AbstractValidator(Of T).System.Collections.IEnumerable.GetEnumerator
        qualifiedName: FluentValidation.AbstractValidator(Of T).System.Collections.IEnumerable.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:FluentValidation.AbstractValidator`1.System#Collections#IEnumerable#GetEnumerator
  FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.System#Collections#IEnumerable#GetEnumerator:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.System#Collections#IEnumerable#GetEnumerator
        name: IEnumerable.GetEnumerator
        nameWithType: AbstractValidator<CreateUserRequestDTO>.IEnumerable.GetEnumerator
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.CreateUserRequestDTO>.System.Collections.IEnumerable.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.System#Collections#IEnumerable#GetEnumerator
        name: System.Collections.IEnumerable.GetEnumerator
        nameWithType: AbstractValidator(Of CreateUserRequestDTO).System.Collections.IEnumerable.GetEnumerator
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.CreateUserRequestDTO).System.Collections.IEnumerable.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.System#Collections#IEnumerable#GetEnumerator
    parent: FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.System#Collections#IEnumerable#GetEnumerator
  FluentValidation.AbstractValidator`1.EnsureInstanceNotNull(System.Object):
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.EnsureInstanceNotNull(System.Object)
        name: EnsureInstanceNotNull
        nameWithType: AbstractValidator<T>.EnsureInstanceNotNull
        qualifiedName: FluentValidation.AbstractValidator<T>.EnsureInstanceNotNull
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.EnsureInstanceNotNull(System.Object)
        name: EnsureInstanceNotNull
        nameWithType: AbstractValidator(Of T).EnsureInstanceNotNull
        qualifiedName: FluentValidation.AbstractValidator(Of T).EnsureInstanceNotNull
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:FluentValidation.AbstractValidator`1.EnsureInstanceNotNull(System.Object)
  FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.EnsureInstanceNotNull(System.Object):
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.EnsureInstanceNotNull(System.Object)
        name: EnsureInstanceNotNull
        nameWithType: AbstractValidator<CreateUserRequestDTO>.EnsureInstanceNotNull
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.CreateUserRequestDTO>.EnsureInstanceNotNull
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.EnsureInstanceNotNull(System.Object)
        name: EnsureInstanceNotNull
        nameWithType: AbstractValidator(Of CreateUserRequestDTO).EnsureInstanceNotNull
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.CreateUserRequestDTO).EnsureInstanceNotNull
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.EnsureInstanceNotNull(System.Object)
    parent: FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.EnsureInstanceNotNull(System.Object)
  ? FluentValidation.AbstractValidator`1.PreValidate(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.PreValidate(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
        name: PreValidate
        nameWithType: AbstractValidator<T>.PreValidate
        qualifiedName: FluentValidation.AbstractValidator<T>.PreValidate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.Results.ValidationResult
        name: ValidationResult
        nameWithType: ValidationResult
        qualifiedName: FluentValidation.Results.ValidationResult
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.PreValidate(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
        name: PreValidate
        nameWithType: AbstractValidator(Of T).PreValidate
        qualifiedName: FluentValidation.AbstractValidator(Of T).PreValidate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.Results.ValidationResult
        name: ValidationResult
        nameWithType: ValidationResult
        qualifiedName: FluentValidation.Results.ValidationResult
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:FluentValidation.AbstractValidator`1.PreValidate(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
  ? FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.PreValidate(FluentValidation.ValidationContext{Domain.DTO.CreateUserRequestDTO},FluentValidation.Results.ValidationResult)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.PreValidate(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
        name: PreValidate
        nameWithType: AbstractValidator<CreateUserRequestDTO>.PreValidate
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.CreateUserRequestDTO>.PreValidate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.Results.ValidationResult
        name: ValidationResult
        nameWithType: ValidationResult
        qualifiedName: FluentValidation.Results.ValidationResult
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.PreValidate(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
        name: PreValidate
        nameWithType: AbstractValidator(Of CreateUserRequestDTO).PreValidate
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.CreateUserRequestDTO).PreValidate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.Results.ValidationResult
        name: ValidationResult
        nameWithType: ValidationResult
        qualifiedName: FluentValidation.Results.ValidationResult
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.PreValidate(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
    parent: FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.PreValidate(FluentValidation.ValidationContext{Domain.DTO.CreateUserRequestDTO},FluentValidation.Results.ValidationResult)
  ? FluentValidation.AbstractValidator`1.RaiseValidationException(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RaiseValidationException(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
        name: RaiseValidationException
        nameWithType: AbstractValidator<T>.RaiseValidationException
        qualifiedName: FluentValidation.AbstractValidator<T>.RaiseValidationException
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.Results.ValidationResult
        name: ValidationResult
        nameWithType: ValidationResult
        qualifiedName: FluentValidation.Results.ValidationResult
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.RaiseValidationException(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
        name: RaiseValidationException
        nameWithType: AbstractValidator(Of T).RaiseValidationException
        qualifiedName: FluentValidation.AbstractValidator(Of T).RaiseValidationException
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.Results.ValidationResult
        name: ValidationResult
        nameWithType: ValidationResult
        qualifiedName: FluentValidation.Results.ValidationResult
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:FluentValidation.AbstractValidator`1.RaiseValidationException(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
  ? FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.RaiseValidationException(FluentValidation.ValidationContext{Domain.DTO.CreateUserRequestDTO},FluentValidation.Results.ValidationResult)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RaiseValidationException(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
        name: RaiseValidationException
        nameWithType: AbstractValidator<CreateUserRequestDTO>.RaiseValidationException
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.CreateUserRequestDTO>.RaiseValidationException
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.Results.ValidationResult
        name: ValidationResult
        nameWithType: ValidationResult
        qualifiedName: FluentValidation.Results.ValidationResult
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.RaiseValidationException(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
        name: RaiseValidationException
        nameWithType: AbstractValidator(Of CreateUserRequestDTO).RaiseValidationException
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.CreateUserRequestDTO).RaiseValidationException
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.Results.ValidationResult
        name: ValidationResult
        nameWithType: ValidationResult
        qualifiedName: FluentValidation.Results.ValidationResult
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.RaiseValidationException(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
    parent: FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.RaiseValidationException(FluentValidation.ValidationContext{Domain.DTO.CreateUserRequestDTO},FluentValidation.Results.ValidationResult)
  FluentValidation.AbstractValidator`1.CascadeMode:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.CascadeMode
        name: CascadeMode
        nameWithType: AbstractValidator<T>.CascadeMode
        qualifiedName: FluentValidation.AbstractValidator<T>.CascadeMode
        isExternal: true
      VB:
      - id: FluentValidation.AbstractValidator`1.CascadeMode
        name: CascadeMode
        nameWithType: AbstractValidator(Of T).CascadeMode
        qualifiedName: FluentValidation.AbstractValidator(Of T).CascadeMode
        isExternal: true
    isDefinition: true
    commentId: P:FluentValidation.AbstractValidator`1.CascadeMode
  FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.CascadeMode:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.CascadeMode
        name: CascadeMode
        nameWithType: AbstractValidator<CreateUserRequestDTO>.CascadeMode
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.CreateUserRequestDTO>.CascadeMode
        isExternal: true
      VB:
      - id: FluentValidation.AbstractValidator`1.CascadeMode
        name: CascadeMode
        nameWithType: AbstractValidator(Of CreateUserRequestDTO).CascadeMode
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.CreateUserRequestDTO).CascadeMode
        isExternal: true
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.CascadeMode
    parent: FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}
    commentId: P:FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.CascadeMode
  FluentValidation.AbstractValidator`1.ClassLevelCascadeMode:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.ClassLevelCascadeMode
        name: ClassLevelCascadeMode
        nameWithType: AbstractValidator<T>.ClassLevelCascadeMode
        qualifiedName: FluentValidation.AbstractValidator<T>.ClassLevelCascadeMode
        isExternal: true
      VB:
      - id: FluentValidation.AbstractValidator`1.ClassLevelCascadeMode
        name: ClassLevelCascadeMode
        nameWithType: AbstractValidator(Of T).ClassLevelCascadeMode
        qualifiedName: FluentValidation.AbstractValidator(Of T).ClassLevelCascadeMode
        isExternal: true
    isDefinition: true
    commentId: P:FluentValidation.AbstractValidator`1.ClassLevelCascadeMode
  FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.ClassLevelCascadeMode:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.ClassLevelCascadeMode
        name: ClassLevelCascadeMode
        nameWithType: AbstractValidator<CreateUserRequestDTO>.ClassLevelCascadeMode
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.CreateUserRequestDTO>.ClassLevelCascadeMode
        isExternal: true
      VB:
      - id: FluentValidation.AbstractValidator`1.ClassLevelCascadeMode
        name: ClassLevelCascadeMode
        nameWithType: AbstractValidator(Of CreateUserRequestDTO).ClassLevelCascadeMode
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.CreateUserRequestDTO).ClassLevelCascadeMode
        isExternal: true
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.ClassLevelCascadeMode
    parent: FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}
    commentId: P:FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.ClassLevelCascadeMode
  FluentValidation.AbstractValidator`1.RuleLevelCascadeMode:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RuleLevelCascadeMode
        name: RuleLevelCascadeMode
        nameWithType: AbstractValidator<T>.RuleLevelCascadeMode
        qualifiedName: FluentValidation.AbstractValidator<T>.RuleLevelCascadeMode
        isExternal: true
      VB:
      - id: FluentValidation.AbstractValidator`1.RuleLevelCascadeMode
        name: RuleLevelCascadeMode
        nameWithType: AbstractValidator(Of T).RuleLevelCascadeMode
        qualifiedName: FluentValidation.AbstractValidator(Of T).RuleLevelCascadeMode
        isExternal: true
    isDefinition: true
    commentId: P:FluentValidation.AbstractValidator`1.RuleLevelCascadeMode
  FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.RuleLevelCascadeMode:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RuleLevelCascadeMode
        name: RuleLevelCascadeMode
        nameWithType: AbstractValidator<CreateUserRequestDTO>.RuleLevelCascadeMode
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.CreateUserRequestDTO>.RuleLevelCascadeMode
        isExternal: true
      VB:
      - id: FluentValidation.AbstractValidator`1.RuleLevelCascadeMode
        name: RuleLevelCascadeMode
        nameWithType: AbstractValidator(Of CreateUserRequestDTO).RuleLevelCascadeMode
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.CreateUserRequestDTO).RuleLevelCascadeMode
        isExternal: true
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.RuleLevelCascadeMode
    parent: FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}
    commentId: P:FluentValidation.AbstractValidator{Domain.DTO.CreateUserRequestDTO}.RuleLevelCascadeMode
  FluentValidation.IValidator`1:
    name:
      CSharp:
      - id: FluentValidation.IValidator`1
        name: IValidator
        nameWithType: IValidator
        qualifiedName: FluentValidation.IValidator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: FluentValidation.IValidator`1
        name: IValidator
        nameWithType: IValidator
        qualifiedName: FluentValidation.IValidator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:FluentValidation.IValidator`1
  FluentValidation.IValidator{Domain.DTO.CreateUserRequestDTO}:
    name:
      CSharp:
      - id: FluentValidation.IValidator`1
        name: IValidator
        nameWithType: IValidator
        qualifiedName: FluentValidation.IValidator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: FluentValidation.IValidator`1
        name: IValidator
        nameWithType: IValidator
        qualifiedName: FluentValidation.IValidator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.CreateUserRequestDTO
        name: CreateUserRequestDTO
        nameWithType: CreateUserRequestDTO
        qualifiedName: Domain.DTO.CreateUserRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.IValidator`1
    parent: FluentValidation
    commentId: T:FluentValidation.IValidator{Domain.DTO.CreateUserRequestDTO}
  FluentValidation.IValidator:
    name:
      CSharp:
      - id: FluentValidation.IValidator
        name: IValidator
        nameWithType: IValidator
        qualifiedName: FluentValidation.IValidator
        isExternal: true
      VB:
      - id: FluentValidation.IValidator
        name: IValidator
        nameWithType: IValidator
        qualifiedName: FluentValidation.IValidator
        isExternal: true
    isDefinition: true
    parent: FluentValidation
    commentId: T:FluentValidation.IValidator
  System.Collections.Generic.IEnumerable`1:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.IEnumerable`1
  System.Collections.Generic:
    name:
      CSharp:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
        isExternal: true
      VB:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
    isDefinition: true
    commentId: N:System.Collections.Generic
  System.Collections.Generic.IEnumerable{FluentValidation.IValidationRule}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: FluentValidation.IValidationRule
        name: IValidationRule
        nameWithType: IValidationRule
        qualifiedName: FluentValidation.IValidationRule
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: FluentValidation.IValidationRule
        name: IValidationRule
        nameWithType: IValidationRule
        qualifiedName: FluentValidation.IValidationRule
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerable{FluentValidation.IValidationRule}
  System.Collections:
    name:
      CSharp:
      - name: System.Collections
        nameWithType: System.Collections
        qualifiedName: System.Collections
        isExternal: true
      VB:
      - name: System.Collections
        nameWithType: System.Collections
        qualifiedName: System.Collections
    isDefinition: true
    commentId: N:System.Collections
  System.Collections.IEnumerable:
    name:
      CSharp:
      - id: System.Collections.IEnumerable
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.IEnumerable
        isExternal: true
      VB:
      - id: System.Collections.IEnumerable
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.IEnumerable
        isExternal: true
    isDefinition: true
    parent: System.Collections
    commentId: T:System.Collections.IEnumerable
  Domain.DTO.CreateUserRequestDTOValidator.#ctor*:
    name:
      CSharp:
      - id: Domain.DTO.CreateUserRequestDTOValidator.#ctor*
        name: CreateUserRequestDTOValidator
        nameWithType: CreateUserRequestDTOValidator.CreateUserRequestDTOValidator
        qualifiedName: Domain.DTO.CreateUserRequestDTOValidator.CreateUserRequestDTOValidator
      VB:
      - id: Domain.DTO.CreateUserRequestDTOValidator.#ctor*
        name: CreateUserRequestDTOValidator
        nameWithType: CreateUserRequestDTOValidator.CreateUserRequestDTOValidator
        qualifiedName: Domain.DTO.CreateUserRequestDTOValidator.CreateUserRequestDTOValidator
    isDefinition: true
    commentId: Overload:Domain.DTO.CreateUserRequestDTOValidator.#ctor
  Domain.DTO.CreateUserRequestDTOValidator:
    name:
      CSharp:
      - id: Domain.DTO.CreateUserRequestDTOValidator
        name: CreateUserRequestDTOValidator
        nameWithType: CreateUserRequestDTOValidator
        qualifiedName: Domain.DTO.CreateUserRequestDTOValidator
      VB:
      - id: Domain.DTO.CreateUserRequestDTOValidator
        name: CreateUserRequestDTOValidator
        nameWithType: CreateUserRequestDTOValidator
        qualifiedName: Domain.DTO.CreateUserRequestDTOValidator
    isDefinition: true
    commentId: T:Domain.DTO.CreateUserRequestDTOValidator
  Domain.DTO:
    name:
      CSharp:
      - name: Domain.DTO
        nameWithType: Domain.DTO
        qualifiedName: Domain.DTO
      VB:
      - name: Domain.DTO
        nameWithType: Domain.DTO
        qualifiedName: Domain.DTO
    isDefinition: true
    commentId: N:Domain.DTO
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.UserId*:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.UserId*
        name: UserId
        nameWithType: CreateReplyRequestDTO.UserId
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.UserId
      VB:
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.UserId*
        name: UserId
        nameWithType: CreateReplyRequestDTO.UserId
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.UserId
    isDefinition: true
    commentId: Overload:Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.UserId
  Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.ReplyText*:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.ReplyText*
        name: ReplyText
        nameWithType: CreateReplyRequestDTO.ReplyText
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.ReplyText
      VB:
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.ReplyText*
        name: ReplyText
        nameWithType: CreateReplyRequestDTO.ReplyText
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.ReplyText
    isDefinition: true
    commentId: Overload:Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.ReplyText
  System.Nullable`1:
    name:
      CSharp:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Nullable`1
  System.Nullable{System.Int32}:
    name:
      CSharp:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Nullable`1
    parent: System
    commentId: T:System.Nullable{System.Int32}
  Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.ReplyParentId*:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.ReplyParentId*
        name: ReplyParentId
        nameWithType: CreateReplyRequestDTO.ReplyParentId
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.ReplyParentId
      VB:
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.ReplyParentId*
        name: ReplyParentId
        nameWithType: CreateReplyRequestDTO.ReplyParentId
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.ReplyParentId
    isDefinition: true
    commentId: Overload:Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.ReplyParentId
  Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.ReplyTopicId*:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.ReplyTopicId*
        name: ReplyTopicId
        nameWithType: CreateReplyRequestDTO.ReplyTopicId
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.ReplyTopicId
      VB:
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.ReplyTopicId*
        name: ReplyTopicId
        nameWithType: CreateReplyRequestDTO.ReplyTopicId
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.ReplyTopicId
    isDefinition: true
    commentId: Overload:Domain.DTO.Requestes.Replies.CreateReplyRequestDTO.ReplyTopicId
  Domain.DTO.Requestes.Replies.CreateReplyRequestDTO:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      VB:
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
    isDefinition: true
    commentId: T:Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1
        name: AbstractValidator
        nameWithType: AbstractValidator
        qualifiedName: FluentValidation.AbstractValidator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: FluentValidation.AbstractValidator`1
        name: AbstractValidator
        nameWithType: AbstractValidator
        qualifiedName: FluentValidation.AbstractValidator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1
    parent: FluentValidation
    commentId: T:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
        name: IValidator.Validate
        nameWithType: AbstractValidator<CreateReplyRequestDTO>.IValidator.Validate
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.CreateReplyRequestDTO>.FluentValidation.IValidator.Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidationContext
        name: IValidationContext
        nameWithType: IValidationContext
        qualifiedName: FluentValidation.IValidationContext
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
        name: FluentValidation.IValidator.Validate
        nameWithType: AbstractValidator(Of CreateReplyRequestDTO).FluentValidation.IValidator.Validate
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.CreateReplyRequestDTO).FluentValidation.IValidator.Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidationContext
        name: IValidationContext
        nameWithType: IValidationContext
        qualifiedName: FluentValidation.IValidationContext
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
        name: IValidator.ValidateAsync
        nameWithType: AbstractValidator<CreateReplyRequestDTO>.IValidator.ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.CreateReplyRequestDTO>.FluentValidation.IValidator.ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidationContext
        name: IValidationContext
        nameWithType: IValidationContext
        qualifiedName: FluentValidation.IValidationContext
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
        name: FluentValidation.IValidator.ValidateAsync
        nameWithType: AbstractValidator(Of CreateReplyRequestDTO).FluentValidation.IValidator.ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.CreateReplyRequestDTO).FluentValidation.IValidator.ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidationContext
        name: IValidationContext
        nameWithType: IValidationContext
        qualifiedName: FluentValidation.IValidationContext
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.Validate(Domain.DTO.Requestes.Replies.CreateReplyRequestDTO)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Validate(`0)
        name: Validate
        nameWithType: AbstractValidator<CreateReplyRequestDTO>.Validate
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.CreateReplyRequestDTO>.Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Validate(`0)
        name: Validate
        nameWithType: AbstractValidator(Of CreateReplyRequestDTO).Validate
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.CreateReplyRequestDTO).Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Validate(`0)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.Validate(Domain.DTO.Requestes.Replies.CreateReplyRequestDTO)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.ValidateAsync(Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,System.Threading.CancellationToken)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.ValidateAsync(`0,System.Threading.CancellationToken)
        name: ValidateAsync
        nameWithType: AbstractValidator<CreateReplyRequestDTO>.ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.CreateReplyRequestDTO>.ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.ValidateAsync(`0,System.Threading.CancellationToken)
        name: ValidateAsync
        nameWithType: AbstractValidator(Of CreateReplyRequestDTO).ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.CreateReplyRequestDTO).ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.ValidateAsync(`0,System.Threading.CancellationToken)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.ValidateAsync(Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,System.Threading.CancellationToken)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.Validate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Validate(FluentValidation.ValidationContext{`0})
        name: Validate
        nameWithType: AbstractValidator<CreateReplyRequestDTO>.Validate
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.CreateReplyRequestDTO>.Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Validate(FluentValidation.ValidationContext{`0})
        name: Validate
        nameWithType: AbstractValidator(Of CreateReplyRequestDTO).Validate
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.CreateReplyRequestDTO).Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Validate(FluentValidation.ValidationContext{`0})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.Validate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.ValidateAsync(FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO},System.Threading.CancellationToken)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.ValidateAsync(FluentValidation.ValidationContext{`0},System.Threading.CancellationToken)
        name: ValidateAsync
        nameWithType: AbstractValidator<CreateReplyRequestDTO>.ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.CreateReplyRequestDTO>.ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.ValidateAsync(FluentValidation.ValidationContext{`0},System.Threading.CancellationToken)
        name: ValidateAsync
        nameWithType: AbstractValidator(Of CreateReplyRequestDTO).ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.CreateReplyRequestDTO).ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.ValidateAsync(FluentValidation.ValidationContext{`0},System.Threading.CancellationToken)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.ValidateAsync(FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO},System.Threading.CancellationToken)
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.CreateDescriptor:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.CreateDescriptor
        name: CreateDescriptor
        nameWithType: AbstractValidator<CreateReplyRequestDTO>.CreateDescriptor
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.CreateReplyRequestDTO>.CreateDescriptor
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.CreateDescriptor
        name: CreateDescriptor
        nameWithType: AbstractValidator(Of CreateReplyRequestDTO).CreateDescriptor
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.CreateReplyRequestDTO).CreateDescriptor
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.CreateDescriptor
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.CreateDescriptor
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
        name: IValidator.CanValidateInstancesOfType
        nameWithType: AbstractValidator<CreateReplyRequestDTO>.IValidator.CanValidateInstancesOfType
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.CreateReplyRequestDTO>.FluentValidation.IValidator.CanValidateInstancesOfType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
        name: FluentValidation.IValidator.CanValidateInstancesOfType
        nameWithType: AbstractValidator(Of CreateReplyRequestDTO).FluentValidation.IValidator.CanValidateInstancesOfType
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.CreateReplyRequestDTO).FluentValidation.IValidator.CanValidateInstancesOfType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.RuleFor``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,{TProperty}}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
        name: RuleFor<TProperty>
        nameWithType: AbstractValidator<CreateReplyRequestDTO>.RuleFor<TProperty>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.CreateReplyRequestDTO>.RuleFor<TProperty>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
        name: RuleFor(Of TProperty)
        nameWithType: AbstractValidator(Of CreateReplyRequestDTO).RuleFor(Of TProperty)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.CreateReplyRequestDTO).RuleFor(Of TProperty)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.RuleFor``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,``0}})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,{TProperty}}},System.Func{{TProperty},{TTransformed}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``1})
        name: Transform<TProperty, TTransformed>
        nameWithType: AbstractValidator<CreateReplyRequestDTO>.Transform<TProperty, TTransformed>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.CreateReplyRequestDTO>.Transform<TProperty, TTransformed>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``1})
        name: Transform(Of TProperty, TTransformed)
        nameWithType: AbstractValidator(Of CreateReplyRequestDTO).Transform(Of TProperty, TTransformed)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.CreateReplyRequestDTO).Transform(Of TProperty, TTransformed)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``1})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,``0}},System.Func{``0,``1})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,{TProperty}}},System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,{TProperty},{TTransformed}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{`0,``0,``1})
        name: Transform<TProperty, TTransformed>
        nameWithType: AbstractValidator<CreateReplyRequestDTO>.Transform<TProperty, TTransformed>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.CreateReplyRequestDTO>.Transform<TProperty, TTransformed>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{`0,``0,``1})
        name: Transform(Of TProperty, TTransformed)
        nameWithType: AbstractValidator(Of CreateReplyRequestDTO).Transform(Of TProperty, TTransformed)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.CreateReplyRequestDTO).Transform(Of TProperty, TTransformed)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{`0,``0,``1})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,``0}},System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,``0,``1})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})
        name: RuleForEach<TElement>
        nameWithType: AbstractValidator<CreateReplyRequestDTO>.RuleForEach<TElement>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.CreateReplyRequestDTO>.RuleForEach<TElement>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})
        name: RuleForEach(Of TElement)
        nameWithType: AbstractValidator(Of CreateReplyRequestDTO).RuleForEach(Of TElement)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.CreateReplyRequestDTO).RuleForEach(Of TElement)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,System.Collections.Generic.IEnumerable{``0}}})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}},System.Func{{TElement},{TTransformed}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1})
        name: TransformForEach<TElement, TTransformed>
        nameWithType: AbstractValidator<CreateReplyRequestDTO>.TransformForEach<TElement, TTransformed>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.CreateReplyRequestDTO>.TransformForEach<TElement, TTransformed>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1})
        name: TransformForEach(Of TElement, TTransformed)
        nameWithType: AbstractValidator(Of CreateReplyRequestDTO).TransformForEach(Of TElement, TTransformed)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.CreateReplyRequestDTO).TransformForEach(Of TElement, TTransformed)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}},System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,{TElement},{TTransformed}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{`0,``0,``1})
        name: TransformForEach<TElement, TTransformed>
        nameWithType: AbstractValidator<CreateReplyRequestDTO>.TransformForEach<TElement, TTransformed>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.CreateReplyRequestDTO>.TransformForEach<TElement, TTransformed>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{`0,``0,``1})
        name: TransformForEach(Of TElement, TTransformed)
        nameWithType: AbstractValidator(Of CreateReplyRequestDTO).TransformForEach(Of TElement, TTransformed)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.CreateReplyRequestDTO).TransformForEach(Of TElement, TTransformed)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{`0,``0,``1})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,System.Collections.Generic.IEnumerable{``0}}},System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,``0,``1})
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.RuleSet(System.String,System.Action):
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RuleSet(System.String,System.Action)
        name: RuleSet
        nameWithType: AbstractValidator<CreateReplyRequestDTO>.RuleSet
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.CreateReplyRequestDTO>.RuleSet
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.RuleSet(System.String,System.Action)
        name: RuleSet
        nameWithType: AbstractValidator(Of CreateReplyRequestDTO).RuleSet
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.CreateReplyRequestDTO).RuleSet
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.RuleSet(System.String,System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.RuleSet(System.String,System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.When(System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,System.Boolean},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.When(System.Func{`0,System.Boolean},System.Action)
        name: When
        nameWithType: AbstractValidator<CreateReplyRequestDTO>.When
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.CreateReplyRequestDTO>.When
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.When(System.Func{`0,System.Boolean},System.Action)
        name: When
        nameWithType: AbstractValidator(Of CreateReplyRequestDTO).When
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.CreateReplyRequestDTO).When
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.When(System.Func{`0,System.Boolean},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.When(System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,System.Boolean},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.When(System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO},System.Boolean},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.When(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
        name: When
        nameWithType: AbstractValidator<CreateReplyRequestDTO>.When
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.CreateReplyRequestDTO>.When
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.When(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
        name: When
        nameWithType: AbstractValidator(Of CreateReplyRequestDTO).When
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.CreateReplyRequestDTO).When
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.When(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.When(System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO},System.Boolean},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,System.Boolean},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,System.Boolean},System.Action)
        name: Unless
        nameWithType: AbstractValidator<CreateReplyRequestDTO>.Unless
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.CreateReplyRequestDTO>.Unless
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,System.Boolean},System.Action)
        name: Unless
        nameWithType: AbstractValidator(Of CreateReplyRequestDTO).Unless
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.CreateReplyRequestDTO).Unless
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,System.Boolean},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,System.Boolean},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO},System.Boolean},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
        name: Unless
        nameWithType: AbstractValidator<CreateReplyRequestDTO>.Unless
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.CreateReplyRequestDTO>.Unless
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
        name: Unless
        nameWithType: AbstractValidator(Of CreateReplyRequestDTO).Unless
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.CreateReplyRequestDTO).Unless
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO},System.Boolean},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: WhenAsync
        nameWithType: AbstractValidator<CreateReplyRequestDTO>.WhenAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.CreateReplyRequestDTO>.WhenAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: WhenAsync
        nameWithType: AbstractValidator(Of CreateReplyRequestDTO).WhenAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.CreateReplyRequestDTO).WhenAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: WhenAsync
        nameWithType: AbstractValidator<CreateReplyRequestDTO>.WhenAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.CreateReplyRequestDTO>.WhenAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`4
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: WhenAsync
        nameWithType: AbstractValidator(Of CreateReplyRequestDTO).WhenAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.CreateReplyRequestDTO).WhenAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`4
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: UnlessAsync
        nameWithType: AbstractValidator<CreateReplyRequestDTO>.UnlessAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.CreateReplyRequestDTO>.UnlessAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: UnlessAsync
        nameWithType: AbstractValidator(Of CreateReplyRequestDTO).UnlessAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.CreateReplyRequestDTO).UnlessAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: UnlessAsync
        nameWithType: AbstractValidator<CreateReplyRequestDTO>.UnlessAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.CreateReplyRequestDTO>.UnlessAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`4
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: UnlessAsync
        nameWithType: AbstractValidator(Of CreateReplyRequestDTO).UnlessAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.CreateReplyRequestDTO).UnlessAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`4
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.Include(FluentValidation.IValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Include(FluentValidation.IValidator{`0})
        name: Include
        nameWithType: AbstractValidator<CreateReplyRequestDTO>.Include
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.CreateReplyRequestDTO>.Include
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidator`1
        name: IValidator
        nameWithType: IValidator
        qualifiedName: FluentValidation.IValidator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Include(FluentValidation.IValidator{`0})
        name: Include
        nameWithType: AbstractValidator(Of CreateReplyRequestDTO).Include
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.CreateReplyRequestDTO).Include
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidator`1
        name: IValidator
        nameWithType: IValidator
        qualifiedName: FluentValidation.IValidator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Include(FluentValidation.IValidator{`0})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.Include(FluentValidation.IValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.Include``1(System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,{TValidator}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Include``1(System.Func{`0,``0})
        name: Include<TValidator>
        nameWithType: AbstractValidator<CreateReplyRequestDTO>.Include<TValidator>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.CreateReplyRequestDTO>.Include<TValidator>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValidator
        nameWithType: TValidator
        qualifiedName: TValidator
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Include``1(System.Func{`0,``0})
        name: Include(Of TValidator)
        nameWithType: AbstractValidator(Of CreateReplyRequestDTO).Include(Of TValidator)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.CreateReplyRequestDTO).Include(Of TValidator)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValidator
        nameWithType: TValidator
        qualifiedName: TValidator
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Include``1(System.Func{`0,``0})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.Include``1(System.Func{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO,``0})
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.GetEnumerator:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.GetEnumerator
        name: GetEnumerator
        nameWithType: AbstractValidator<CreateReplyRequestDTO>.GetEnumerator
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.CreateReplyRequestDTO>.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.GetEnumerator
        name: GetEnumerator
        nameWithType: AbstractValidator(Of CreateReplyRequestDTO).GetEnumerator
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.CreateReplyRequestDTO).GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.GetEnumerator
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.GetEnumerator
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.System#Collections#IEnumerable#GetEnumerator
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.System#Collections#IEnumerable#GetEnumerator
        name: IEnumerable.GetEnumerator
        nameWithType: AbstractValidator<CreateReplyRequestDTO>.IEnumerable.GetEnumerator
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.CreateReplyRequestDTO>.System.Collections.IEnumerable.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.System#Collections#IEnumerable#GetEnumerator
        name: System.Collections.IEnumerable.GetEnumerator
        nameWithType: AbstractValidator(Of CreateReplyRequestDTO).System.Collections.IEnumerable.GetEnumerator
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.CreateReplyRequestDTO).System.Collections.IEnumerable.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.System#Collections#IEnumerable#GetEnumerator
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.System#Collections#IEnumerable#GetEnumerator
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.EnsureInstanceNotNull(System.Object):
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.EnsureInstanceNotNull(System.Object)
        name: EnsureInstanceNotNull
        nameWithType: AbstractValidator<CreateReplyRequestDTO>.EnsureInstanceNotNull
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.CreateReplyRequestDTO>.EnsureInstanceNotNull
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.EnsureInstanceNotNull(System.Object)
        name: EnsureInstanceNotNull
        nameWithType: AbstractValidator(Of CreateReplyRequestDTO).EnsureInstanceNotNull
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.CreateReplyRequestDTO).EnsureInstanceNotNull
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.EnsureInstanceNotNull(System.Object)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.EnsureInstanceNotNull(System.Object)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.PreValidate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO},FluentValidation.Results.ValidationResult)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.PreValidate(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
        name: PreValidate
        nameWithType: AbstractValidator<CreateReplyRequestDTO>.PreValidate
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.CreateReplyRequestDTO>.PreValidate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.Results.ValidationResult
        name: ValidationResult
        nameWithType: ValidationResult
        qualifiedName: FluentValidation.Results.ValidationResult
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.PreValidate(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
        name: PreValidate
        nameWithType: AbstractValidator(Of CreateReplyRequestDTO).PreValidate
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.CreateReplyRequestDTO).PreValidate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.Results.ValidationResult
        name: ValidationResult
        nameWithType: ValidationResult
        qualifiedName: FluentValidation.Results.ValidationResult
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.PreValidate(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.PreValidate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO},FluentValidation.Results.ValidationResult)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.RaiseValidationException(FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO},FluentValidation.Results.ValidationResult)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RaiseValidationException(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
        name: RaiseValidationException
        nameWithType: AbstractValidator<CreateReplyRequestDTO>.RaiseValidationException
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.CreateReplyRequestDTO>.RaiseValidationException
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.Results.ValidationResult
        name: ValidationResult
        nameWithType: ValidationResult
        qualifiedName: FluentValidation.Results.ValidationResult
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.RaiseValidationException(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
        name: RaiseValidationException
        nameWithType: AbstractValidator(Of CreateReplyRequestDTO).RaiseValidationException
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.CreateReplyRequestDTO).RaiseValidationException
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.Results.ValidationResult
        name: ValidationResult
        nameWithType: ValidationResult
        qualifiedName: FluentValidation.Results.ValidationResult
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.RaiseValidationException(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.RaiseValidationException(FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO},FluentValidation.Results.ValidationResult)
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.CascadeMode:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.CascadeMode
        name: CascadeMode
        nameWithType: AbstractValidator<CreateReplyRequestDTO>.CascadeMode
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.CreateReplyRequestDTO>.CascadeMode
        isExternal: true
      VB:
      - id: FluentValidation.AbstractValidator`1.CascadeMode
        name: CascadeMode
        nameWithType: AbstractValidator(Of CreateReplyRequestDTO).CascadeMode
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.CreateReplyRequestDTO).CascadeMode
        isExternal: true
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.CascadeMode
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
    commentId: P:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.CascadeMode
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.ClassLevelCascadeMode:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.ClassLevelCascadeMode
        name: ClassLevelCascadeMode
        nameWithType: AbstractValidator<CreateReplyRequestDTO>.ClassLevelCascadeMode
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.CreateReplyRequestDTO>.ClassLevelCascadeMode
        isExternal: true
      VB:
      - id: FluentValidation.AbstractValidator`1.ClassLevelCascadeMode
        name: ClassLevelCascadeMode
        nameWithType: AbstractValidator(Of CreateReplyRequestDTO).ClassLevelCascadeMode
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.CreateReplyRequestDTO).ClassLevelCascadeMode
        isExternal: true
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.ClassLevelCascadeMode
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
    commentId: P:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.ClassLevelCascadeMode
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.RuleLevelCascadeMode:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RuleLevelCascadeMode
        name: RuleLevelCascadeMode
        nameWithType: AbstractValidator<CreateReplyRequestDTO>.RuleLevelCascadeMode
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.CreateReplyRequestDTO>.RuleLevelCascadeMode
        isExternal: true
      VB:
      - id: FluentValidation.AbstractValidator`1.RuleLevelCascadeMode
        name: RuleLevelCascadeMode
        nameWithType: AbstractValidator(Of CreateReplyRequestDTO).RuleLevelCascadeMode
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.CreateReplyRequestDTO).RuleLevelCascadeMode
        isExternal: true
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.RuleLevelCascadeMode
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
    commentId: P:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}.RuleLevelCascadeMode
  FluentValidation.IValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}:
    name:
      CSharp:
      - id: FluentValidation.IValidator`1
        name: IValidator
        nameWithType: IValidator
        qualifiedName: FluentValidation.IValidator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: FluentValidation.IValidator`1
        name: IValidator
        nameWithType: IValidator
        qualifiedName: FluentValidation.IValidator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
        name: CreateReplyRequestDTO
        nameWithType: CreateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.IValidator`1
    parent: FluentValidation
    commentId: T:FluentValidation.IValidator{Domain.DTO.Requestes.Replies.CreateReplyRequestDTO}
  Domain.DTO.Requestes.Replies.CreateReplyRequestDTOValidator.#ctor*:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTOValidator.#ctor*
        name: CreateReplyRequestDTOValidator
        nameWithType: CreateReplyRequestDTOValidator.CreateReplyRequestDTOValidator
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTOValidator.CreateReplyRequestDTOValidator
      VB:
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTOValidator.#ctor*
        name: CreateReplyRequestDTOValidator
        nameWithType: CreateReplyRequestDTOValidator.CreateReplyRequestDTOValidator
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTOValidator.CreateReplyRequestDTOValidator
    isDefinition: true
    commentId: Overload:Domain.DTO.Requestes.Replies.CreateReplyRequestDTOValidator.#ctor
  Domain.DTO.Requestes.Replies.CreateReplyRequestDTOValidator:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTOValidator
        name: CreateReplyRequestDTOValidator
        nameWithType: CreateReplyRequestDTOValidator
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTOValidator
      VB:
      - id: Domain.DTO.Requestes.Replies.CreateReplyRequestDTOValidator
        name: CreateReplyRequestDTOValidator
        nameWithType: CreateReplyRequestDTOValidator
        qualifiedName: Domain.DTO.Requestes.Replies.CreateReplyRequestDTOValidator
    isDefinition: true
    commentId: T:Domain.DTO.Requestes.Replies.CreateReplyRequestDTOValidator
  Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO.ReplyText*:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO.ReplyText*
        name: ReplyText
        nameWithType: UpdateReplyRequestDTO.ReplyText
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO.ReplyText
      VB:
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO.ReplyText*
        name: ReplyText
        nameWithType: UpdateReplyRequestDTO.ReplyText
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO.ReplyText
    isDefinition: true
    commentId: Overload:Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO.ReplyText
  Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO.ReplyId*:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO.ReplyId*
        name: ReplyId
        nameWithType: UpdateReplyRequestDTO.ReplyId
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO.ReplyId
      VB:
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO.ReplyId*
        name: ReplyId
        nameWithType: UpdateReplyRequestDTO.ReplyId
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO.ReplyId
    isDefinition: true
    commentId: Overload:Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO.ReplyId
  Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO.IdUser*:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO.IdUser*
        name: IdUser
        nameWithType: UpdateReplyRequestDTO.IdUser
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO.IdUser
      VB:
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO.IdUser*
        name: IdUser
        nameWithType: UpdateReplyRequestDTO.IdUser
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO.IdUser
    isDefinition: true
    commentId: Overload:Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO.IdUser
  Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      VB:
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
    isDefinition: true
    commentId: T:Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1
        name: AbstractValidator
        nameWithType: AbstractValidator
        qualifiedName: FluentValidation.AbstractValidator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: FluentValidation.AbstractValidator`1
        name: AbstractValidator
        nameWithType: AbstractValidator
        qualifiedName: FluentValidation.AbstractValidator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1
    parent: FluentValidation
    commentId: T:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
        name: IValidator.Validate
        nameWithType: AbstractValidator<UpdateReplyRequestDTO>.IValidator.Validate
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO>.FluentValidation.IValidator.Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidationContext
        name: IValidationContext
        nameWithType: IValidationContext
        qualifiedName: FluentValidation.IValidationContext
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
        name: FluentValidation.IValidator.Validate
        nameWithType: AbstractValidator(Of UpdateReplyRequestDTO).FluentValidation.IValidator.Validate
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO).FluentValidation.IValidator.Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidationContext
        name: IValidationContext
        nameWithType: IValidationContext
        qualifiedName: FluentValidation.IValidationContext
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
        name: IValidator.ValidateAsync
        nameWithType: AbstractValidator<UpdateReplyRequestDTO>.IValidator.ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO>.FluentValidation.IValidator.ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidationContext
        name: IValidationContext
        nameWithType: IValidationContext
        qualifiedName: FluentValidation.IValidationContext
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
        name: FluentValidation.IValidator.ValidateAsync
        nameWithType: AbstractValidator(Of UpdateReplyRequestDTO).FluentValidation.IValidator.ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO).FluentValidation.IValidator.ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidationContext
        name: IValidationContext
        nameWithType: IValidationContext
        qualifiedName: FluentValidation.IValidationContext
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.Validate(Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Validate(`0)
        name: Validate
        nameWithType: AbstractValidator<UpdateReplyRequestDTO>.Validate
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO>.Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Validate(`0)
        name: Validate
        nameWithType: AbstractValidator(Of UpdateReplyRequestDTO).Validate
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO).Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Validate(`0)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.Validate(Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.ValidateAsync(Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,System.Threading.CancellationToken)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.ValidateAsync(`0,System.Threading.CancellationToken)
        name: ValidateAsync
        nameWithType: AbstractValidator<UpdateReplyRequestDTO>.ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO>.ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.ValidateAsync(`0,System.Threading.CancellationToken)
        name: ValidateAsync
        nameWithType: AbstractValidator(Of UpdateReplyRequestDTO).ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO).ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.ValidateAsync(`0,System.Threading.CancellationToken)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.ValidateAsync(Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,System.Threading.CancellationToken)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.Validate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Validate(FluentValidation.ValidationContext{`0})
        name: Validate
        nameWithType: AbstractValidator<UpdateReplyRequestDTO>.Validate
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO>.Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Validate(FluentValidation.ValidationContext{`0})
        name: Validate
        nameWithType: AbstractValidator(Of UpdateReplyRequestDTO).Validate
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO).Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Validate(FluentValidation.ValidationContext{`0})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.Validate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.ValidateAsync(FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO},System.Threading.CancellationToken)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.ValidateAsync(FluentValidation.ValidationContext{`0},System.Threading.CancellationToken)
        name: ValidateAsync
        nameWithType: AbstractValidator<UpdateReplyRequestDTO>.ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO>.ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.ValidateAsync(FluentValidation.ValidationContext{`0},System.Threading.CancellationToken)
        name: ValidateAsync
        nameWithType: AbstractValidator(Of UpdateReplyRequestDTO).ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO).ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.ValidateAsync(FluentValidation.ValidationContext{`0},System.Threading.CancellationToken)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.ValidateAsync(FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO},System.Threading.CancellationToken)
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.CreateDescriptor:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.CreateDescriptor
        name: CreateDescriptor
        nameWithType: AbstractValidator<UpdateReplyRequestDTO>.CreateDescriptor
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO>.CreateDescriptor
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.CreateDescriptor
        name: CreateDescriptor
        nameWithType: AbstractValidator(Of UpdateReplyRequestDTO).CreateDescriptor
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO).CreateDescriptor
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.CreateDescriptor
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.CreateDescriptor
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
        name: IValidator.CanValidateInstancesOfType
        nameWithType: AbstractValidator<UpdateReplyRequestDTO>.IValidator.CanValidateInstancesOfType
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO>.FluentValidation.IValidator.CanValidateInstancesOfType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
        name: FluentValidation.IValidator.CanValidateInstancesOfType
        nameWithType: AbstractValidator(Of UpdateReplyRequestDTO).FluentValidation.IValidator.CanValidateInstancesOfType
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO).FluentValidation.IValidator.CanValidateInstancesOfType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.RuleFor``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,{TProperty}}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
        name: RuleFor<TProperty>
        nameWithType: AbstractValidator<UpdateReplyRequestDTO>.RuleFor<TProperty>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO>.RuleFor<TProperty>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
        name: RuleFor(Of TProperty)
        nameWithType: AbstractValidator(Of UpdateReplyRequestDTO).RuleFor(Of TProperty)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO).RuleFor(Of TProperty)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.RuleFor``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,``0}})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,{TProperty}}},System.Func{{TProperty},{TTransformed}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``1})
        name: Transform<TProperty, TTransformed>
        nameWithType: AbstractValidator<UpdateReplyRequestDTO>.Transform<TProperty, TTransformed>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO>.Transform<TProperty, TTransformed>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``1})
        name: Transform(Of TProperty, TTransformed)
        nameWithType: AbstractValidator(Of UpdateReplyRequestDTO).Transform(Of TProperty, TTransformed)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO).Transform(Of TProperty, TTransformed)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``1})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,``0}},System.Func{``0,``1})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,{TProperty}}},System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,{TProperty},{TTransformed}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{`0,``0,``1})
        name: Transform<TProperty, TTransformed>
        nameWithType: AbstractValidator<UpdateReplyRequestDTO>.Transform<TProperty, TTransformed>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO>.Transform<TProperty, TTransformed>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{`0,``0,``1})
        name: Transform(Of TProperty, TTransformed)
        nameWithType: AbstractValidator(Of UpdateReplyRequestDTO).Transform(Of TProperty, TTransformed)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO).Transform(Of TProperty, TTransformed)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{`0,``0,``1})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,``0}},System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,``0,``1})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})
        name: RuleForEach<TElement>
        nameWithType: AbstractValidator<UpdateReplyRequestDTO>.RuleForEach<TElement>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO>.RuleForEach<TElement>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})
        name: RuleForEach(Of TElement)
        nameWithType: AbstractValidator(Of UpdateReplyRequestDTO).RuleForEach(Of TElement)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO).RuleForEach(Of TElement)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,System.Collections.Generic.IEnumerable{``0}}})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}},System.Func{{TElement},{TTransformed}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1})
        name: TransformForEach<TElement, TTransformed>
        nameWithType: AbstractValidator<UpdateReplyRequestDTO>.TransformForEach<TElement, TTransformed>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO>.TransformForEach<TElement, TTransformed>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1})
        name: TransformForEach(Of TElement, TTransformed)
        nameWithType: AbstractValidator(Of UpdateReplyRequestDTO).TransformForEach(Of TElement, TTransformed)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO).TransformForEach(Of TElement, TTransformed)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}},System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,{TElement},{TTransformed}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{`0,``0,``1})
        name: TransformForEach<TElement, TTransformed>
        nameWithType: AbstractValidator<UpdateReplyRequestDTO>.TransformForEach<TElement, TTransformed>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO>.TransformForEach<TElement, TTransformed>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{`0,``0,``1})
        name: TransformForEach(Of TElement, TTransformed)
        nameWithType: AbstractValidator(Of UpdateReplyRequestDTO).TransformForEach(Of TElement, TTransformed)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO).TransformForEach(Of TElement, TTransformed)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{`0,``0,``1})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,System.Collections.Generic.IEnumerable{``0}}},System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,``0,``1})
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.RuleSet(System.String,System.Action):
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RuleSet(System.String,System.Action)
        name: RuleSet
        nameWithType: AbstractValidator<UpdateReplyRequestDTO>.RuleSet
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO>.RuleSet
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.RuleSet(System.String,System.Action)
        name: RuleSet
        nameWithType: AbstractValidator(Of UpdateReplyRequestDTO).RuleSet
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO).RuleSet
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.RuleSet(System.String,System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.RuleSet(System.String,System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.When(System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,System.Boolean},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.When(System.Func{`0,System.Boolean},System.Action)
        name: When
        nameWithType: AbstractValidator<UpdateReplyRequestDTO>.When
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO>.When
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.When(System.Func{`0,System.Boolean},System.Action)
        name: When
        nameWithType: AbstractValidator(Of UpdateReplyRequestDTO).When
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO).When
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.When(System.Func{`0,System.Boolean},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.When(System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,System.Boolean},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.When(System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO},System.Boolean},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.When(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
        name: When
        nameWithType: AbstractValidator<UpdateReplyRequestDTO>.When
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO>.When
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.When(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
        name: When
        nameWithType: AbstractValidator(Of UpdateReplyRequestDTO).When
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO).When
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.When(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.When(System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO},System.Boolean},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,System.Boolean},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,System.Boolean},System.Action)
        name: Unless
        nameWithType: AbstractValidator<UpdateReplyRequestDTO>.Unless
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO>.Unless
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,System.Boolean},System.Action)
        name: Unless
        nameWithType: AbstractValidator(Of UpdateReplyRequestDTO).Unless
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO).Unless
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,System.Boolean},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,System.Boolean},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO},System.Boolean},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
        name: Unless
        nameWithType: AbstractValidator<UpdateReplyRequestDTO>.Unless
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO>.Unless
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
        name: Unless
        nameWithType: AbstractValidator(Of UpdateReplyRequestDTO).Unless
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO).Unless
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO},System.Boolean},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: WhenAsync
        nameWithType: AbstractValidator<UpdateReplyRequestDTO>.WhenAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO>.WhenAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: WhenAsync
        nameWithType: AbstractValidator(Of UpdateReplyRequestDTO).WhenAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO).WhenAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: WhenAsync
        nameWithType: AbstractValidator<UpdateReplyRequestDTO>.WhenAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO>.WhenAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`4
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: WhenAsync
        nameWithType: AbstractValidator(Of UpdateReplyRequestDTO).WhenAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO).WhenAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`4
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: UnlessAsync
        nameWithType: AbstractValidator<UpdateReplyRequestDTO>.UnlessAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO>.UnlessAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: UnlessAsync
        nameWithType: AbstractValidator(Of UpdateReplyRequestDTO).UnlessAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO).UnlessAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: UnlessAsync
        nameWithType: AbstractValidator<UpdateReplyRequestDTO>.UnlessAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO>.UnlessAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`4
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: UnlessAsync
        nameWithType: AbstractValidator(Of UpdateReplyRequestDTO).UnlessAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO).UnlessAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`4
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.Include(FluentValidation.IValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Include(FluentValidation.IValidator{`0})
        name: Include
        nameWithType: AbstractValidator<UpdateReplyRequestDTO>.Include
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO>.Include
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidator`1
        name: IValidator
        nameWithType: IValidator
        qualifiedName: FluentValidation.IValidator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Include(FluentValidation.IValidator{`0})
        name: Include
        nameWithType: AbstractValidator(Of UpdateReplyRequestDTO).Include
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO).Include
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidator`1
        name: IValidator
        nameWithType: IValidator
        qualifiedName: FluentValidation.IValidator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Include(FluentValidation.IValidator{`0})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.Include(FluentValidation.IValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.Include``1(System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,{TValidator}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Include``1(System.Func{`0,``0})
        name: Include<TValidator>
        nameWithType: AbstractValidator<UpdateReplyRequestDTO>.Include<TValidator>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO>.Include<TValidator>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValidator
        nameWithType: TValidator
        qualifiedName: TValidator
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Include``1(System.Func{`0,``0})
        name: Include(Of TValidator)
        nameWithType: AbstractValidator(Of UpdateReplyRequestDTO).Include(Of TValidator)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO).Include(Of TValidator)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValidator
        nameWithType: TValidator
        qualifiedName: TValidator
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Include``1(System.Func{`0,``0})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.Include``1(System.Func{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,``0})
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.GetEnumerator:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.GetEnumerator
        name: GetEnumerator
        nameWithType: AbstractValidator<UpdateReplyRequestDTO>.GetEnumerator
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO>.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.GetEnumerator
        name: GetEnumerator
        nameWithType: AbstractValidator(Of UpdateReplyRequestDTO).GetEnumerator
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO).GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.GetEnumerator
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.GetEnumerator
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.System#Collections#IEnumerable#GetEnumerator
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.System#Collections#IEnumerable#GetEnumerator
        name: IEnumerable.GetEnumerator
        nameWithType: AbstractValidator<UpdateReplyRequestDTO>.IEnumerable.GetEnumerator
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO>.System.Collections.IEnumerable.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.System#Collections#IEnumerable#GetEnumerator
        name: System.Collections.IEnumerable.GetEnumerator
        nameWithType: AbstractValidator(Of UpdateReplyRequestDTO).System.Collections.IEnumerable.GetEnumerator
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO).System.Collections.IEnumerable.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.System#Collections#IEnumerable#GetEnumerator
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.System#Collections#IEnumerable#GetEnumerator
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.EnsureInstanceNotNull(System.Object):
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.EnsureInstanceNotNull(System.Object)
        name: EnsureInstanceNotNull
        nameWithType: AbstractValidator<UpdateReplyRequestDTO>.EnsureInstanceNotNull
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO>.EnsureInstanceNotNull
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.EnsureInstanceNotNull(System.Object)
        name: EnsureInstanceNotNull
        nameWithType: AbstractValidator(Of UpdateReplyRequestDTO).EnsureInstanceNotNull
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO).EnsureInstanceNotNull
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.EnsureInstanceNotNull(System.Object)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.EnsureInstanceNotNull(System.Object)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.PreValidate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO},FluentValidation.Results.ValidationResult)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.PreValidate(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
        name: PreValidate
        nameWithType: AbstractValidator<UpdateReplyRequestDTO>.PreValidate
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO>.PreValidate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.Results.ValidationResult
        name: ValidationResult
        nameWithType: ValidationResult
        qualifiedName: FluentValidation.Results.ValidationResult
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.PreValidate(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
        name: PreValidate
        nameWithType: AbstractValidator(Of UpdateReplyRequestDTO).PreValidate
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO).PreValidate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.Results.ValidationResult
        name: ValidationResult
        nameWithType: ValidationResult
        qualifiedName: FluentValidation.Results.ValidationResult
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.PreValidate(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.PreValidate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO},FluentValidation.Results.ValidationResult)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.RaiseValidationException(FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO},FluentValidation.Results.ValidationResult)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RaiseValidationException(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
        name: RaiseValidationException
        nameWithType: AbstractValidator<UpdateReplyRequestDTO>.RaiseValidationException
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO>.RaiseValidationException
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.Results.ValidationResult
        name: ValidationResult
        nameWithType: ValidationResult
        qualifiedName: FluentValidation.Results.ValidationResult
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.RaiseValidationException(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
        name: RaiseValidationException
        nameWithType: AbstractValidator(Of UpdateReplyRequestDTO).RaiseValidationException
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO).RaiseValidationException
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.Results.ValidationResult
        name: ValidationResult
        nameWithType: ValidationResult
        qualifiedName: FluentValidation.Results.ValidationResult
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.RaiseValidationException(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.RaiseValidationException(FluentValidation.ValidationContext{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO},FluentValidation.Results.ValidationResult)
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.CascadeMode:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.CascadeMode
        name: CascadeMode
        nameWithType: AbstractValidator<UpdateReplyRequestDTO>.CascadeMode
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO>.CascadeMode
        isExternal: true
      VB:
      - id: FluentValidation.AbstractValidator`1.CascadeMode
        name: CascadeMode
        nameWithType: AbstractValidator(Of UpdateReplyRequestDTO).CascadeMode
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO).CascadeMode
        isExternal: true
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.CascadeMode
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
    commentId: P:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.CascadeMode
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.ClassLevelCascadeMode:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.ClassLevelCascadeMode
        name: ClassLevelCascadeMode
        nameWithType: AbstractValidator<UpdateReplyRequestDTO>.ClassLevelCascadeMode
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO>.ClassLevelCascadeMode
        isExternal: true
      VB:
      - id: FluentValidation.AbstractValidator`1.ClassLevelCascadeMode
        name: ClassLevelCascadeMode
        nameWithType: AbstractValidator(Of UpdateReplyRequestDTO).ClassLevelCascadeMode
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO).ClassLevelCascadeMode
        isExternal: true
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.ClassLevelCascadeMode
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
    commentId: P:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.ClassLevelCascadeMode
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.RuleLevelCascadeMode:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RuleLevelCascadeMode
        name: RuleLevelCascadeMode
        nameWithType: AbstractValidator<UpdateReplyRequestDTO>.RuleLevelCascadeMode
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO>.RuleLevelCascadeMode
        isExternal: true
      VB:
      - id: FluentValidation.AbstractValidator`1.RuleLevelCascadeMode
        name: RuleLevelCascadeMode
        nameWithType: AbstractValidator(Of UpdateReplyRequestDTO).RuleLevelCascadeMode
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO).RuleLevelCascadeMode
        isExternal: true
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.RuleLevelCascadeMode
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
    commentId: P:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}.RuleLevelCascadeMode
  FluentValidation.IValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}:
    name:
      CSharp:
      - id: FluentValidation.IValidator`1
        name: IValidator
        nameWithType: IValidator
        qualifiedName: FluentValidation.IValidator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: FluentValidation.IValidator`1
        name: IValidator
        nameWithType: IValidator
        qualifiedName: FluentValidation.IValidator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
        name: UpdateReplyRequestDTO
        nameWithType: UpdateReplyRequestDTO
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.IValidator`1
    parent: FluentValidation
    commentId: T:FluentValidation.IValidator{Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO}
  Domain.DTO.Requestes.Replies.UpdateReplyRequestDTOValidator.#ctor*:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTOValidator.#ctor*
        name: UpdateReplyRequestDTOValidator
        nameWithType: UpdateReplyRequestDTOValidator.UpdateReplyRequestDTOValidator
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTOValidator.UpdateReplyRequestDTOValidator
      VB:
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTOValidator.#ctor*
        name: UpdateReplyRequestDTOValidator
        nameWithType: UpdateReplyRequestDTOValidator.UpdateReplyRequestDTOValidator
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTOValidator.UpdateReplyRequestDTOValidator
    isDefinition: true
    commentId: Overload:Domain.DTO.Requestes.Replies.UpdateReplyRequestDTOValidator.#ctor
  Domain.DTO.Requestes.Replies.UpdateReplyRequestDTOValidator:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTOValidator
        name: UpdateReplyRequestDTOValidator
        nameWithType: UpdateReplyRequestDTOValidator
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTOValidator
      VB:
      - id: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTOValidator
        name: UpdateReplyRequestDTOValidator
        nameWithType: UpdateReplyRequestDTOValidator
        qualifiedName: Domain.DTO.Requestes.Replies.UpdateReplyRequestDTOValidator
    isDefinition: true
    commentId: T:Domain.DTO.Requestes.Replies.UpdateReplyRequestDTOValidator
  Domain.DTO.Requestes.Replies:
    name:
      CSharp:
      - name: Domain.DTO.Requestes.Replies
        nameWithType: Domain.DTO.Requestes.Replies
        qualifiedName: Domain.DTO.Requestes.Replies
      VB:
      - name: Domain.DTO.Requestes.Replies
        nameWithType: Domain.DTO.Requestes.Replies
        qualifiedName: Domain.DTO.Requestes.Replies
    isDefinition: true
    commentId: N:Domain.DTO.Requestes.Replies
  Domain.DTO.Requestes.Security.AuthentificationRequestDTO.Login_name*:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO.Login_name*
        name: Login_name
        nameWithType: AuthentificationRequestDTO.Login_name
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO.Login_name
      VB:
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO.Login_name*
        name: Login_name
        nameWithType: AuthentificationRequestDTO.Login_name
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO.Login_name
    isDefinition: true
    commentId: Overload:Domain.DTO.Requestes.Security.AuthentificationRequestDTO.Login_name
  Domain.DTO.Requestes.Security.AuthentificationRequestDTO.Password*:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO.Password*
        name: Password
        nameWithType: AuthentificationRequestDTO.Password
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO.Password
      VB:
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO.Password*
        name: Password
        nameWithType: AuthentificationRequestDTO.Password
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO.Password
    isDefinition: true
    commentId: Overload:Domain.DTO.Requestes.Security.AuthentificationRequestDTO.Password
  Domain.DTO.Requestes.Security.AuthentificationRequestDTO:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      VB:
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
    isDefinition: true
    commentId: T:Domain.DTO.Requestes.Security.AuthentificationRequestDTO
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1
        name: AbstractValidator
        nameWithType: AbstractValidator
        qualifiedName: FluentValidation.AbstractValidator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: FluentValidation.AbstractValidator`1
        name: AbstractValidator
        nameWithType: AbstractValidator
        qualifiedName: FluentValidation.AbstractValidator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1
    parent: FluentValidation
    commentId: T:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
        name: IValidator.Validate
        nameWithType: AbstractValidator<AuthentificationRequestDTO>.IValidator.Validate
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Security.AuthentificationRequestDTO>.FluentValidation.IValidator.Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidationContext
        name: IValidationContext
        nameWithType: IValidationContext
        qualifiedName: FluentValidation.IValidationContext
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
        name: FluentValidation.IValidator.Validate
        nameWithType: AbstractValidator(Of AuthentificationRequestDTO).FluentValidation.IValidator.Validate
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Security.AuthentificationRequestDTO).FluentValidation.IValidator.Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidationContext
        name: IValidationContext
        nameWithType: IValidationContext
        qualifiedName: FluentValidation.IValidationContext
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
        name: IValidator.ValidateAsync
        nameWithType: AbstractValidator<AuthentificationRequestDTO>.IValidator.ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Security.AuthentificationRequestDTO>.FluentValidation.IValidator.ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidationContext
        name: IValidationContext
        nameWithType: IValidationContext
        qualifiedName: FluentValidation.IValidationContext
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
        name: FluentValidation.IValidator.ValidateAsync
        nameWithType: AbstractValidator(Of AuthentificationRequestDTO).FluentValidation.IValidator.ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Security.AuthentificationRequestDTO).FluentValidation.IValidator.ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidationContext
        name: IValidationContext
        nameWithType: IValidationContext
        qualifiedName: FluentValidation.IValidationContext
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.Validate(Domain.DTO.Requestes.Security.AuthentificationRequestDTO)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Validate(`0)
        name: Validate
        nameWithType: AbstractValidator<AuthentificationRequestDTO>.Validate
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Security.AuthentificationRequestDTO>.Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Validate(`0)
        name: Validate
        nameWithType: AbstractValidator(Of AuthentificationRequestDTO).Validate
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Security.AuthentificationRequestDTO).Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Validate(`0)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.Validate(Domain.DTO.Requestes.Security.AuthentificationRequestDTO)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.ValidateAsync(Domain.DTO.Requestes.Security.AuthentificationRequestDTO,System.Threading.CancellationToken)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.ValidateAsync(`0,System.Threading.CancellationToken)
        name: ValidateAsync
        nameWithType: AbstractValidator<AuthentificationRequestDTO>.ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Security.AuthentificationRequestDTO>.ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.ValidateAsync(`0,System.Threading.CancellationToken)
        name: ValidateAsync
        nameWithType: AbstractValidator(Of AuthentificationRequestDTO).ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Security.AuthentificationRequestDTO).ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.ValidateAsync(`0,System.Threading.CancellationToken)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.ValidateAsync(Domain.DTO.Requestes.Security.AuthentificationRequestDTO,System.Threading.CancellationToken)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.Validate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Security.AuthentificationRequestDTO})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Validate(FluentValidation.ValidationContext{`0})
        name: Validate
        nameWithType: AbstractValidator<AuthentificationRequestDTO>.Validate
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Security.AuthentificationRequestDTO>.Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Validate(FluentValidation.ValidationContext{`0})
        name: Validate
        nameWithType: AbstractValidator(Of AuthentificationRequestDTO).Validate
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Security.AuthentificationRequestDTO).Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Validate(FluentValidation.ValidationContext{`0})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.Validate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Security.AuthentificationRequestDTO})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.ValidateAsync(FluentValidation.ValidationContext{Domain.DTO.Requestes.Security.AuthentificationRequestDTO},System.Threading.CancellationToken)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.ValidateAsync(FluentValidation.ValidationContext{`0},System.Threading.CancellationToken)
        name: ValidateAsync
        nameWithType: AbstractValidator<AuthentificationRequestDTO>.ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Security.AuthentificationRequestDTO>.ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.ValidateAsync(FluentValidation.ValidationContext{`0},System.Threading.CancellationToken)
        name: ValidateAsync
        nameWithType: AbstractValidator(Of AuthentificationRequestDTO).ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Security.AuthentificationRequestDTO).ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.ValidateAsync(FluentValidation.ValidationContext{`0},System.Threading.CancellationToken)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.ValidateAsync(FluentValidation.ValidationContext{Domain.DTO.Requestes.Security.AuthentificationRequestDTO},System.Threading.CancellationToken)
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.CreateDescriptor:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.CreateDescriptor
        name: CreateDescriptor
        nameWithType: AbstractValidator<AuthentificationRequestDTO>.CreateDescriptor
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Security.AuthentificationRequestDTO>.CreateDescriptor
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.CreateDescriptor
        name: CreateDescriptor
        nameWithType: AbstractValidator(Of AuthentificationRequestDTO).CreateDescriptor
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Security.AuthentificationRequestDTO).CreateDescriptor
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.CreateDescriptor
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.CreateDescriptor
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
        name: IValidator.CanValidateInstancesOfType
        nameWithType: AbstractValidator<AuthentificationRequestDTO>.IValidator.CanValidateInstancesOfType
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Security.AuthentificationRequestDTO>.FluentValidation.IValidator.CanValidateInstancesOfType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
        name: FluentValidation.IValidator.CanValidateInstancesOfType
        nameWithType: AbstractValidator(Of AuthentificationRequestDTO).FluentValidation.IValidator.CanValidateInstancesOfType
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Security.AuthentificationRequestDTO).FluentValidation.IValidator.CanValidateInstancesOfType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.RuleFor``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,{TProperty}}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
        name: RuleFor<TProperty>
        nameWithType: AbstractValidator<AuthentificationRequestDTO>.RuleFor<TProperty>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Security.AuthentificationRequestDTO>.RuleFor<TProperty>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
        name: RuleFor(Of TProperty)
        nameWithType: AbstractValidator(Of AuthentificationRequestDTO).RuleFor(Of TProperty)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Security.AuthentificationRequestDTO).RuleFor(Of TProperty)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.RuleFor``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,``0}})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,{TProperty}}},System.Func{{TProperty},{TTransformed}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``1})
        name: Transform<TProperty, TTransformed>
        nameWithType: AbstractValidator<AuthentificationRequestDTO>.Transform<TProperty, TTransformed>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Security.AuthentificationRequestDTO>.Transform<TProperty, TTransformed>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``1})
        name: Transform(Of TProperty, TTransformed)
        nameWithType: AbstractValidator(Of AuthentificationRequestDTO).Transform(Of TProperty, TTransformed)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Security.AuthentificationRequestDTO).Transform(Of TProperty, TTransformed)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``1})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,``0}},System.Func{``0,``1})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,{TProperty}}},System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,{TProperty},{TTransformed}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{`0,``0,``1})
        name: Transform<TProperty, TTransformed>
        nameWithType: AbstractValidator<AuthentificationRequestDTO>.Transform<TProperty, TTransformed>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Security.AuthentificationRequestDTO>.Transform<TProperty, TTransformed>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{`0,``0,``1})
        name: Transform(Of TProperty, TTransformed)
        nameWithType: AbstractValidator(Of AuthentificationRequestDTO).Transform(Of TProperty, TTransformed)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Security.AuthentificationRequestDTO).Transform(Of TProperty, TTransformed)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{`0,``0,``1})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,``0}},System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,``0,``1})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})
        name: RuleForEach<TElement>
        nameWithType: AbstractValidator<AuthentificationRequestDTO>.RuleForEach<TElement>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Security.AuthentificationRequestDTO>.RuleForEach<TElement>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})
        name: RuleForEach(Of TElement)
        nameWithType: AbstractValidator(Of AuthentificationRequestDTO).RuleForEach(Of TElement)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Security.AuthentificationRequestDTO).RuleForEach(Of TElement)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,System.Collections.Generic.IEnumerable{``0}}})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}},System.Func{{TElement},{TTransformed}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1})
        name: TransformForEach<TElement, TTransformed>
        nameWithType: AbstractValidator<AuthentificationRequestDTO>.TransformForEach<TElement, TTransformed>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Security.AuthentificationRequestDTO>.TransformForEach<TElement, TTransformed>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1})
        name: TransformForEach(Of TElement, TTransformed)
        nameWithType: AbstractValidator(Of AuthentificationRequestDTO).TransformForEach(Of TElement, TTransformed)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Security.AuthentificationRequestDTO).TransformForEach(Of TElement, TTransformed)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}},System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,{TElement},{TTransformed}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{`0,``0,``1})
        name: TransformForEach<TElement, TTransformed>
        nameWithType: AbstractValidator<AuthentificationRequestDTO>.TransformForEach<TElement, TTransformed>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Security.AuthentificationRequestDTO>.TransformForEach<TElement, TTransformed>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{`0,``0,``1})
        name: TransformForEach(Of TElement, TTransformed)
        nameWithType: AbstractValidator(Of AuthentificationRequestDTO).TransformForEach(Of TElement, TTransformed)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Security.AuthentificationRequestDTO).TransformForEach(Of TElement, TTransformed)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{`0,``0,``1})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,System.Collections.Generic.IEnumerable{``0}}},System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,``0,``1})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.RuleSet(System.String,System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RuleSet(System.String,System.Action)
        name: RuleSet
        nameWithType: AbstractValidator<AuthentificationRequestDTO>.RuleSet
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Security.AuthentificationRequestDTO>.RuleSet
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.RuleSet(System.String,System.Action)
        name: RuleSet
        nameWithType: AbstractValidator(Of AuthentificationRequestDTO).RuleSet
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Security.AuthentificationRequestDTO).RuleSet
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.RuleSet(System.String,System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.RuleSet(System.String,System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.When(System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,System.Boolean},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.When(System.Func{`0,System.Boolean},System.Action)
        name: When
        nameWithType: AbstractValidator<AuthentificationRequestDTO>.When
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Security.AuthentificationRequestDTO>.When
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.When(System.Func{`0,System.Boolean},System.Action)
        name: When
        nameWithType: AbstractValidator(Of AuthentificationRequestDTO).When
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Security.AuthentificationRequestDTO).When
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.When(System.Func{`0,System.Boolean},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.When(System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,System.Boolean},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.When(System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Security.AuthentificationRequestDTO},System.Boolean},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.When(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
        name: When
        nameWithType: AbstractValidator<AuthentificationRequestDTO>.When
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Security.AuthentificationRequestDTO>.When
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.When(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
        name: When
        nameWithType: AbstractValidator(Of AuthentificationRequestDTO).When
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Security.AuthentificationRequestDTO).When
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.When(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.When(System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Security.AuthentificationRequestDTO},System.Boolean},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,System.Boolean},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,System.Boolean},System.Action)
        name: Unless
        nameWithType: AbstractValidator<AuthentificationRequestDTO>.Unless
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Security.AuthentificationRequestDTO>.Unless
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,System.Boolean},System.Action)
        name: Unless
        nameWithType: AbstractValidator(Of AuthentificationRequestDTO).Unless
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Security.AuthentificationRequestDTO).Unless
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,System.Boolean},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,System.Boolean},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Security.AuthentificationRequestDTO},System.Boolean},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
        name: Unless
        nameWithType: AbstractValidator<AuthentificationRequestDTO>.Unless
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Security.AuthentificationRequestDTO>.Unless
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
        name: Unless
        nameWithType: AbstractValidator(Of AuthentificationRequestDTO).Unless
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Security.AuthentificationRequestDTO).Unless
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Security.AuthentificationRequestDTO},System.Boolean},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: WhenAsync
        nameWithType: AbstractValidator<AuthentificationRequestDTO>.WhenAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Security.AuthentificationRequestDTO>.WhenAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: WhenAsync
        nameWithType: AbstractValidator(Of AuthentificationRequestDTO).WhenAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Security.AuthentificationRequestDTO).WhenAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Security.AuthentificationRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: WhenAsync
        nameWithType: AbstractValidator<AuthentificationRequestDTO>.WhenAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Security.AuthentificationRequestDTO>.WhenAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`4
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: WhenAsync
        nameWithType: AbstractValidator(Of AuthentificationRequestDTO).WhenAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Security.AuthentificationRequestDTO).WhenAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`4
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Security.AuthentificationRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: UnlessAsync
        nameWithType: AbstractValidator<AuthentificationRequestDTO>.UnlessAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Security.AuthentificationRequestDTO>.UnlessAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: UnlessAsync
        nameWithType: AbstractValidator(Of AuthentificationRequestDTO).UnlessAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Security.AuthentificationRequestDTO).UnlessAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Security.AuthentificationRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: UnlessAsync
        nameWithType: AbstractValidator<AuthentificationRequestDTO>.UnlessAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Security.AuthentificationRequestDTO>.UnlessAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`4
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: UnlessAsync
        nameWithType: AbstractValidator(Of AuthentificationRequestDTO).UnlessAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Security.AuthentificationRequestDTO).UnlessAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`4
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Security.AuthentificationRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.Include(FluentValidation.IValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Include(FluentValidation.IValidator{`0})
        name: Include
        nameWithType: AbstractValidator<AuthentificationRequestDTO>.Include
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Security.AuthentificationRequestDTO>.Include
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidator`1
        name: IValidator
        nameWithType: IValidator
        qualifiedName: FluentValidation.IValidator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Include(FluentValidation.IValidator{`0})
        name: Include
        nameWithType: AbstractValidator(Of AuthentificationRequestDTO).Include
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Security.AuthentificationRequestDTO).Include
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidator`1
        name: IValidator
        nameWithType: IValidator
        qualifiedName: FluentValidation.IValidator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Include(FluentValidation.IValidator{`0})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.Include(FluentValidation.IValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.Include``1(System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,{TValidator}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Include``1(System.Func{`0,``0})
        name: Include<TValidator>
        nameWithType: AbstractValidator<AuthentificationRequestDTO>.Include<TValidator>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Security.AuthentificationRequestDTO>.Include<TValidator>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValidator
        nameWithType: TValidator
        qualifiedName: TValidator
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Include``1(System.Func{`0,``0})
        name: Include(Of TValidator)
        nameWithType: AbstractValidator(Of AuthentificationRequestDTO).Include(Of TValidator)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Security.AuthentificationRequestDTO).Include(Of TValidator)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValidator
        nameWithType: TValidator
        qualifiedName: TValidator
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Include``1(System.Func{`0,``0})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.Include``1(System.Func{Domain.DTO.Requestes.Security.AuthentificationRequestDTO,``0})
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.GetEnumerator:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.GetEnumerator
        name: GetEnumerator
        nameWithType: AbstractValidator<AuthentificationRequestDTO>.GetEnumerator
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Security.AuthentificationRequestDTO>.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.GetEnumerator
        name: GetEnumerator
        nameWithType: AbstractValidator(Of AuthentificationRequestDTO).GetEnumerator
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Security.AuthentificationRequestDTO).GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.GetEnumerator
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.GetEnumerator
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.System#Collections#IEnumerable#GetEnumerator
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.System#Collections#IEnumerable#GetEnumerator
        name: IEnumerable.GetEnumerator
        nameWithType: AbstractValidator<AuthentificationRequestDTO>.IEnumerable.GetEnumerator
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Security.AuthentificationRequestDTO>.System.Collections.IEnumerable.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.System#Collections#IEnumerable#GetEnumerator
        name: System.Collections.IEnumerable.GetEnumerator
        nameWithType: AbstractValidator(Of AuthentificationRequestDTO).System.Collections.IEnumerable.GetEnumerator
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Security.AuthentificationRequestDTO).System.Collections.IEnumerable.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.System#Collections#IEnumerable#GetEnumerator
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.System#Collections#IEnumerable#GetEnumerator
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.EnsureInstanceNotNull(System.Object)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.EnsureInstanceNotNull(System.Object)
        name: EnsureInstanceNotNull
        nameWithType: AbstractValidator<AuthentificationRequestDTO>.EnsureInstanceNotNull
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Security.AuthentificationRequestDTO>.EnsureInstanceNotNull
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.EnsureInstanceNotNull(System.Object)
        name: EnsureInstanceNotNull
        nameWithType: AbstractValidator(Of AuthentificationRequestDTO).EnsureInstanceNotNull
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Security.AuthentificationRequestDTO).EnsureInstanceNotNull
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.EnsureInstanceNotNull(System.Object)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.EnsureInstanceNotNull(System.Object)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.PreValidate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Security.AuthentificationRequestDTO},FluentValidation.Results.ValidationResult)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.PreValidate(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
        name: PreValidate
        nameWithType: AbstractValidator<AuthentificationRequestDTO>.PreValidate
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Security.AuthentificationRequestDTO>.PreValidate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.Results.ValidationResult
        name: ValidationResult
        nameWithType: ValidationResult
        qualifiedName: FluentValidation.Results.ValidationResult
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.PreValidate(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
        name: PreValidate
        nameWithType: AbstractValidator(Of AuthentificationRequestDTO).PreValidate
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Security.AuthentificationRequestDTO).PreValidate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.Results.ValidationResult
        name: ValidationResult
        nameWithType: ValidationResult
        qualifiedName: FluentValidation.Results.ValidationResult
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.PreValidate(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.PreValidate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Security.AuthentificationRequestDTO},FluentValidation.Results.ValidationResult)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.RaiseValidationException(FluentValidation.ValidationContext{Domain.DTO.Requestes.Security.AuthentificationRequestDTO},FluentValidation.Results.ValidationResult)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RaiseValidationException(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
        name: RaiseValidationException
        nameWithType: AbstractValidator<AuthentificationRequestDTO>.RaiseValidationException
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Security.AuthentificationRequestDTO>.RaiseValidationException
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.Results.ValidationResult
        name: ValidationResult
        nameWithType: ValidationResult
        qualifiedName: FluentValidation.Results.ValidationResult
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.RaiseValidationException(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
        name: RaiseValidationException
        nameWithType: AbstractValidator(Of AuthentificationRequestDTO).RaiseValidationException
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Security.AuthentificationRequestDTO).RaiseValidationException
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.Results.ValidationResult
        name: ValidationResult
        nameWithType: ValidationResult
        qualifiedName: FluentValidation.Results.ValidationResult
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.RaiseValidationException(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.RaiseValidationException(FluentValidation.ValidationContext{Domain.DTO.Requestes.Security.AuthentificationRequestDTO},FluentValidation.Results.ValidationResult)
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.CascadeMode:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.CascadeMode
        name: CascadeMode
        nameWithType: AbstractValidator<AuthentificationRequestDTO>.CascadeMode
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Security.AuthentificationRequestDTO>.CascadeMode
        isExternal: true
      VB:
      - id: FluentValidation.AbstractValidator`1.CascadeMode
        name: CascadeMode
        nameWithType: AbstractValidator(Of AuthentificationRequestDTO).CascadeMode
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Security.AuthentificationRequestDTO).CascadeMode
        isExternal: true
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.CascadeMode
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
    commentId: P:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.CascadeMode
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.ClassLevelCascadeMode:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.ClassLevelCascadeMode
        name: ClassLevelCascadeMode
        nameWithType: AbstractValidator<AuthentificationRequestDTO>.ClassLevelCascadeMode
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Security.AuthentificationRequestDTO>.ClassLevelCascadeMode
        isExternal: true
      VB:
      - id: FluentValidation.AbstractValidator`1.ClassLevelCascadeMode
        name: ClassLevelCascadeMode
        nameWithType: AbstractValidator(Of AuthentificationRequestDTO).ClassLevelCascadeMode
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Security.AuthentificationRequestDTO).ClassLevelCascadeMode
        isExternal: true
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.ClassLevelCascadeMode
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
    commentId: P:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.ClassLevelCascadeMode
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.RuleLevelCascadeMode:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RuleLevelCascadeMode
        name: RuleLevelCascadeMode
        nameWithType: AbstractValidator<AuthentificationRequestDTO>.RuleLevelCascadeMode
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Security.AuthentificationRequestDTO>.RuleLevelCascadeMode
        isExternal: true
      VB:
      - id: FluentValidation.AbstractValidator`1.RuleLevelCascadeMode
        name: RuleLevelCascadeMode
        nameWithType: AbstractValidator(Of AuthentificationRequestDTO).RuleLevelCascadeMode
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Security.AuthentificationRequestDTO).RuleLevelCascadeMode
        isExternal: true
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.RuleLevelCascadeMode
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
    commentId: P:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}.RuleLevelCascadeMode
  FluentValidation.IValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}:
    name:
      CSharp:
      - id: FluentValidation.IValidator`1
        name: IValidator
        nameWithType: IValidator
        qualifiedName: FluentValidation.IValidator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: FluentValidation.IValidator`1
        name: IValidator
        nameWithType: IValidator
        qualifiedName: FluentValidation.IValidator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
        name: AuthentificationRequestDTO
        nameWithType: AuthentificationRequestDTO
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.IValidator`1
    parent: FluentValidation
    commentId: T:FluentValidation.IValidator{Domain.DTO.Requestes.Security.AuthentificationRequestDTO}
  Domain.DTO.Requestes.Security.AuthentificationRequestDTOValidator.#ctor*:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTOValidator.#ctor*
        name: AuthentificationRequestDTOValidator
        nameWithType: AuthentificationRequestDTOValidator.AuthentificationRequestDTOValidator
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTOValidator.AuthentificationRequestDTOValidator
      VB:
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTOValidator.#ctor*
        name: AuthentificationRequestDTOValidator
        nameWithType: AuthentificationRequestDTOValidator.AuthentificationRequestDTOValidator
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTOValidator.AuthentificationRequestDTOValidator
    isDefinition: true
    commentId: Overload:Domain.DTO.Requestes.Security.AuthentificationRequestDTOValidator.#ctor
  Domain.DTO.Requestes.Security.AuthentificationRequestDTOValidator:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTOValidator
        name: AuthentificationRequestDTOValidator
        nameWithType: AuthentificationRequestDTOValidator
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTOValidator
      VB:
      - id: Domain.DTO.Requestes.Security.AuthentificationRequestDTOValidator
        name: AuthentificationRequestDTOValidator
        nameWithType: AuthentificationRequestDTOValidator
        qualifiedName: Domain.DTO.Requestes.Security.AuthentificationRequestDTOValidator
    isDefinition: true
    commentId: T:Domain.DTO.Requestes.Security.AuthentificationRequestDTOValidator
  Domain.DTO.Requestes.Security:
    name:
      CSharp:
      - name: Domain.DTO.Requestes.Security
        nameWithType: Domain.DTO.Requestes.Security
        qualifiedName: Domain.DTO.Requestes.Security
      VB:
      - name: Domain.DTO.Requestes.Security
        nameWithType: Domain.DTO.Requestes.Security
        qualifiedName: Domain.DTO.Requestes.Security
    isDefinition: true
    commentId: N:Domain.DTO.Requestes.Security
  Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicTitle*:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicTitle*
        name: TopicTitle
        nameWithType: CreateTopicRequestDTO.TopicTitle
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicTitle
      VB:
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicTitle*
        name: TopicTitle
        nameWithType: CreateTopicRequestDTO.TopicTitle
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicTitle
    isDefinition: true
    commentId: Overload:Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicTitle
  Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicText*:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicText*
        name: TopicText
        nameWithType: CreateTopicRequestDTO.TopicText
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicText
      VB:
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicText*
        name: TopicText
        nameWithType: CreateTopicRequestDTO.TopicText
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicText
    isDefinition: true
    commentId: Overload:Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicText
  Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicRubricId*:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicRubricId*
        name: TopicRubricId
        nameWithType: CreateTopicRequestDTO.TopicRubricId
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicRubricId
      VB:
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicRubricId*
        name: TopicRubricId
        nameWithType: CreateTopicRequestDTO.TopicRubricId
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicRubricId
    isDefinition: true
    commentId: Overload:Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicRubricId
  Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicCreatorId*:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicCreatorId*
        name: TopicCreatorId
        nameWithType: CreateTopicRequestDTO.TopicCreatorId
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicCreatorId
      VB:
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicCreatorId*
        name: TopicCreatorId
        nameWithType: CreateTopicRequestDTO.TopicCreatorId
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicCreatorId
    isDefinition: true
    commentId: Overload:Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.TopicCreatorId
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.Equals*:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.Equals*
        name: Equals
        nameWithType: CreateTopicRequestDTO.Equals
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.Equals
      VB:
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.Equals*
        name: Equals
        nameWithType: CreateTopicRequestDTO.Equals
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.Equals
    isDefinition: true
    commentId: Overload:Domain.DTO.Requestes.Topics.CreateTopicRequestDTO.Equals
  Domain.DTO.Requestes.Topics.CreateTopicRequestDTO:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      VB:
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
    isDefinition: true
    commentId: T:Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1
        name: AbstractValidator
        nameWithType: AbstractValidator
        qualifiedName: FluentValidation.AbstractValidator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: FluentValidation.AbstractValidator`1
        name: AbstractValidator
        nameWithType: AbstractValidator
        qualifiedName: FluentValidation.AbstractValidator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1
    parent: FluentValidation
    commentId: T:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
        name: IValidator.Validate
        nameWithType: AbstractValidator<CreateTopicRequestDTO>.IValidator.Validate
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.CreateTopicRequestDTO>.FluentValidation.IValidator.Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidationContext
        name: IValidationContext
        nameWithType: IValidationContext
        qualifiedName: FluentValidation.IValidationContext
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
        name: FluentValidation.IValidator.Validate
        nameWithType: AbstractValidator(Of CreateTopicRequestDTO).FluentValidation.IValidator.Validate
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.CreateTopicRequestDTO).FluentValidation.IValidator.Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidationContext
        name: IValidationContext
        nameWithType: IValidationContext
        qualifiedName: FluentValidation.IValidationContext
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
        name: IValidator.ValidateAsync
        nameWithType: AbstractValidator<CreateTopicRequestDTO>.IValidator.ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.CreateTopicRequestDTO>.FluentValidation.IValidator.ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidationContext
        name: IValidationContext
        nameWithType: IValidationContext
        qualifiedName: FluentValidation.IValidationContext
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
        name: FluentValidation.IValidator.ValidateAsync
        nameWithType: AbstractValidator(Of CreateTopicRequestDTO).FluentValidation.IValidator.ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.CreateTopicRequestDTO).FluentValidation.IValidator.ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidationContext
        name: IValidationContext
        nameWithType: IValidationContext
        qualifiedName: FluentValidation.IValidationContext
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.Validate(Domain.DTO.Requestes.Topics.CreateTopicRequestDTO)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Validate(`0)
        name: Validate
        nameWithType: AbstractValidator<CreateTopicRequestDTO>.Validate
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.CreateTopicRequestDTO>.Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Validate(`0)
        name: Validate
        nameWithType: AbstractValidator(Of CreateTopicRequestDTO).Validate
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.CreateTopicRequestDTO).Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Validate(`0)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.Validate(Domain.DTO.Requestes.Topics.CreateTopicRequestDTO)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.ValidateAsync(Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,System.Threading.CancellationToken)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.ValidateAsync(`0,System.Threading.CancellationToken)
        name: ValidateAsync
        nameWithType: AbstractValidator<CreateTopicRequestDTO>.ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.CreateTopicRequestDTO>.ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.ValidateAsync(`0,System.Threading.CancellationToken)
        name: ValidateAsync
        nameWithType: AbstractValidator(Of CreateTopicRequestDTO).ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.CreateTopicRequestDTO).ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.ValidateAsync(`0,System.Threading.CancellationToken)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.ValidateAsync(Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,System.Threading.CancellationToken)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.Validate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Validate(FluentValidation.ValidationContext{`0})
        name: Validate
        nameWithType: AbstractValidator<CreateTopicRequestDTO>.Validate
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.CreateTopicRequestDTO>.Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Validate(FluentValidation.ValidationContext{`0})
        name: Validate
        nameWithType: AbstractValidator(Of CreateTopicRequestDTO).Validate
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.CreateTopicRequestDTO).Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Validate(FluentValidation.ValidationContext{`0})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.Validate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.ValidateAsync(FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO},System.Threading.CancellationToken)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.ValidateAsync(FluentValidation.ValidationContext{`0},System.Threading.CancellationToken)
        name: ValidateAsync
        nameWithType: AbstractValidator<CreateTopicRequestDTO>.ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.CreateTopicRequestDTO>.ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.ValidateAsync(FluentValidation.ValidationContext{`0},System.Threading.CancellationToken)
        name: ValidateAsync
        nameWithType: AbstractValidator(Of CreateTopicRequestDTO).ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.CreateTopicRequestDTO).ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.ValidateAsync(FluentValidation.ValidationContext{`0},System.Threading.CancellationToken)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.ValidateAsync(FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO},System.Threading.CancellationToken)
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.CreateDescriptor:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.CreateDescriptor
        name: CreateDescriptor
        nameWithType: AbstractValidator<CreateTopicRequestDTO>.CreateDescriptor
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.CreateTopicRequestDTO>.CreateDescriptor
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.CreateDescriptor
        name: CreateDescriptor
        nameWithType: AbstractValidator(Of CreateTopicRequestDTO).CreateDescriptor
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.CreateTopicRequestDTO).CreateDescriptor
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.CreateDescriptor
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.CreateDescriptor
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
        name: IValidator.CanValidateInstancesOfType
        nameWithType: AbstractValidator<CreateTopicRequestDTO>.IValidator.CanValidateInstancesOfType
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.CreateTopicRequestDTO>.FluentValidation.IValidator.CanValidateInstancesOfType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
        name: FluentValidation.IValidator.CanValidateInstancesOfType
        nameWithType: AbstractValidator(Of CreateTopicRequestDTO).FluentValidation.IValidator.CanValidateInstancesOfType
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.CreateTopicRequestDTO).FluentValidation.IValidator.CanValidateInstancesOfType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.RuleFor``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,{TProperty}}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
        name: RuleFor<TProperty>
        nameWithType: AbstractValidator<CreateTopicRequestDTO>.RuleFor<TProperty>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.CreateTopicRequestDTO>.RuleFor<TProperty>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
        name: RuleFor(Of TProperty)
        nameWithType: AbstractValidator(Of CreateTopicRequestDTO).RuleFor(Of TProperty)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.CreateTopicRequestDTO).RuleFor(Of TProperty)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.RuleFor``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,``0}})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,{TProperty}}},System.Func{{TProperty},{TTransformed}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``1})
        name: Transform<TProperty, TTransformed>
        nameWithType: AbstractValidator<CreateTopicRequestDTO>.Transform<TProperty, TTransformed>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.CreateTopicRequestDTO>.Transform<TProperty, TTransformed>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``1})
        name: Transform(Of TProperty, TTransformed)
        nameWithType: AbstractValidator(Of CreateTopicRequestDTO).Transform(Of TProperty, TTransformed)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.CreateTopicRequestDTO).Transform(Of TProperty, TTransformed)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``1})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,``0}},System.Func{``0,``1})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,{TProperty}}},System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,{TProperty},{TTransformed}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{`0,``0,``1})
        name: Transform<TProperty, TTransformed>
        nameWithType: AbstractValidator<CreateTopicRequestDTO>.Transform<TProperty, TTransformed>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.CreateTopicRequestDTO>.Transform<TProperty, TTransformed>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{`0,``0,``1})
        name: Transform(Of TProperty, TTransformed)
        nameWithType: AbstractValidator(Of CreateTopicRequestDTO).Transform(Of TProperty, TTransformed)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.CreateTopicRequestDTO).Transform(Of TProperty, TTransformed)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{`0,``0,``1})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,``0}},System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,``0,``1})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})
        name: RuleForEach<TElement>
        nameWithType: AbstractValidator<CreateTopicRequestDTO>.RuleForEach<TElement>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.CreateTopicRequestDTO>.RuleForEach<TElement>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})
        name: RuleForEach(Of TElement)
        nameWithType: AbstractValidator(Of CreateTopicRequestDTO).RuleForEach(Of TElement)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.CreateTopicRequestDTO).RuleForEach(Of TElement)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,System.Collections.Generic.IEnumerable{``0}}})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}},System.Func{{TElement},{TTransformed}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1})
        name: TransformForEach<TElement, TTransformed>
        nameWithType: AbstractValidator<CreateTopicRequestDTO>.TransformForEach<TElement, TTransformed>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.CreateTopicRequestDTO>.TransformForEach<TElement, TTransformed>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1})
        name: TransformForEach(Of TElement, TTransformed)
        nameWithType: AbstractValidator(Of CreateTopicRequestDTO).TransformForEach(Of TElement, TTransformed)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.CreateTopicRequestDTO).TransformForEach(Of TElement, TTransformed)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}},System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,{TElement},{TTransformed}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{`0,``0,``1})
        name: TransformForEach<TElement, TTransformed>
        nameWithType: AbstractValidator<CreateTopicRequestDTO>.TransformForEach<TElement, TTransformed>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.CreateTopicRequestDTO>.TransformForEach<TElement, TTransformed>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{`0,``0,``1})
        name: TransformForEach(Of TElement, TTransformed)
        nameWithType: AbstractValidator(Of CreateTopicRequestDTO).TransformForEach(Of TElement, TTransformed)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.CreateTopicRequestDTO).TransformForEach(Of TElement, TTransformed)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{`0,``0,``1})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,System.Collections.Generic.IEnumerable{``0}}},System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,``0,``1})
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.RuleSet(System.String,System.Action):
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RuleSet(System.String,System.Action)
        name: RuleSet
        nameWithType: AbstractValidator<CreateTopicRequestDTO>.RuleSet
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.CreateTopicRequestDTO>.RuleSet
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.RuleSet(System.String,System.Action)
        name: RuleSet
        nameWithType: AbstractValidator(Of CreateTopicRequestDTO).RuleSet
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.CreateTopicRequestDTO).RuleSet
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.RuleSet(System.String,System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.RuleSet(System.String,System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.When(System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,System.Boolean},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.When(System.Func{`0,System.Boolean},System.Action)
        name: When
        nameWithType: AbstractValidator<CreateTopicRequestDTO>.When
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.CreateTopicRequestDTO>.When
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.When(System.Func{`0,System.Boolean},System.Action)
        name: When
        nameWithType: AbstractValidator(Of CreateTopicRequestDTO).When
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.CreateTopicRequestDTO).When
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.When(System.Func{`0,System.Boolean},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.When(System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,System.Boolean},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.When(System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO},System.Boolean},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.When(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
        name: When
        nameWithType: AbstractValidator<CreateTopicRequestDTO>.When
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.CreateTopicRequestDTO>.When
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.When(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
        name: When
        nameWithType: AbstractValidator(Of CreateTopicRequestDTO).When
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.CreateTopicRequestDTO).When
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.When(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.When(System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO},System.Boolean},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,System.Boolean},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,System.Boolean},System.Action)
        name: Unless
        nameWithType: AbstractValidator<CreateTopicRequestDTO>.Unless
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.CreateTopicRequestDTO>.Unless
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,System.Boolean},System.Action)
        name: Unless
        nameWithType: AbstractValidator(Of CreateTopicRequestDTO).Unless
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.CreateTopicRequestDTO).Unless
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,System.Boolean},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,System.Boolean},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO},System.Boolean},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
        name: Unless
        nameWithType: AbstractValidator<CreateTopicRequestDTO>.Unless
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.CreateTopicRequestDTO>.Unless
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
        name: Unless
        nameWithType: AbstractValidator(Of CreateTopicRequestDTO).Unless
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.CreateTopicRequestDTO).Unless
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO},System.Boolean},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: WhenAsync
        nameWithType: AbstractValidator<CreateTopicRequestDTO>.WhenAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.CreateTopicRequestDTO>.WhenAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: WhenAsync
        nameWithType: AbstractValidator(Of CreateTopicRequestDTO).WhenAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.CreateTopicRequestDTO).WhenAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: WhenAsync
        nameWithType: AbstractValidator<CreateTopicRequestDTO>.WhenAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.CreateTopicRequestDTO>.WhenAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`4
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: WhenAsync
        nameWithType: AbstractValidator(Of CreateTopicRequestDTO).WhenAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.CreateTopicRequestDTO).WhenAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`4
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: UnlessAsync
        nameWithType: AbstractValidator<CreateTopicRequestDTO>.UnlessAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.CreateTopicRequestDTO>.UnlessAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: UnlessAsync
        nameWithType: AbstractValidator(Of CreateTopicRequestDTO).UnlessAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.CreateTopicRequestDTO).UnlessAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: UnlessAsync
        nameWithType: AbstractValidator<CreateTopicRequestDTO>.UnlessAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.CreateTopicRequestDTO>.UnlessAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`4
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: UnlessAsync
        nameWithType: AbstractValidator(Of CreateTopicRequestDTO).UnlessAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.CreateTopicRequestDTO).UnlessAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`4
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.Include(FluentValidation.IValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Include(FluentValidation.IValidator{`0})
        name: Include
        nameWithType: AbstractValidator<CreateTopicRequestDTO>.Include
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.CreateTopicRequestDTO>.Include
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidator`1
        name: IValidator
        nameWithType: IValidator
        qualifiedName: FluentValidation.IValidator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Include(FluentValidation.IValidator{`0})
        name: Include
        nameWithType: AbstractValidator(Of CreateTopicRequestDTO).Include
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.CreateTopicRequestDTO).Include
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidator`1
        name: IValidator
        nameWithType: IValidator
        qualifiedName: FluentValidation.IValidator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Include(FluentValidation.IValidator{`0})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.Include(FluentValidation.IValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.Include``1(System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,{TValidator}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Include``1(System.Func{`0,``0})
        name: Include<TValidator>
        nameWithType: AbstractValidator<CreateTopicRequestDTO>.Include<TValidator>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.CreateTopicRequestDTO>.Include<TValidator>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValidator
        nameWithType: TValidator
        qualifiedName: TValidator
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Include``1(System.Func{`0,``0})
        name: Include(Of TValidator)
        nameWithType: AbstractValidator(Of CreateTopicRequestDTO).Include(Of TValidator)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.CreateTopicRequestDTO).Include(Of TValidator)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValidator
        nameWithType: TValidator
        qualifiedName: TValidator
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Include``1(System.Func{`0,``0})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.Include``1(System.Func{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,``0})
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.GetEnumerator:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.GetEnumerator
        name: GetEnumerator
        nameWithType: AbstractValidator<CreateTopicRequestDTO>.GetEnumerator
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.CreateTopicRequestDTO>.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.GetEnumerator
        name: GetEnumerator
        nameWithType: AbstractValidator(Of CreateTopicRequestDTO).GetEnumerator
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.CreateTopicRequestDTO).GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.GetEnumerator
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.GetEnumerator
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.System#Collections#IEnumerable#GetEnumerator
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.System#Collections#IEnumerable#GetEnumerator
        name: IEnumerable.GetEnumerator
        nameWithType: AbstractValidator<CreateTopicRequestDTO>.IEnumerable.GetEnumerator
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.CreateTopicRequestDTO>.System.Collections.IEnumerable.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.System#Collections#IEnumerable#GetEnumerator
        name: System.Collections.IEnumerable.GetEnumerator
        nameWithType: AbstractValidator(Of CreateTopicRequestDTO).System.Collections.IEnumerable.GetEnumerator
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.CreateTopicRequestDTO).System.Collections.IEnumerable.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.System#Collections#IEnumerable#GetEnumerator
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.System#Collections#IEnumerable#GetEnumerator
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.EnsureInstanceNotNull(System.Object):
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.EnsureInstanceNotNull(System.Object)
        name: EnsureInstanceNotNull
        nameWithType: AbstractValidator<CreateTopicRequestDTO>.EnsureInstanceNotNull
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.CreateTopicRequestDTO>.EnsureInstanceNotNull
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.EnsureInstanceNotNull(System.Object)
        name: EnsureInstanceNotNull
        nameWithType: AbstractValidator(Of CreateTopicRequestDTO).EnsureInstanceNotNull
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.CreateTopicRequestDTO).EnsureInstanceNotNull
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.EnsureInstanceNotNull(System.Object)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.EnsureInstanceNotNull(System.Object)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.PreValidate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO},FluentValidation.Results.ValidationResult)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.PreValidate(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
        name: PreValidate
        nameWithType: AbstractValidator<CreateTopicRequestDTO>.PreValidate
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.CreateTopicRequestDTO>.PreValidate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.Results.ValidationResult
        name: ValidationResult
        nameWithType: ValidationResult
        qualifiedName: FluentValidation.Results.ValidationResult
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.PreValidate(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
        name: PreValidate
        nameWithType: AbstractValidator(Of CreateTopicRequestDTO).PreValidate
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.CreateTopicRequestDTO).PreValidate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.Results.ValidationResult
        name: ValidationResult
        nameWithType: ValidationResult
        qualifiedName: FluentValidation.Results.ValidationResult
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.PreValidate(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.PreValidate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO},FluentValidation.Results.ValidationResult)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.RaiseValidationException(FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO},FluentValidation.Results.ValidationResult)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RaiseValidationException(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
        name: RaiseValidationException
        nameWithType: AbstractValidator<CreateTopicRequestDTO>.RaiseValidationException
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.CreateTopicRequestDTO>.RaiseValidationException
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.Results.ValidationResult
        name: ValidationResult
        nameWithType: ValidationResult
        qualifiedName: FluentValidation.Results.ValidationResult
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.RaiseValidationException(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
        name: RaiseValidationException
        nameWithType: AbstractValidator(Of CreateTopicRequestDTO).RaiseValidationException
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.CreateTopicRequestDTO).RaiseValidationException
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.Results.ValidationResult
        name: ValidationResult
        nameWithType: ValidationResult
        qualifiedName: FluentValidation.Results.ValidationResult
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.RaiseValidationException(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.RaiseValidationException(FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO},FluentValidation.Results.ValidationResult)
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.CascadeMode:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.CascadeMode
        name: CascadeMode
        nameWithType: AbstractValidator<CreateTopicRequestDTO>.CascadeMode
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.CreateTopicRequestDTO>.CascadeMode
        isExternal: true
      VB:
      - id: FluentValidation.AbstractValidator`1.CascadeMode
        name: CascadeMode
        nameWithType: AbstractValidator(Of CreateTopicRequestDTO).CascadeMode
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.CreateTopicRequestDTO).CascadeMode
        isExternal: true
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.CascadeMode
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
    commentId: P:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.CascadeMode
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.ClassLevelCascadeMode:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.ClassLevelCascadeMode
        name: ClassLevelCascadeMode
        nameWithType: AbstractValidator<CreateTopicRequestDTO>.ClassLevelCascadeMode
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.CreateTopicRequestDTO>.ClassLevelCascadeMode
        isExternal: true
      VB:
      - id: FluentValidation.AbstractValidator`1.ClassLevelCascadeMode
        name: ClassLevelCascadeMode
        nameWithType: AbstractValidator(Of CreateTopicRequestDTO).ClassLevelCascadeMode
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.CreateTopicRequestDTO).ClassLevelCascadeMode
        isExternal: true
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.ClassLevelCascadeMode
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
    commentId: P:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.ClassLevelCascadeMode
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.RuleLevelCascadeMode:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RuleLevelCascadeMode
        name: RuleLevelCascadeMode
        nameWithType: AbstractValidator<CreateTopicRequestDTO>.RuleLevelCascadeMode
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.CreateTopicRequestDTO>.RuleLevelCascadeMode
        isExternal: true
      VB:
      - id: FluentValidation.AbstractValidator`1.RuleLevelCascadeMode
        name: RuleLevelCascadeMode
        nameWithType: AbstractValidator(Of CreateTopicRequestDTO).RuleLevelCascadeMode
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.CreateTopicRequestDTO).RuleLevelCascadeMode
        isExternal: true
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.RuleLevelCascadeMode
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
    commentId: P:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}.RuleLevelCascadeMode
  FluentValidation.IValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}:
    name:
      CSharp:
      - id: FluentValidation.IValidator`1
        name: IValidator
        nameWithType: IValidator
        qualifiedName: FluentValidation.IValidator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: FluentValidation.IValidator`1
        name: IValidator
        nameWithType: IValidator
        qualifiedName: FluentValidation.IValidator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
        name: CreateTopicRequestDTO
        nameWithType: CreateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.IValidator`1
    parent: FluentValidation
    commentId: T:FluentValidation.IValidator{Domain.DTO.Requestes.Topics.CreateTopicRequestDTO}
  Domain.DTO.Requestes.Topics.CreateTopicRequestDTOValidator.#ctor*:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTOValidator.#ctor*
        name: CreateTopicRequestDTOValidator
        nameWithType: CreateTopicRequestDTOValidator.CreateTopicRequestDTOValidator
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTOValidator.CreateTopicRequestDTOValidator
      VB:
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTOValidator.#ctor*
        name: CreateTopicRequestDTOValidator
        nameWithType: CreateTopicRequestDTOValidator.CreateTopicRequestDTOValidator
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTOValidator.CreateTopicRequestDTOValidator
    isDefinition: true
    commentId: Overload:Domain.DTO.Requestes.Topics.CreateTopicRequestDTOValidator.#ctor
  Domain.DTO.Requestes.Topics.CreateTopicRequestDTOValidator:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTOValidator
        name: CreateTopicRequestDTOValidator
        nameWithType: CreateTopicRequestDTOValidator
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTOValidator
      VB:
      - id: Domain.DTO.Requestes.Topics.CreateTopicRequestDTOValidator
        name: CreateTopicRequestDTOValidator
        nameWithType: CreateTopicRequestDTOValidator
        qualifiedName: Domain.DTO.Requestes.Topics.CreateTopicRequestDTOValidator
    isDefinition: true
    commentId: T:Domain.DTO.Requestes.Topics.CreateTopicRequestDTOValidator
  Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.IdUser*:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.IdUser*
        name: IdUser
        nameWithType: UpdateTopicRequestDTO.IdUser
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.IdUser
      VB:
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.IdUser*
        name: IdUser
        nameWithType: UpdateTopicRequestDTO.IdUser
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.IdUser
    isDefinition: true
    commentId: Overload:Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.IdUser
  Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicId*:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicId*
        name: TopicId
        nameWithType: UpdateTopicRequestDTO.TopicId
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicId
      VB:
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicId*
        name: TopicId
        nameWithType: UpdateTopicRequestDTO.TopicId
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicId
    isDefinition: true
    commentId: Overload:Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicId
  Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicTitle*:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicTitle*
        name: TopicTitle
        nameWithType: UpdateTopicRequestDTO.TopicTitle
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicTitle
      VB:
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicTitle*
        name: TopicTitle
        nameWithType: UpdateTopicRequestDTO.TopicTitle
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicTitle
    isDefinition: true
    commentId: Overload:Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicTitle
  Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicText*:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicText*
        name: TopicText
        nameWithType: UpdateTopicRequestDTO.TopicText
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicText
      VB:
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicText*
        name: TopicText
        nameWithType: UpdateTopicRequestDTO.TopicText
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicText
    isDefinition: true
    commentId: Overload:Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicText
  Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicRubricId*:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicRubricId*
        name: TopicRubricId
        nameWithType: UpdateTopicRequestDTO.TopicRubricId
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicRubricId
      VB:
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicRubricId*
        name: TopicRubricId
        nameWithType: UpdateTopicRequestDTO.TopicRubricId
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicRubricId
    isDefinition: true
    commentId: Overload:Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.TopicRubricId
  Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.Equals*:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.Equals*
        name: Equals
        nameWithType: UpdateTopicRequestDTO.Equals
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.Equals
      VB:
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.Equals*
        name: Equals
        nameWithType: UpdateTopicRequestDTO.Equals
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.Equals
    isDefinition: true
    commentId: Overload:Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO.Equals
  Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      VB:
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
    isDefinition: true
    commentId: T:Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1
        name: AbstractValidator
        nameWithType: AbstractValidator
        qualifiedName: FluentValidation.AbstractValidator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: FluentValidation.AbstractValidator`1
        name: AbstractValidator
        nameWithType: AbstractValidator
        qualifiedName: FluentValidation.AbstractValidator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1
    parent: FluentValidation
    commentId: T:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
        name: IValidator.Validate
        nameWithType: AbstractValidator<UpdateTopicRequestDTO>.IValidator.Validate
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO>.FluentValidation.IValidator.Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidationContext
        name: IValidationContext
        nameWithType: IValidationContext
        qualifiedName: FluentValidation.IValidationContext
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
        name: FluentValidation.IValidator.Validate
        nameWithType: AbstractValidator(Of UpdateTopicRequestDTO).FluentValidation.IValidator.Validate
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO).FluentValidation.IValidator.Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidationContext
        name: IValidationContext
        nameWithType: IValidationContext
        qualifiedName: FluentValidation.IValidationContext
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
        name: IValidator.ValidateAsync
        nameWithType: AbstractValidator<UpdateTopicRequestDTO>.IValidator.ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO>.FluentValidation.IValidator.ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidationContext
        name: IValidationContext
        nameWithType: IValidationContext
        qualifiedName: FluentValidation.IValidationContext
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
        name: FluentValidation.IValidator.ValidateAsync
        nameWithType: AbstractValidator(Of UpdateTopicRequestDTO).FluentValidation.IValidator.ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO).FluentValidation.IValidator.ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidationContext
        name: IValidationContext
        nameWithType: IValidationContext
        qualifiedName: FluentValidation.IValidationContext
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.Validate(Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Validate(`0)
        name: Validate
        nameWithType: AbstractValidator<UpdateTopicRequestDTO>.Validate
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO>.Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Validate(`0)
        name: Validate
        nameWithType: AbstractValidator(Of UpdateTopicRequestDTO).Validate
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO).Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Validate(`0)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.Validate(Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.ValidateAsync(Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,System.Threading.CancellationToken)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.ValidateAsync(`0,System.Threading.CancellationToken)
        name: ValidateAsync
        nameWithType: AbstractValidator<UpdateTopicRequestDTO>.ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO>.ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.ValidateAsync(`0,System.Threading.CancellationToken)
        name: ValidateAsync
        nameWithType: AbstractValidator(Of UpdateTopicRequestDTO).ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO).ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.ValidateAsync(`0,System.Threading.CancellationToken)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.ValidateAsync(Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,System.Threading.CancellationToken)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.Validate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Validate(FluentValidation.ValidationContext{`0})
        name: Validate
        nameWithType: AbstractValidator<UpdateTopicRequestDTO>.Validate
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO>.Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Validate(FluentValidation.ValidationContext{`0})
        name: Validate
        nameWithType: AbstractValidator(Of UpdateTopicRequestDTO).Validate
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO).Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Validate(FluentValidation.ValidationContext{`0})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.Validate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.ValidateAsync(FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO},System.Threading.CancellationToken)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.ValidateAsync(FluentValidation.ValidationContext{`0},System.Threading.CancellationToken)
        name: ValidateAsync
        nameWithType: AbstractValidator<UpdateTopicRequestDTO>.ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO>.ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.ValidateAsync(FluentValidation.ValidationContext{`0},System.Threading.CancellationToken)
        name: ValidateAsync
        nameWithType: AbstractValidator(Of UpdateTopicRequestDTO).ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO).ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.ValidateAsync(FluentValidation.ValidationContext{`0},System.Threading.CancellationToken)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.ValidateAsync(FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO},System.Threading.CancellationToken)
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.CreateDescriptor:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.CreateDescriptor
        name: CreateDescriptor
        nameWithType: AbstractValidator<UpdateTopicRequestDTO>.CreateDescriptor
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO>.CreateDescriptor
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.CreateDescriptor
        name: CreateDescriptor
        nameWithType: AbstractValidator(Of UpdateTopicRequestDTO).CreateDescriptor
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO).CreateDescriptor
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.CreateDescriptor
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.CreateDescriptor
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
        name: IValidator.CanValidateInstancesOfType
        nameWithType: AbstractValidator<UpdateTopicRequestDTO>.IValidator.CanValidateInstancesOfType
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO>.FluentValidation.IValidator.CanValidateInstancesOfType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
        name: FluentValidation.IValidator.CanValidateInstancesOfType
        nameWithType: AbstractValidator(Of UpdateTopicRequestDTO).FluentValidation.IValidator.CanValidateInstancesOfType
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO).FluentValidation.IValidator.CanValidateInstancesOfType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.RuleFor``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,{TProperty}}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
        name: RuleFor<TProperty>
        nameWithType: AbstractValidator<UpdateTopicRequestDTO>.RuleFor<TProperty>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO>.RuleFor<TProperty>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
        name: RuleFor(Of TProperty)
        nameWithType: AbstractValidator(Of UpdateTopicRequestDTO).RuleFor(Of TProperty)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO).RuleFor(Of TProperty)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.RuleFor``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,``0}})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,{TProperty}}},System.Func{{TProperty},{TTransformed}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``1})
        name: Transform<TProperty, TTransformed>
        nameWithType: AbstractValidator<UpdateTopicRequestDTO>.Transform<TProperty, TTransformed>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO>.Transform<TProperty, TTransformed>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``1})
        name: Transform(Of TProperty, TTransformed)
        nameWithType: AbstractValidator(Of UpdateTopicRequestDTO).Transform(Of TProperty, TTransformed)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO).Transform(Of TProperty, TTransformed)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``1})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,``0}},System.Func{``0,``1})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,{TProperty}}},System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,{TProperty},{TTransformed}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{`0,``0,``1})
        name: Transform<TProperty, TTransformed>
        nameWithType: AbstractValidator<UpdateTopicRequestDTO>.Transform<TProperty, TTransformed>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO>.Transform<TProperty, TTransformed>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{`0,``0,``1})
        name: Transform(Of TProperty, TTransformed)
        nameWithType: AbstractValidator(Of UpdateTopicRequestDTO).Transform(Of TProperty, TTransformed)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO).Transform(Of TProperty, TTransformed)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{`0,``0,``1})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,``0}},System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,``0,``1})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})
        name: RuleForEach<TElement>
        nameWithType: AbstractValidator<UpdateTopicRequestDTO>.RuleForEach<TElement>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO>.RuleForEach<TElement>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})
        name: RuleForEach(Of TElement)
        nameWithType: AbstractValidator(Of UpdateTopicRequestDTO).RuleForEach(Of TElement)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO).RuleForEach(Of TElement)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,System.Collections.Generic.IEnumerable{``0}}})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}},System.Func{{TElement},{TTransformed}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1})
        name: TransformForEach<TElement, TTransformed>
        nameWithType: AbstractValidator<UpdateTopicRequestDTO>.TransformForEach<TElement, TTransformed>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO>.TransformForEach<TElement, TTransformed>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1})
        name: TransformForEach(Of TElement, TTransformed)
        nameWithType: AbstractValidator(Of UpdateTopicRequestDTO).TransformForEach(Of TElement, TTransformed)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO).TransformForEach(Of TElement, TTransformed)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}},System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,{TElement},{TTransformed}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{`0,``0,``1})
        name: TransformForEach<TElement, TTransformed>
        nameWithType: AbstractValidator<UpdateTopicRequestDTO>.TransformForEach<TElement, TTransformed>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO>.TransformForEach<TElement, TTransformed>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{`0,``0,``1})
        name: TransformForEach(Of TElement, TTransformed)
        nameWithType: AbstractValidator(Of UpdateTopicRequestDTO).TransformForEach(Of TElement, TTransformed)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO).TransformForEach(Of TElement, TTransformed)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{`0,``0,``1})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,System.Collections.Generic.IEnumerable{``0}}},System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,``0,``1})
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.RuleSet(System.String,System.Action):
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RuleSet(System.String,System.Action)
        name: RuleSet
        nameWithType: AbstractValidator<UpdateTopicRequestDTO>.RuleSet
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO>.RuleSet
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.RuleSet(System.String,System.Action)
        name: RuleSet
        nameWithType: AbstractValidator(Of UpdateTopicRequestDTO).RuleSet
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO).RuleSet
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.RuleSet(System.String,System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.RuleSet(System.String,System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.When(System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,System.Boolean},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.When(System.Func{`0,System.Boolean},System.Action)
        name: When
        nameWithType: AbstractValidator<UpdateTopicRequestDTO>.When
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO>.When
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.When(System.Func{`0,System.Boolean},System.Action)
        name: When
        nameWithType: AbstractValidator(Of UpdateTopicRequestDTO).When
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO).When
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.When(System.Func{`0,System.Boolean},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.When(System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,System.Boolean},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.When(System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO},System.Boolean},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.When(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
        name: When
        nameWithType: AbstractValidator<UpdateTopicRequestDTO>.When
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO>.When
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.When(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
        name: When
        nameWithType: AbstractValidator(Of UpdateTopicRequestDTO).When
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO).When
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.When(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.When(System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO},System.Boolean},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,System.Boolean},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,System.Boolean},System.Action)
        name: Unless
        nameWithType: AbstractValidator<UpdateTopicRequestDTO>.Unless
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO>.Unless
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,System.Boolean},System.Action)
        name: Unless
        nameWithType: AbstractValidator(Of UpdateTopicRequestDTO).Unless
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO).Unless
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,System.Boolean},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,System.Boolean},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO},System.Boolean},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
        name: Unless
        nameWithType: AbstractValidator<UpdateTopicRequestDTO>.Unless
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO>.Unless
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
        name: Unless
        nameWithType: AbstractValidator(Of UpdateTopicRequestDTO).Unless
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO).Unless
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO},System.Boolean},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: WhenAsync
        nameWithType: AbstractValidator<UpdateTopicRequestDTO>.WhenAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO>.WhenAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: WhenAsync
        nameWithType: AbstractValidator(Of UpdateTopicRequestDTO).WhenAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO).WhenAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: WhenAsync
        nameWithType: AbstractValidator<UpdateTopicRequestDTO>.WhenAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO>.WhenAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`4
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: WhenAsync
        nameWithType: AbstractValidator(Of UpdateTopicRequestDTO).WhenAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO).WhenAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`4
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: UnlessAsync
        nameWithType: AbstractValidator<UpdateTopicRequestDTO>.UnlessAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO>.UnlessAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: UnlessAsync
        nameWithType: AbstractValidator(Of UpdateTopicRequestDTO).UnlessAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO).UnlessAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: UnlessAsync
        nameWithType: AbstractValidator<UpdateTopicRequestDTO>.UnlessAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO>.UnlessAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`4
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: UnlessAsync
        nameWithType: AbstractValidator(Of UpdateTopicRequestDTO).UnlessAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO).UnlessAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`4
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.Include(FluentValidation.IValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Include(FluentValidation.IValidator{`0})
        name: Include
        nameWithType: AbstractValidator<UpdateTopicRequestDTO>.Include
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO>.Include
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidator`1
        name: IValidator
        nameWithType: IValidator
        qualifiedName: FluentValidation.IValidator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Include(FluentValidation.IValidator{`0})
        name: Include
        nameWithType: AbstractValidator(Of UpdateTopicRequestDTO).Include
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO).Include
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidator`1
        name: IValidator
        nameWithType: IValidator
        qualifiedName: FluentValidation.IValidator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Include(FluentValidation.IValidator{`0})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.Include(FluentValidation.IValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.Include``1(System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,{TValidator}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Include``1(System.Func{`0,``0})
        name: Include<TValidator>
        nameWithType: AbstractValidator<UpdateTopicRequestDTO>.Include<TValidator>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO>.Include<TValidator>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValidator
        nameWithType: TValidator
        qualifiedName: TValidator
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Include``1(System.Func{`0,``0})
        name: Include(Of TValidator)
        nameWithType: AbstractValidator(Of UpdateTopicRequestDTO).Include(Of TValidator)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO).Include(Of TValidator)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValidator
        nameWithType: TValidator
        qualifiedName: TValidator
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Include``1(System.Func{`0,``0})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.Include``1(System.Func{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,``0})
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.GetEnumerator:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.GetEnumerator
        name: GetEnumerator
        nameWithType: AbstractValidator<UpdateTopicRequestDTO>.GetEnumerator
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO>.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.GetEnumerator
        name: GetEnumerator
        nameWithType: AbstractValidator(Of UpdateTopicRequestDTO).GetEnumerator
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO).GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.GetEnumerator
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.GetEnumerator
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.System#Collections#IEnumerable#GetEnumerator
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.System#Collections#IEnumerable#GetEnumerator
        name: IEnumerable.GetEnumerator
        nameWithType: AbstractValidator<UpdateTopicRequestDTO>.IEnumerable.GetEnumerator
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO>.System.Collections.IEnumerable.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.System#Collections#IEnumerable#GetEnumerator
        name: System.Collections.IEnumerable.GetEnumerator
        nameWithType: AbstractValidator(Of UpdateTopicRequestDTO).System.Collections.IEnumerable.GetEnumerator
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO).System.Collections.IEnumerable.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.System#Collections#IEnumerable#GetEnumerator
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.System#Collections#IEnumerable#GetEnumerator
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.EnsureInstanceNotNull(System.Object):
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.EnsureInstanceNotNull(System.Object)
        name: EnsureInstanceNotNull
        nameWithType: AbstractValidator<UpdateTopicRequestDTO>.EnsureInstanceNotNull
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO>.EnsureInstanceNotNull
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.EnsureInstanceNotNull(System.Object)
        name: EnsureInstanceNotNull
        nameWithType: AbstractValidator(Of UpdateTopicRequestDTO).EnsureInstanceNotNull
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO).EnsureInstanceNotNull
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.EnsureInstanceNotNull(System.Object)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.EnsureInstanceNotNull(System.Object)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.PreValidate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO},FluentValidation.Results.ValidationResult)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.PreValidate(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
        name: PreValidate
        nameWithType: AbstractValidator<UpdateTopicRequestDTO>.PreValidate
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO>.PreValidate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.Results.ValidationResult
        name: ValidationResult
        nameWithType: ValidationResult
        qualifiedName: FluentValidation.Results.ValidationResult
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.PreValidate(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
        name: PreValidate
        nameWithType: AbstractValidator(Of UpdateTopicRequestDTO).PreValidate
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO).PreValidate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.Results.ValidationResult
        name: ValidationResult
        nameWithType: ValidationResult
        qualifiedName: FluentValidation.Results.ValidationResult
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.PreValidate(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.PreValidate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO},FluentValidation.Results.ValidationResult)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.RaiseValidationException(FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO},FluentValidation.Results.ValidationResult)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RaiseValidationException(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
        name: RaiseValidationException
        nameWithType: AbstractValidator<UpdateTopicRequestDTO>.RaiseValidationException
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO>.RaiseValidationException
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.Results.ValidationResult
        name: ValidationResult
        nameWithType: ValidationResult
        qualifiedName: FluentValidation.Results.ValidationResult
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.RaiseValidationException(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
        name: RaiseValidationException
        nameWithType: AbstractValidator(Of UpdateTopicRequestDTO).RaiseValidationException
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO).RaiseValidationException
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.Results.ValidationResult
        name: ValidationResult
        nameWithType: ValidationResult
        qualifiedName: FluentValidation.Results.ValidationResult
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.RaiseValidationException(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.RaiseValidationException(FluentValidation.ValidationContext{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO},FluentValidation.Results.ValidationResult)
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.CascadeMode:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.CascadeMode
        name: CascadeMode
        nameWithType: AbstractValidator<UpdateTopicRequestDTO>.CascadeMode
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO>.CascadeMode
        isExternal: true
      VB:
      - id: FluentValidation.AbstractValidator`1.CascadeMode
        name: CascadeMode
        nameWithType: AbstractValidator(Of UpdateTopicRequestDTO).CascadeMode
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO).CascadeMode
        isExternal: true
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.CascadeMode
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
    commentId: P:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.CascadeMode
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.ClassLevelCascadeMode:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.ClassLevelCascadeMode
        name: ClassLevelCascadeMode
        nameWithType: AbstractValidator<UpdateTopicRequestDTO>.ClassLevelCascadeMode
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO>.ClassLevelCascadeMode
        isExternal: true
      VB:
      - id: FluentValidation.AbstractValidator`1.ClassLevelCascadeMode
        name: ClassLevelCascadeMode
        nameWithType: AbstractValidator(Of UpdateTopicRequestDTO).ClassLevelCascadeMode
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO).ClassLevelCascadeMode
        isExternal: true
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.ClassLevelCascadeMode
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
    commentId: P:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.ClassLevelCascadeMode
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.RuleLevelCascadeMode:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RuleLevelCascadeMode
        name: RuleLevelCascadeMode
        nameWithType: AbstractValidator<UpdateTopicRequestDTO>.RuleLevelCascadeMode
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO>.RuleLevelCascadeMode
        isExternal: true
      VB:
      - id: FluentValidation.AbstractValidator`1.RuleLevelCascadeMode
        name: RuleLevelCascadeMode
        nameWithType: AbstractValidator(Of UpdateTopicRequestDTO).RuleLevelCascadeMode
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO).RuleLevelCascadeMode
        isExternal: true
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.RuleLevelCascadeMode
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
    commentId: P:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}.RuleLevelCascadeMode
  FluentValidation.IValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}:
    name:
      CSharp:
      - id: FluentValidation.IValidator`1
        name: IValidator
        nameWithType: IValidator
        qualifiedName: FluentValidation.IValidator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: FluentValidation.IValidator`1
        name: IValidator
        nameWithType: IValidator
        qualifiedName: FluentValidation.IValidator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
        name: UpdateTopicRequestDTO
        nameWithType: UpdateTopicRequestDTO
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.IValidator`1
    parent: FluentValidation
    commentId: T:FluentValidation.IValidator{Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO}
  Domain.DTO.Requestes.Topics.UpdateTopicRequestDTOValidator.#ctor*:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTOValidator.#ctor*
        name: UpdateTopicRequestDTOValidator
        nameWithType: UpdateTopicRequestDTOValidator.UpdateTopicRequestDTOValidator
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTOValidator.UpdateTopicRequestDTOValidator
      VB:
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTOValidator.#ctor*
        name: UpdateTopicRequestDTOValidator
        nameWithType: UpdateTopicRequestDTOValidator.UpdateTopicRequestDTOValidator
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTOValidator.UpdateTopicRequestDTOValidator
    isDefinition: true
    commentId: Overload:Domain.DTO.Requestes.Topics.UpdateTopicRequestDTOValidator.#ctor
  Domain.DTO.Requestes.Topics.UpdateTopicRequestDTOValidator:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTOValidator
        name: UpdateTopicRequestDTOValidator
        nameWithType: UpdateTopicRequestDTOValidator
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTOValidator
      VB:
      - id: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTOValidator
        name: UpdateTopicRequestDTOValidator
        nameWithType: UpdateTopicRequestDTOValidator
        qualifiedName: Domain.DTO.Requestes.Topics.UpdateTopicRequestDTOValidator
    isDefinition: true
    commentId: T:Domain.DTO.Requestes.Topics.UpdateTopicRequestDTOValidator
  Domain.DTO.Requestes.Topics:
    name:
      CSharp:
      - name: Domain.DTO.Requestes.Topics
        nameWithType: Domain.DTO.Requestes.Topics
        qualifiedName: Domain.DTO.Requestes.Topics
      VB:
      - name: Domain.DTO.Requestes.Topics
        nameWithType: Domain.DTO.Requestes.Topics
        qualifiedName: Domain.DTO.Requestes.Topics
    isDefinition: true
    commentId: N:Domain.DTO.Requestes.Topics
  Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Name*:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Name*
        name: Name
        nameWithType: UpdateUserRequestDTO.Name
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Name
      VB:
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Name*
        name: Name
        nameWithType: UpdateUserRequestDTO.Name
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Name
    isDefinition: true
    commentId: Overload:Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Name
  Domain.DTO.Requestes.Users.UpdateUserRequestDTO.First_Name*:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.First_Name*
        name: First_Name
        nameWithType: UpdateUserRequestDTO.First_Name
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.First_Name
      VB:
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.First_Name*
        name: First_Name
        nameWithType: UpdateUserRequestDTO.First_Name
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.First_Name
    isDefinition: true
    commentId: Overload:Domain.DTO.Requestes.Users.UpdateUserRequestDTO.First_Name
  Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Login_Name*:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Login_Name*
        name: Login_Name
        nameWithType: UpdateUserRequestDTO.Login_Name
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Login_Name
      VB:
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Login_Name*
        name: Login_Name
        nameWithType: UpdateUserRequestDTO.Login_Name
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Login_Name
    isDefinition: true
    commentId: Overload:Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Login_Name
  Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Ph_No*:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Ph_No*
        name: Ph_No
        nameWithType: UpdateUserRequestDTO.Ph_No
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Ph_No
      VB:
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Ph_No*
        name: Ph_No
        nameWithType: UpdateUserRequestDTO.Ph_No
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Ph_No
    isDefinition: true
    commentId: Overload:Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Ph_No
  Domain.DTO.Requestes.Users.UpdateUserRequestDTO.E_Mail*:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.E_Mail*
        name: E_Mail
        nameWithType: UpdateUserRequestDTO.E_Mail
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.E_Mail
      VB:
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.E_Mail*
        name: E_Mail
        nameWithType: UpdateUserRequestDTO.E_Mail
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.E_Mail
    isDefinition: true
    commentId: Overload:Domain.DTO.Requestes.Users.UpdateUserRequestDTO.E_Mail
  Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Password*:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Password*
        name: Password
        nameWithType: UpdateUserRequestDTO.Password
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Password
      VB:
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Password*
        name: Password
        nameWithType: UpdateUserRequestDTO.Password
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Password
    isDefinition: true
    commentId: Overload:Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Password
  Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Id*:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Id*
        name: Id
        nameWithType: UpdateUserRequestDTO.Id
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Id
      VB:
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Id*
        name: Id
        nameWithType: UpdateUserRequestDTO.Id
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Id
    isDefinition: true
    commentId: Overload:Domain.DTO.Requestes.Users.UpdateUserRequestDTO.Id
  Domain.DTO.Requestes.Users.UpdateUserRequestDTO:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      VB:
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
    isDefinition: true
    commentId: T:Domain.DTO.Requestes.Users.UpdateUserRequestDTO
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1
        name: AbstractValidator
        nameWithType: AbstractValidator
        qualifiedName: FluentValidation.AbstractValidator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: FluentValidation.AbstractValidator`1
        name: AbstractValidator
        nameWithType: AbstractValidator
        qualifiedName: FluentValidation.AbstractValidator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1
    parent: FluentValidation
    commentId: T:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
        name: IValidator.Validate
        nameWithType: AbstractValidator<UpdateUserRequestDTO>.IValidator.Validate
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Users.UpdateUserRequestDTO>.FluentValidation.IValidator.Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidationContext
        name: IValidationContext
        nameWithType: IValidationContext
        qualifiedName: FluentValidation.IValidationContext
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
        name: FluentValidation.IValidator.Validate
        nameWithType: AbstractValidator(Of UpdateUserRequestDTO).FluentValidation.IValidator.Validate
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Users.UpdateUserRequestDTO).FluentValidation.IValidator.Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidationContext
        name: IValidationContext
        nameWithType: IValidationContext
        qualifiedName: FluentValidation.IValidationContext
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.FluentValidation#IValidator#Validate(FluentValidation.IValidationContext)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
        name: IValidator.ValidateAsync
        nameWithType: AbstractValidator<UpdateUserRequestDTO>.IValidator.ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Users.UpdateUserRequestDTO>.FluentValidation.IValidator.ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidationContext
        name: IValidationContext
        nameWithType: IValidationContext
        qualifiedName: FluentValidation.IValidationContext
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
        name: FluentValidation.IValidator.ValidateAsync
        nameWithType: AbstractValidator(Of UpdateUserRequestDTO).FluentValidation.IValidator.ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Users.UpdateUserRequestDTO).FluentValidation.IValidator.ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidationContext
        name: IValidationContext
        nameWithType: IValidationContext
        qualifiedName: FluentValidation.IValidationContext
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.FluentValidation#IValidator#ValidateAsync(FluentValidation.IValidationContext,System.Threading.CancellationToken)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.Validate(Domain.DTO.Requestes.Users.UpdateUserRequestDTO)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Validate(`0)
        name: Validate
        nameWithType: AbstractValidator<UpdateUserRequestDTO>.Validate
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Users.UpdateUserRequestDTO>.Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Validate(`0)
        name: Validate
        nameWithType: AbstractValidator(Of UpdateUserRequestDTO).Validate
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Users.UpdateUserRequestDTO).Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Validate(`0)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.Validate(Domain.DTO.Requestes.Users.UpdateUserRequestDTO)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.ValidateAsync(Domain.DTO.Requestes.Users.UpdateUserRequestDTO,System.Threading.CancellationToken)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.ValidateAsync(`0,System.Threading.CancellationToken)
        name: ValidateAsync
        nameWithType: AbstractValidator<UpdateUserRequestDTO>.ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Users.UpdateUserRequestDTO>.ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.ValidateAsync(`0,System.Threading.CancellationToken)
        name: ValidateAsync
        nameWithType: AbstractValidator(Of UpdateUserRequestDTO).ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Users.UpdateUserRequestDTO).ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.ValidateAsync(`0,System.Threading.CancellationToken)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.ValidateAsync(Domain.DTO.Requestes.Users.UpdateUserRequestDTO,System.Threading.CancellationToken)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.Validate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Users.UpdateUserRequestDTO})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Validate(FluentValidation.ValidationContext{`0})
        name: Validate
        nameWithType: AbstractValidator<UpdateUserRequestDTO>.Validate
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Users.UpdateUserRequestDTO>.Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Validate(FluentValidation.ValidationContext{`0})
        name: Validate
        nameWithType: AbstractValidator(Of UpdateUserRequestDTO).Validate
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Users.UpdateUserRequestDTO).Validate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Validate(FluentValidation.ValidationContext{`0})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.Validate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Users.UpdateUserRequestDTO})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.ValidateAsync(FluentValidation.ValidationContext{Domain.DTO.Requestes.Users.UpdateUserRequestDTO},System.Threading.CancellationToken)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.ValidateAsync(FluentValidation.ValidationContext{`0},System.Threading.CancellationToken)
        name: ValidateAsync
        nameWithType: AbstractValidator<UpdateUserRequestDTO>.ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Users.UpdateUserRequestDTO>.ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.ValidateAsync(FluentValidation.ValidationContext{`0},System.Threading.CancellationToken)
        name: ValidateAsync
        nameWithType: AbstractValidator(Of UpdateUserRequestDTO).ValidateAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Users.UpdateUserRequestDTO).ValidateAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.ValidateAsync(FluentValidation.ValidationContext{`0},System.Threading.CancellationToken)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.ValidateAsync(FluentValidation.ValidationContext{Domain.DTO.Requestes.Users.UpdateUserRequestDTO},System.Threading.CancellationToken)
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.CreateDescriptor:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.CreateDescriptor
        name: CreateDescriptor
        nameWithType: AbstractValidator<UpdateUserRequestDTO>.CreateDescriptor
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Users.UpdateUserRequestDTO>.CreateDescriptor
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.CreateDescriptor
        name: CreateDescriptor
        nameWithType: AbstractValidator(Of UpdateUserRequestDTO).CreateDescriptor
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Users.UpdateUserRequestDTO).CreateDescriptor
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.CreateDescriptor
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.CreateDescriptor
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
        name: IValidator.CanValidateInstancesOfType
        nameWithType: AbstractValidator<UpdateUserRequestDTO>.IValidator.CanValidateInstancesOfType
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Users.UpdateUserRequestDTO>.FluentValidation.IValidator.CanValidateInstancesOfType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
        name: FluentValidation.IValidator.CanValidateInstancesOfType
        nameWithType: AbstractValidator(Of UpdateUserRequestDTO).FluentValidation.IValidator.CanValidateInstancesOfType
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Users.UpdateUserRequestDTO).FluentValidation.IValidator.CanValidateInstancesOfType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.FluentValidation#IValidator#CanValidateInstancesOfType(System.Type)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.RuleFor``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,{TProperty}}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
        name: RuleFor<TProperty>
        nameWithType: AbstractValidator<UpdateUserRequestDTO>.RuleFor<TProperty>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Users.UpdateUserRequestDTO>.RuleFor<TProperty>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
        name: RuleFor(Of TProperty)
        nameWithType: AbstractValidator(Of UpdateUserRequestDTO).RuleFor(Of TProperty)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Users.UpdateUserRequestDTO).RuleFor(Of TProperty)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.RuleFor``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,``0}})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,{TProperty}}},System.Func{{TProperty},{TTransformed}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``1})
        name: Transform<TProperty, TTransformed>
        nameWithType: AbstractValidator<UpdateUserRequestDTO>.Transform<TProperty, TTransformed>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Users.UpdateUserRequestDTO>.Transform<TProperty, TTransformed>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``1})
        name: Transform(Of TProperty, TTransformed)
        nameWithType: AbstractValidator(Of UpdateUserRequestDTO).Transform(Of TProperty, TTransformed)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Users.UpdateUserRequestDTO).Transform(Of TProperty, TTransformed)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``1})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,``0}},System.Func{``0,``1})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,{TProperty}}},System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,{TProperty},{TTransformed}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{`0,``0,``1})
        name: Transform<TProperty, TTransformed>
        nameWithType: AbstractValidator<UpdateUserRequestDTO>.Transform<TProperty, TTransformed>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Users.UpdateUserRequestDTO>.Transform<TProperty, TTransformed>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{`0,``0,``1})
        name: Transform(Of TProperty, TTransformed)
        nameWithType: AbstractValidator(Of UpdateUserRequestDTO).Transform(Of TProperty, TTransformed)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Users.UpdateUserRequestDTO).Transform(Of TProperty, TTransformed)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TProperty
        nameWithType: TProperty
        qualifiedName: TProperty
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Transform``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{`0,``0,``1})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.Transform``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,``0}},System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,``0,``1})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})
        name: RuleForEach<TElement>
        nameWithType: AbstractValidator<UpdateUserRequestDTO>.RuleForEach<TElement>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Users.UpdateUserRequestDTO>.RuleForEach<TElement>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})
        name: RuleForEach(Of TElement)
        nameWithType: AbstractValidator(Of UpdateUserRequestDTO).RuleForEach(Of TElement)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Users.UpdateUserRequestDTO).RuleForEach(Of TElement)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,System.Collections.Generic.IEnumerable{``0}}})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}},System.Func{{TElement},{TTransformed}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1})
        name: TransformForEach<TElement, TTransformed>
        nameWithType: AbstractValidator<UpdateUserRequestDTO>.TransformForEach<TElement, TTransformed>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Users.UpdateUserRequestDTO>.TransformForEach<TElement, TTransformed>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1})
        name: TransformForEach(Of TElement, TTransformed)
        nameWithType: AbstractValidator(Of UpdateUserRequestDTO).TransformForEach(Of TElement, TTransformed)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Users.UpdateUserRequestDTO).TransformForEach(Of TElement, TTransformed)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,System.Collections.Generic.IEnumerable{{TElement}}}},System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,{TElement},{TTransformed}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{`0,``0,``1})
        name: TransformForEach<TElement, TTransformed>
        nameWithType: AbstractValidator<UpdateUserRequestDTO>.TransformForEach<TElement, TTransformed>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Users.UpdateUserRequestDTO>.TransformForEach<TElement, TTransformed>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{`0,``0,``1})
        name: TransformForEach(Of TElement, TTransformed)
        nameWithType: AbstractValidator(Of UpdateUserRequestDTO).TransformForEach(Of TElement, TTransformed)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Users.UpdateUserRequestDTO).TransformForEach(Of TElement, TTransformed)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Linq.Expressions.Expression`1
        name: Expression
        nameWithType: Expression
        qualifiedName: System.Linq.Expressions.Expression
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TElement
        nameWithType: TElement
        qualifiedName: TElement
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TTransformed
        nameWithType: TTransformed
        qualifiedName: TTransformed
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{`0,``0,``1})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.TransformForEach``2(System.Linq.Expressions.Expression{System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,System.Collections.Generic.IEnumerable{``0}}},System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,``0,``1})
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.RuleSet(System.String,System.Action):
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RuleSet(System.String,System.Action)
        name: RuleSet
        nameWithType: AbstractValidator<UpdateUserRequestDTO>.RuleSet
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Users.UpdateUserRequestDTO>.RuleSet
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.RuleSet(System.String,System.Action)
        name: RuleSet
        nameWithType: AbstractValidator(Of UpdateUserRequestDTO).RuleSet
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Users.UpdateUserRequestDTO).RuleSet
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.RuleSet(System.String,System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.RuleSet(System.String,System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.When(System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,System.Boolean},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.When(System.Func{`0,System.Boolean},System.Action)
        name: When
        nameWithType: AbstractValidator<UpdateUserRequestDTO>.When
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Users.UpdateUserRequestDTO>.When
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.When(System.Func{`0,System.Boolean},System.Action)
        name: When
        nameWithType: AbstractValidator(Of UpdateUserRequestDTO).When
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Users.UpdateUserRequestDTO).When
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.When(System.Func{`0,System.Boolean},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.When(System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,System.Boolean},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.When(System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Users.UpdateUserRequestDTO},System.Boolean},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.When(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
        name: When
        nameWithType: AbstractValidator<UpdateUserRequestDTO>.When
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Users.UpdateUserRequestDTO>.When
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.When(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
        name: When
        nameWithType: AbstractValidator(Of UpdateUserRequestDTO).When
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Users.UpdateUserRequestDTO).When
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.When(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.When(System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Users.UpdateUserRequestDTO},System.Boolean},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,System.Boolean},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,System.Boolean},System.Action)
        name: Unless
        nameWithType: AbstractValidator<UpdateUserRequestDTO>.Unless
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Users.UpdateUserRequestDTO>.Unless
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,System.Boolean},System.Action)
        name: Unless
        nameWithType: AbstractValidator(Of UpdateUserRequestDTO).Unless
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Users.UpdateUserRequestDTO).Unless
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,System.Boolean},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,System.Boolean},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Users.UpdateUserRequestDTO},System.Boolean},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
        name: Unless
        nameWithType: AbstractValidator<UpdateUserRequestDTO>.Unless
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Users.UpdateUserRequestDTO>.Unless
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
        name: Unless
        nameWithType: AbstractValidator(Of UpdateUserRequestDTO).Unless
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Users.UpdateUserRequestDTO).Unless
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Unless(System.Func{`0,FluentValidation.ValidationContext{`0},System.Boolean},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.Unless(System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Users.UpdateUserRequestDTO},System.Boolean},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: WhenAsync
        nameWithType: AbstractValidator<UpdateUserRequestDTO>.WhenAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Users.UpdateUserRequestDTO>.WhenAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: WhenAsync
        nameWithType: AbstractValidator(Of UpdateUserRequestDTO).WhenAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Users.UpdateUserRequestDTO).WhenAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Users.UpdateUserRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: WhenAsync
        nameWithType: AbstractValidator<UpdateUserRequestDTO>.WhenAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Users.UpdateUserRequestDTO>.WhenAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`4
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: WhenAsync
        nameWithType: AbstractValidator(Of UpdateUserRequestDTO).WhenAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Users.UpdateUserRequestDTO).WhenAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`4
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.WhenAsync(System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Users.UpdateUserRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: UnlessAsync
        nameWithType: AbstractValidator<UpdateUserRequestDTO>.UnlessAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Users.UpdateUserRequestDTO>.UnlessAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: UnlessAsync
        nameWithType: AbstractValidator(Of UpdateUserRequestDTO).UnlessAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Users.UpdateUserRequestDTO).UnlessAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Users.UpdateUserRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: UnlessAsync
        nameWithType: AbstractValidator<UpdateUserRequestDTO>.UnlessAsync
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Users.UpdateUserRequestDTO>.UnlessAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`4
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
        name: UnlessAsync
        nameWithType: AbstractValidator(Of UpdateUserRequestDTO).UnlessAsync
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Users.UpdateUserRequestDTO).UnlessAsync
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`4
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.UnlessAsync(System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,FluentValidation.ValidationContext{Domain.DTO.Requestes.Users.UpdateUserRequestDTO},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Action)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.Include(FluentValidation.IValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Include(FluentValidation.IValidator{`0})
        name: Include
        nameWithType: AbstractValidator<UpdateUserRequestDTO>.Include
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Users.UpdateUserRequestDTO>.Include
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidator`1
        name: IValidator
        nameWithType: IValidator
        qualifiedName: FluentValidation.IValidator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Include(FluentValidation.IValidator{`0})
        name: Include
        nameWithType: AbstractValidator(Of UpdateUserRequestDTO).Include
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Users.UpdateUserRequestDTO).Include
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.IValidator`1
        name: IValidator
        nameWithType: IValidator
        qualifiedName: FluentValidation.IValidator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Include(FluentValidation.IValidator{`0})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.Include(FluentValidation.IValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO})
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.Include``1(System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,{TValidator}})
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.Include``1(System.Func{`0,``0})
        name: Include<TValidator>
        nameWithType: AbstractValidator<UpdateUserRequestDTO>.Include<TValidator>
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Users.UpdateUserRequestDTO>.Include<TValidator>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValidator
        nameWithType: TValidator
        qualifiedName: TValidator
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.Include``1(System.Func{`0,``0})
        name: Include(Of TValidator)
        nameWithType: AbstractValidator(Of UpdateUserRequestDTO).Include(Of TValidator)
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Users.UpdateUserRequestDTO).Include(Of TValidator)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValidator
        nameWithType: TValidator
        qualifiedName: TValidator
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.Include``1(System.Func{`0,``0})
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.Include``1(System.Func{Domain.DTO.Requestes.Users.UpdateUserRequestDTO,``0})
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.GetEnumerator:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.GetEnumerator
        name: GetEnumerator
        nameWithType: AbstractValidator<UpdateUserRequestDTO>.GetEnumerator
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Users.UpdateUserRequestDTO>.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.GetEnumerator
        name: GetEnumerator
        nameWithType: AbstractValidator(Of UpdateUserRequestDTO).GetEnumerator
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Users.UpdateUserRequestDTO).GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.GetEnumerator
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.GetEnumerator
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.System#Collections#IEnumerable#GetEnumerator:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.System#Collections#IEnumerable#GetEnumerator
        name: IEnumerable.GetEnumerator
        nameWithType: AbstractValidator<UpdateUserRequestDTO>.IEnumerable.GetEnumerator
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Users.UpdateUserRequestDTO>.System.Collections.IEnumerable.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.System#Collections#IEnumerable#GetEnumerator
        name: System.Collections.IEnumerable.GetEnumerator
        nameWithType: AbstractValidator(Of UpdateUserRequestDTO).System.Collections.IEnumerable.GetEnumerator
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Users.UpdateUserRequestDTO).System.Collections.IEnumerable.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.System#Collections#IEnumerable#GetEnumerator
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.System#Collections#IEnumerable#GetEnumerator
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.EnsureInstanceNotNull(System.Object):
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.EnsureInstanceNotNull(System.Object)
        name: EnsureInstanceNotNull
        nameWithType: AbstractValidator<UpdateUserRequestDTO>.EnsureInstanceNotNull
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Users.UpdateUserRequestDTO>.EnsureInstanceNotNull
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.EnsureInstanceNotNull(System.Object)
        name: EnsureInstanceNotNull
        nameWithType: AbstractValidator(Of UpdateUserRequestDTO).EnsureInstanceNotNull
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Users.UpdateUserRequestDTO).EnsureInstanceNotNull
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.EnsureInstanceNotNull(System.Object)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.EnsureInstanceNotNull(System.Object)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.PreValidate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Users.UpdateUserRequestDTO},FluentValidation.Results.ValidationResult)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.PreValidate(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
        name: PreValidate
        nameWithType: AbstractValidator<UpdateUserRequestDTO>.PreValidate
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Users.UpdateUserRequestDTO>.PreValidate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.Results.ValidationResult
        name: ValidationResult
        nameWithType: ValidationResult
        qualifiedName: FluentValidation.Results.ValidationResult
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.PreValidate(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
        name: PreValidate
        nameWithType: AbstractValidator(Of UpdateUserRequestDTO).PreValidate
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Users.UpdateUserRequestDTO).PreValidate
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.Results.ValidationResult
        name: ValidationResult
        nameWithType: ValidationResult
        qualifiedName: FluentValidation.Results.ValidationResult
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.PreValidate(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.PreValidate(FluentValidation.ValidationContext{Domain.DTO.Requestes.Users.UpdateUserRequestDTO},FluentValidation.Results.ValidationResult)
  ? FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.RaiseValidationException(FluentValidation.ValidationContext{Domain.DTO.Requestes.Users.UpdateUserRequestDTO},FluentValidation.Results.ValidationResult)
  : name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RaiseValidationException(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
        name: RaiseValidationException
        nameWithType: AbstractValidator<UpdateUserRequestDTO>.RaiseValidationException
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Users.UpdateUserRequestDTO>.RaiseValidationException
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.Results.ValidationResult
        name: ValidationResult
        nameWithType: ValidationResult
        qualifiedName: FluentValidation.Results.ValidationResult
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: FluentValidation.AbstractValidator`1.RaiseValidationException(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
        name: RaiseValidationException
        nameWithType: AbstractValidator(Of UpdateUserRequestDTO).RaiseValidationException
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Users.UpdateUserRequestDTO).RaiseValidationException
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: FluentValidation.ValidationContext`1
        name: ValidationContext
        nameWithType: ValidationContext
        qualifiedName: FluentValidation.ValidationContext
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: FluentValidation.Results.ValidationResult
        name: ValidationResult
        nameWithType: ValidationResult
        qualifiedName: FluentValidation.Results.ValidationResult
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.RaiseValidationException(FluentValidation.ValidationContext{`0},FluentValidation.Results.ValidationResult)
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
    commentId: M:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.RaiseValidationException(FluentValidation.ValidationContext{Domain.DTO.Requestes.Users.UpdateUserRequestDTO},FluentValidation.Results.ValidationResult)
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.CascadeMode:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.CascadeMode
        name: CascadeMode
        nameWithType: AbstractValidator<UpdateUserRequestDTO>.CascadeMode
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Users.UpdateUserRequestDTO>.CascadeMode
        isExternal: true
      VB:
      - id: FluentValidation.AbstractValidator`1.CascadeMode
        name: CascadeMode
        nameWithType: AbstractValidator(Of UpdateUserRequestDTO).CascadeMode
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Users.UpdateUserRequestDTO).CascadeMode
        isExternal: true
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.CascadeMode
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
    commentId: P:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.CascadeMode
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.ClassLevelCascadeMode:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.ClassLevelCascadeMode
        name: ClassLevelCascadeMode
        nameWithType: AbstractValidator<UpdateUserRequestDTO>.ClassLevelCascadeMode
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Users.UpdateUserRequestDTO>.ClassLevelCascadeMode
        isExternal: true
      VB:
      - id: FluentValidation.AbstractValidator`1.ClassLevelCascadeMode
        name: ClassLevelCascadeMode
        nameWithType: AbstractValidator(Of UpdateUserRequestDTO).ClassLevelCascadeMode
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Users.UpdateUserRequestDTO).ClassLevelCascadeMode
        isExternal: true
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.ClassLevelCascadeMode
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
    commentId: P:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.ClassLevelCascadeMode
  FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.RuleLevelCascadeMode:
    name:
      CSharp:
      - id: FluentValidation.AbstractValidator`1.RuleLevelCascadeMode
        name: RuleLevelCascadeMode
        nameWithType: AbstractValidator<UpdateUserRequestDTO>.RuleLevelCascadeMode
        qualifiedName: FluentValidation.AbstractValidator<Domain.DTO.Requestes.Users.UpdateUserRequestDTO>.RuleLevelCascadeMode
        isExternal: true
      VB:
      - id: FluentValidation.AbstractValidator`1.RuleLevelCascadeMode
        name: RuleLevelCascadeMode
        nameWithType: AbstractValidator(Of UpdateUserRequestDTO).RuleLevelCascadeMode
        qualifiedName: FluentValidation.AbstractValidator(Of Domain.DTO.Requestes.Users.UpdateUserRequestDTO).RuleLevelCascadeMode
        isExternal: true
    isDefinition: false
    definition: FluentValidation.AbstractValidator`1.RuleLevelCascadeMode
    parent: FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
    commentId: P:FluentValidation.AbstractValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}.RuleLevelCascadeMode
  FluentValidation.IValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}:
    name:
      CSharp:
      - id: FluentValidation.IValidator`1
        name: IValidator
        nameWithType: IValidator
        qualifiedName: FluentValidation.IValidator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: FluentValidation.IValidator`1
        name: IValidator
        nameWithType: IValidator
        qualifiedName: FluentValidation.IValidator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
        name: UpdateUserRequestDTO
        nameWithType: UpdateUserRequestDTO
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTO
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: FluentValidation.IValidator`1
    parent: FluentValidation
    commentId: T:FluentValidation.IValidator{Domain.DTO.Requestes.Users.UpdateUserRequestDTO}
  Domain.DTO.Requestes.Users.UpdateUserRequestDTOValidator.#ctor*:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTOValidator.#ctor*
        name: UpdateUserRequestDTOValidator
        nameWithType: UpdateUserRequestDTOValidator.UpdateUserRequestDTOValidator
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTOValidator.UpdateUserRequestDTOValidator
      VB:
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTOValidator.#ctor*
        name: UpdateUserRequestDTOValidator
        nameWithType: UpdateUserRequestDTOValidator.UpdateUserRequestDTOValidator
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTOValidator.UpdateUserRequestDTOValidator
    isDefinition: true
    commentId: Overload:Domain.DTO.Requestes.Users.UpdateUserRequestDTOValidator.#ctor
  Domain.DTO.Requestes.Users.UpdateUserRequestDTOValidator:
    name:
      CSharp:
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTOValidator
        name: UpdateUserRequestDTOValidator
        nameWithType: UpdateUserRequestDTOValidator
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTOValidator
      VB:
      - id: Domain.DTO.Requestes.Users.UpdateUserRequestDTOValidator
        name: UpdateUserRequestDTOValidator
        nameWithType: UpdateUserRequestDTOValidator
        qualifiedName: Domain.DTO.Requestes.Users.UpdateUserRequestDTOValidator
    isDefinition: true
    commentId: T:Domain.DTO.Requestes.Users.UpdateUserRequestDTOValidator
  Domain.DTO.Requestes.Users:
    name:
      CSharp:
      - name: Domain.DTO.Requestes.Users
        nameWithType: Domain.DTO.Requestes.Users
        qualifiedName: Domain.DTO.Requestes.Users
      VB:
      - name: Domain.DTO.Requestes.Users
        nameWithType: Domain.DTO.Requestes.Users
        qualifiedName: Domain.DTO.Requestes.Users
    isDefinition: true
    commentId: N:Domain.DTO.Requestes.Users
  Domain.DTO.Responses.Replies.ReplyResponseDTO.ReplyId*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Replies.ReplyResponseDTO.ReplyId*
        name: ReplyId
        nameWithType: ReplyResponseDTO.ReplyId
        qualifiedName: Domain.DTO.Responses.Replies.ReplyResponseDTO.ReplyId
      VB:
      - id: Domain.DTO.Responses.Replies.ReplyResponseDTO.ReplyId*
        name: ReplyId
        nameWithType: ReplyResponseDTO.ReplyId
        qualifiedName: Domain.DTO.Responses.Replies.ReplyResponseDTO.ReplyId
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Replies.ReplyResponseDTO.ReplyId
  Domain.DTO.Responses.Replies.ReplyResponseDTO.ReplyText*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Replies.ReplyResponseDTO.ReplyText*
        name: ReplyText
        nameWithType: ReplyResponseDTO.ReplyText
        qualifiedName: Domain.DTO.Responses.Replies.ReplyResponseDTO.ReplyText
      VB:
      - id: Domain.DTO.Responses.Replies.ReplyResponseDTO.ReplyText*
        name: ReplyText
        nameWithType: ReplyResponseDTO.ReplyText
        qualifiedName: Domain.DTO.Responses.Replies.ReplyResponseDTO.ReplyText
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Replies.ReplyResponseDTO.ReplyText
  System.Nullable{System.DateTime}:
    name:
      CSharp:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: System.DateTime
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: System.DateTime
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Nullable`1
    parent: System
    commentId: T:System.Nullable{System.DateTime}
  Domain.DTO.Responses.Replies.ReplyResponseDTO.ReplyDate*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Replies.ReplyResponseDTO.ReplyDate*
        name: ReplyDate
        nameWithType: ReplyResponseDTO.ReplyDate
        qualifiedName: Domain.DTO.Responses.Replies.ReplyResponseDTO.ReplyDate
      VB:
      - id: Domain.DTO.Responses.Replies.ReplyResponseDTO.ReplyDate*
        name: ReplyDate
        nameWithType: ReplyResponseDTO.ReplyDate
        qualifiedName: Domain.DTO.Responses.Replies.ReplyResponseDTO.ReplyDate
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Replies.ReplyResponseDTO.ReplyDate
  Domain.DTO.Responses.Replies.ReplyResponseDTO.ParentReplyId*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Replies.ReplyResponseDTO.ParentReplyId*
        name: ParentReplyId
        nameWithType: ReplyResponseDTO.ParentReplyId
        qualifiedName: Domain.DTO.Responses.Replies.ReplyResponseDTO.ParentReplyId
      VB:
      - id: Domain.DTO.Responses.Replies.ReplyResponseDTO.ParentReplyId*
        name: ParentReplyId
        nameWithType: ReplyResponseDTO.ParentReplyId
        qualifiedName: Domain.DTO.Responses.Replies.ReplyResponseDTO.ParentReplyId
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Replies.ReplyResponseDTO.ParentReplyId
  Domain.DTO.Responses.Replies.ReplyResponseDTO.CreatorId*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Replies.ReplyResponseDTO.CreatorId*
        name: CreatorId
        nameWithType: ReplyResponseDTO.CreatorId
        qualifiedName: Domain.DTO.Responses.Replies.ReplyResponseDTO.CreatorId
      VB:
      - id: Domain.DTO.Responses.Replies.ReplyResponseDTO.CreatorId*
        name: CreatorId
        nameWithType: ReplyResponseDTO.CreatorId
        qualifiedName: Domain.DTO.Responses.Replies.ReplyResponseDTO.CreatorId
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Replies.ReplyResponseDTO.CreatorId
  Domain.DTO.Responses.Replies.ReplyResponseDTO.TopicId*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Replies.ReplyResponseDTO.TopicId*
        name: TopicId
        nameWithType: ReplyResponseDTO.TopicId
        qualifiedName: Domain.DTO.Responses.Replies.ReplyResponseDTO.TopicId
      VB:
      - id: Domain.DTO.Responses.Replies.ReplyResponseDTO.TopicId*
        name: TopicId
        nameWithType: ReplyResponseDTO.TopicId
        qualifiedName: Domain.DTO.Responses.Replies.ReplyResponseDTO.TopicId
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Replies.ReplyResponseDTO.TopicId
  Domain.DTO.Responses.Replies.ReplyResponseDTO.Equals*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Replies.ReplyResponseDTO.Equals*
        name: Equals
        nameWithType: ReplyResponseDTO.Equals
        qualifiedName: Domain.DTO.Responses.Replies.ReplyResponseDTO.Equals
      VB:
      - id: Domain.DTO.Responses.Replies.ReplyResponseDTO.Equals*
        name: Equals
        nameWithType: ReplyResponseDTO.Equals
        qualifiedName: Domain.DTO.Responses.Replies.ReplyResponseDTO.Equals
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Replies.ReplyResponseDTO.Equals
  Domain.DTO.Responses.Replies.ReplyResponseDTO:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Replies.ReplyResponseDTO
        name: ReplyResponseDTO
        nameWithType: ReplyResponseDTO
        qualifiedName: Domain.DTO.Responses.Replies.ReplyResponseDTO
      VB:
      - id: Domain.DTO.Responses.Replies.ReplyResponseDTO
        name: ReplyResponseDTO
        nameWithType: ReplyResponseDTO
        qualifiedName: Domain.DTO.Responses.Replies.ReplyResponseDTO
    isDefinition: true
    commentId: T:Domain.DTO.Responses.Replies.ReplyResponseDTO
  Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ReplyId*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ReplyId*
        name: ReplyId
        nameWithType: ReplyUpdateResponseDTO.ReplyId
        qualifiedName: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ReplyId
      VB:
      - id: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ReplyId*
        name: ReplyId
        nameWithType: ReplyUpdateResponseDTO.ReplyId
        qualifiedName: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ReplyId
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ReplyId
  Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ReplyText*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ReplyText*
        name: ReplyText
        nameWithType: ReplyUpdateResponseDTO.ReplyText
        qualifiedName: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ReplyText
      VB:
      - id: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ReplyText*
        name: ReplyText
        nameWithType: ReplyUpdateResponseDTO.ReplyText
        qualifiedName: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ReplyText
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ReplyText
  Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ReplyDate*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ReplyDate*
        name: ReplyDate
        nameWithType: ReplyUpdateResponseDTO.ReplyDate
        qualifiedName: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ReplyDate
      VB:
      - id: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ReplyDate*
        name: ReplyDate
        nameWithType: ReplyUpdateResponseDTO.ReplyDate
        qualifiedName: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ReplyDate
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ReplyDate
  Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ParentReplyId*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ParentReplyId*
        name: ParentReplyId
        nameWithType: ReplyUpdateResponseDTO.ParentReplyId
        qualifiedName: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ParentReplyId
      VB:
      - id: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ParentReplyId*
        name: ParentReplyId
        nameWithType: ReplyUpdateResponseDTO.ParentReplyId
        qualifiedName: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ParentReplyId
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.ParentReplyId
  Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.CreatorId*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.CreatorId*
        name: CreatorId
        nameWithType: ReplyUpdateResponseDTO.CreatorId
        qualifiedName: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.CreatorId
      VB:
      - id: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.CreatorId*
        name: CreatorId
        nameWithType: ReplyUpdateResponseDTO.CreatorId
        qualifiedName: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.CreatorId
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.CreatorId
  Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.TopicId*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.TopicId*
        name: TopicId
        nameWithType: ReplyUpdateResponseDTO.TopicId
        qualifiedName: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.TopicId
      VB:
      - id: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.TopicId*
        name: TopicId
        nameWithType: ReplyUpdateResponseDTO.TopicId
        qualifiedName: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.TopicId
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.TopicId
  Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.Equals*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.Equals*
        name: Equals
        nameWithType: ReplyUpdateResponseDTO.Equals
        qualifiedName: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.Equals
      VB:
      - id: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.Equals*
        name: Equals
        nameWithType: ReplyUpdateResponseDTO.Equals
        qualifiedName: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.Equals
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO.Equals
  Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO
        name: ReplyUpdateResponseDTO
        nameWithType: ReplyUpdateResponseDTO
        qualifiedName: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO
      VB:
      - id: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO
        name: ReplyUpdateResponseDTO
        nameWithType: ReplyUpdateResponseDTO
        qualifiedName: Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO
    isDefinition: true
    commentId: T:Domain.DTO.Responses.Replies.ReplyUpdateResponseDTO
  Domain.DTO.Responses.Replies:
    name:
      CSharp:
      - name: Domain.DTO.Responses.Replies
        nameWithType: Domain.DTO.Responses.Replies
        qualifiedName: Domain.DTO.Responses.Replies
      VB:
      - name: Domain.DTO.Responses.Replies
        nameWithType: Domain.DTO.Responses.Replies
        qualifiedName: Domain.DTO.Responses.Replies
    isDefinition: true
    commentId: N:Domain.DTO.Responses.Replies
  Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.RubricId*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.RubricId*
        name: RubricId
        nameWithType: GetRubricsAndTopicsDetailResponseDTO.RubricId
        qualifiedName: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.RubricId
      VB:
      - id: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.RubricId*
        name: RubricId
        nameWithType: GetRubricsAndTopicsDetailResponseDTO.RubricId
        qualifiedName: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.RubricId
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.RubricId
  Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.RubricName*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.RubricName*
        name: RubricName
        nameWithType: GetRubricsAndTopicsDetailResponseDTO.RubricName
        qualifiedName: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.RubricName
      VB:
      - id: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.RubricName*
        name: RubricName
        nameWithType: GetRubricsAndTopicsDetailResponseDTO.RubricName
        qualifiedName: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.RubricName
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.RubricName
  Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicId*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicId*
        name: TopicId
        nameWithType: GetRubricsAndTopicsDetailResponseDTO.TopicId
        qualifiedName: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicId
      VB:
      - id: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicId*
        name: TopicId
        nameWithType: GetRubricsAndTopicsDetailResponseDTO.TopicId
        qualifiedName: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicId
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicId
  Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicText*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicText*
        name: TopicText
        nameWithType: GetRubricsAndTopicsDetailResponseDTO.TopicText
        qualifiedName: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicText
      VB:
      - id: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicText*
        name: TopicText
        nameWithType: GetRubricsAndTopicsDetailResponseDTO.TopicText
        qualifiedName: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicText
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicText
  Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicPublishedDate*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicPublishedDate*
        name: TopicPublishedDate
        nameWithType: GetRubricsAndTopicsDetailResponseDTO.TopicPublishedDate
        qualifiedName: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicPublishedDate
      VB:
      - id: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicPublishedDate*
        name: TopicPublishedDate
        nameWithType: GetRubricsAndTopicsDetailResponseDTO.TopicPublishedDate
        qualifiedName: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicPublishedDate
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicPublishedDate
  Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicTitle*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicTitle*
        name: TopicTitle
        nameWithType: GetRubricsAndTopicsDetailResponseDTO.TopicTitle
        qualifiedName: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicTitle
      VB:
      - id: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicTitle*
        name: TopicTitle
        nameWithType: GetRubricsAndTopicsDetailResponseDTO.TopicTitle
        qualifiedName: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicTitle
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicTitle
  Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicCreatorNickName*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicCreatorNickName*
        name: TopicCreatorNickName
        nameWithType: GetRubricsAndTopicsDetailResponseDTO.TopicCreatorNickName
        qualifiedName: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicCreatorNickName
      VB:
      - id: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicCreatorNickName*
        name: TopicCreatorNickName
        nameWithType: GetRubricsAndTopicsDetailResponseDTO.TopicCreatorNickName
        qualifiedName: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicCreatorNickName
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO.TopicCreatorNickName
  Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO
        name: GetRubricsAndTopicsDetailResponseDTO
        nameWithType: GetRubricsAndTopicsDetailResponseDTO
        qualifiedName: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO
      VB:
      - id: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO
        name: GetRubricsAndTopicsDetailResponseDTO
        nameWithType: GetRubricsAndTopicsDetailResponseDTO
        qualifiedName: Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO
    isDefinition: true
    commentId: T:Domain.DTO.Responses.Rubrics.GetRubricsAndTopicsDetailResponseDTO
  Domain.DTO.Responses.Rubrics.GetRubricsResponseDTO.RubricId*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Rubrics.GetRubricsResponseDTO.RubricId*
        name: RubricId
        nameWithType: GetRubricsResponseDTO.RubricId
        qualifiedName: Domain.DTO.Responses.Rubrics.GetRubricsResponseDTO.RubricId
      VB:
      - id: Domain.DTO.Responses.Rubrics.GetRubricsResponseDTO.RubricId*
        name: RubricId
        nameWithType: GetRubricsResponseDTO.RubricId
        qualifiedName: Domain.DTO.Responses.Rubrics.GetRubricsResponseDTO.RubricId
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Rubrics.GetRubricsResponseDTO.RubricId
  Domain.DTO.Responses.Rubrics.GetRubricsResponseDTO.RubricName*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Rubrics.GetRubricsResponseDTO.RubricName*
        name: RubricName
        nameWithType: GetRubricsResponseDTO.RubricName
        qualifiedName: Domain.DTO.Responses.Rubrics.GetRubricsResponseDTO.RubricName
      VB:
      - id: Domain.DTO.Responses.Rubrics.GetRubricsResponseDTO.RubricName*
        name: RubricName
        nameWithType: GetRubricsResponseDTO.RubricName
        qualifiedName: Domain.DTO.Responses.Rubrics.GetRubricsResponseDTO.RubricName
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Rubrics.GetRubricsResponseDTO.RubricName
  Domain.DTO.Responses.Rubrics.GetRubricsResponseDTO:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Rubrics.GetRubricsResponseDTO
        name: GetRubricsResponseDTO
        nameWithType: GetRubricsResponseDTO
        qualifiedName: Domain.DTO.Responses.Rubrics.GetRubricsResponseDTO
      VB:
      - id: Domain.DTO.Responses.Rubrics.GetRubricsResponseDTO
        name: GetRubricsResponseDTO
        nameWithType: GetRubricsResponseDTO
        qualifiedName: Domain.DTO.Responses.Rubrics.GetRubricsResponseDTO
    isDefinition: true
    commentId: T:Domain.DTO.Responses.Rubrics.GetRubricsResponseDTO
  Domain.DTO.Responses.Rubrics:
    name:
      CSharp:
      - name: Domain.DTO.Responses.Rubrics
        nameWithType: Domain.DTO.Responses.Rubrics
        qualifiedName: Domain.DTO.Responses.Rubrics
      VB:
      - name: Domain.DTO.Responses.Rubrics
        nameWithType: Domain.DTO.Responses.Rubrics
        qualifiedName: Domain.DTO.Responses.Rubrics
    isDefinition: true
    commentId: N:Domain.DTO.Responses.Rubrics
  Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.TopicId*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.TopicId*
        name: TopicId
        nameWithType: GetTopicRepliesDetailResponseDTO.TopicId
        qualifiedName: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.TopicId
      VB:
      - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.TopicId*
        name: TopicId
        nameWithType: GetTopicRepliesDetailResponseDTO.TopicId
        qualifiedName: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.TopicId
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.TopicId
  Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.TopicViews*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.TopicViews*
        name: TopicViews
        nameWithType: GetTopicRepliesDetailResponseDTO.TopicViews
        qualifiedName: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.TopicViews
      VB:
      - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.TopicViews*
        name: TopicViews
        nameWithType: GetTopicRepliesDetailResponseDTO.TopicViews
        qualifiedName: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.TopicViews
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.TopicViews
  Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ChildReplyId*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ChildReplyId*
        name: ChildReplyId
        nameWithType: GetTopicRepliesDetailResponseDTO.ChildReplyId
        qualifiedName: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ChildReplyId
      VB:
      - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ChildReplyId*
        name: ChildReplyId
        nameWithType: GetTopicRepliesDetailResponseDTO.ChildReplyId
        qualifiedName: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ChildReplyId
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ChildReplyId
  Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.Child_Reply_Deleted*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.Child_Reply_Deleted*
        name: Child_Reply_Deleted
        nameWithType: GetTopicRepliesDetailResponseDTO.Child_Reply_Deleted
        qualifiedName: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.Child_Reply_Deleted
      VB:
      - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.Child_Reply_Deleted*
        name: Child_Reply_Deleted
        nameWithType: GetTopicRepliesDetailResponseDTO.Child_Reply_Deleted
        qualifiedName: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.Child_Reply_Deleted
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.Child_Reply_Deleted
  Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ChildReplyText*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ChildReplyText*
        name: ChildReplyText
        nameWithType: GetTopicRepliesDetailResponseDTO.ChildReplyText
        qualifiedName: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ChildReplyText
      VB:
      - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ChildReplyText*
        name: ChildReplyText
        nameWithType: GetTopicRepliesDetailResponseDTO.ChildReplyText
        qualifiedName: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ChildReplyText
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ChildReplyText
  System.DateTime:
    name:
      CSharp:
      - id: System.DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: System.DateTime
        isExternal: true
      VB:
      - id: System.DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: System.DateTime
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.DateTime
  Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ChildReplyDate*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ChildReplyDate*
        name: ChildReplyDate
        nameWithType: GetTopicRepliesDetailResponseDTO.ChildReplyDate
        qualifiedName: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ChildReplyDate
      VB:
      - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ChildReplyDate*
        name: ChildReplyDate
        nameWithType: GetTopicRepliesDetailResponseDTO.ChildReplyDate
        qualifiedName: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ChildReplyDate
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ChildReplyDate
  Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.CR_CreatorId*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.CR_CreatorId*
        name: CR_CreatorId
        nameWithType: GetTopicRepliesDetailResponseDTO.CR_CreatorId
        qualifiedName: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.CR_CreatorId
      VB:
      - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.CR_CreatorId*
        name: CR_CreatorId
        nameWithType: GetTopicRepliesDetailResponseDTO.CR_CreatorId
        qualifiedName: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.CR_CreatorId
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.CR_CreatorId
  Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.CR_CreatorNickName*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.CR_CreatorNickName*
        name: CR_CreatorNickName
        nameWithType: GetTopicRepliesDetailResponseDTO.CR_CreatorNickName
        qualifiedName: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.CR_CreatorNickName
      VB:
      - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.CR_CreatorNickName*
        name: CR_CreatorNickName
        nameWithType: GetTopicRepliesDetailResponseDTO.CR_CreatorNickName
        qualifiedName: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.CR_CreatorNickName
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.CR_CreatorNickName
  Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ParentReplyId*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ParentReplyId*
        name: ParentReplyId
        nameWithType: GetTopicRepliesDetailResponseDTO.ParentReplyId
        qualifiedName: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ParentReplyId
      VB:
      - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ParentReplyId*
        name: ParentReplyId
        nameWithType: GetTopicRepliesDetailResponseDTO.ParentReplyId
        qualifiedName: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ParentReplyId
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ParentReplyId
  Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ParentReplyText*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ParentReplyText*
        name: ParentReplyText
        nameWithType: GetTopicRepliesDetailResponseDTO.ParentReplyText
        qualifiedName: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ParentReplyText
      VB:
      - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ParentReplyText*
        name: ParentReplyText
        nameWithType: GetTopicRepliesDetailResponseDTO.ParentReplyText
        qualifiedName: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ParentReplyText
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ParentReplyText
  Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ParentReplyDate*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ParentReplyDate*
        name: ParentReplyDate
        nameWithType: GetTopicRepliesDetailResponseDTO.ParentReplyDate
        qualifiedName: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ParentReplyDate
      VB:
      - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ParentReplyDate*
        name: ParentReplyDate
        nameWithType: GetTopicRepliesDetailResponseDTO.ParentReplyDate
        qualifiedName: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ParentReplyDate
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.ParentReplyDate
  Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.PR_CreatorId*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.PR_CreatorId*
        name: PR_CreatorId
        nameWithType: GetTopicRepliesDetailResponseDTO.PR_CreatorId
        qualifiedName: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.PR_CreatorId
      VB:
      - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.PR_CreatorId*
        name: PR_CreatorId
        nameWithType: GetTopicRepliesDetailResponseDTO.PR_CreatorId
        qualifiedName: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.PR_CreatorId
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.PR_CreatorId
  Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.PR_CreatorNickName*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.PR_CreatorNickName*
        name: PR_CreatorNickName
        nameWithType: GetTopicRepliesDetailResponseDTO.PR_CreatorNickName
        qualifiedName: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.PR_CreatorNickName
      VB:
      - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.PR_CreatorNickName*
        name: PR_CreatorNickName
        nameWithType: GetTopicRepliesDetailResponseDTO.PR_CreatorNickName
        qualifiedName: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.PR_CreatorNickName
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO.PR_CreatorNickName
  Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO
        name: GetTopicRepliesDetailResponseDTO
        nameWithType: GetTopicRepliesDetailResponseDTO
        qualifiedName: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO
      VB:
      - id: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO
        name: GetTopicRepliesDetailResponseDTO
        nameWithType: GetTopicRepliesDetailResponseDTO
        qualifiedName: Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO
    isDefinition: true
    commentId: T:Domain.DTO.Responses.Topics.GetTopicRepliesDetailResponseDTO
  Domain.DTO.Responses.Topics.TopicResponseDTO.TopicId*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicId*
        name: TopicId
        nameWithType: TopicResponseDTO.TopicId
        qualifiedName: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicId
      VB:
      - id: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicId*
        name: TopicId
        nameWithType: TopicResponseDTO.TopicId
        qualifiedName: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicId
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Topics.TopicResponseDTO.TopicId
  Domain.DTO.Responses.Topics.TopicResponseDTO.TopicTitle*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicTitle*
        name: TopicTitle
        nameWithType: TopicResponseDTO.TopicTitle
        qualifiedName: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicTitle
      VB:
      - id: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicTitle*
        name: TopicTitle
        nameWithType: TopicResponseDTO.TopicTitle
        qualifiedName: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicTitle
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Topics.TopicResponseDTO.TopicTitle
  Domain.DTO.Responses.Topics.TopicResponseDTO.TopicText*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicText*
        name: TopicText
        nameWithType: TopicResponseDTO.TopicText
        qualifiedName: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicText
      VB:
      - id: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicText*
        name: TopicText
        nameWithType: TopicResponseDTO.TopicText
        qualifiedName: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicText
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Topics.TopicResponseDTO.TopicText
  Domain.DTO.Responses.Topics.TopicResponseDTO.TopicPublishedDate*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicPublishedDate*
        name: TopicPublishedDate
        nameWithType: TopicResponseDTO.TopicPublishedDate
        qualifiedName: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicPublishedDate
      VB:
      - id: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicPublishedDate*
        name: TopicPublishedDate
        nameWithType: TopicResponseDTO.TopicPublishedDate
        qualifiedName: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicPublishedDate
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Topics.TopicResponseDTO.TopicPublishedDate
  Domain.DTO.Responses.Topics.TopicResponseDTO.TopicCreatorId*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicCreatorId*
        name: TopicCreatorId
        nameWithType: TopicResponseDTO.TopicCreatorId
        qualifiedName: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicCreatorId
      VB:
      - id: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicCreatorId*
        name: TopicCreatorId
        nameWithType: TopicResponseDTO.TopicCreatorId
        qualifiedName: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicCreatorId
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Topics.TopicResponseDTO.TopicCreatorId
  Domain.DTO.Responses.Topics.TopicResponseDTO.TopicIdRubric*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicIdRubric*
        name: TopicIdRubric
        nameWithType: TopicResponseDTO.TopicIdRubric
        qualifiedName: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicIdRubric
      VB:
      - id: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicIdRubric*
        name: TopicIdRubric
        nameWithType: TopicResponseDTO.TopicIdRubric
        qualifiedName: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicIdRubric
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Topics.TopicResponseDTO.TopicIdRubric
  Domain.DTO.Responses.Topics.TopicResponseDTO.TopicCountViews*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicCountViews*
        name: TopicCountViews
        nameWithType: TopicResponseDTO.TopicCountViews
        qualifiedName: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicCountViews
      VB:
      - id: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicCountViews*
        name: TopicCountViews
        nameWithType: TopicResponseDTO.TopicCountViews
        qualifiedName: Domain.DTO.Responses.Topics.TopicResponseDTO.TopicCountViews
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Topics.TopicResponseDTO.TopicCountViews
  Domain.DTO.Responses.Topics.TopicResponseDTO.Equals*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Topics.TopicResponseDTO.Equals*
        name: Equals
        nameWithType: TopicResponseDTO.Equals
        qualifiedName: Domain.DTO.Responses.Topics.TopicResponseDTO.Equals
      VB:
      - id: Domain.DTO.Responses.Topics.TopicResponseDTO.Equals*
        name: Equals
        nameWithType: TopicResponseDTO.Equals
        qualifiedName: Domain.DTO.Responses.Topics.TopicResponseDTO.Equals
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Topics.TopicResponseDTO.Equals
  Domain.DTO.Responses.Topics.TopicResponseDTO:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Topics.TopicResponseDTO
        name: TopicResponseDTO
        nameWithType: TopicResponseDTO
        qualifiedName: Domain.DTO.Responses.Topics.TopicResponseDTO
      VB:
      - id: Domain.DTO.Responses.Topics.TopicResponseDTO
        name: TopicResponseDTO
        nameWithType: TopicResponseDTO
        qualifiedName: Domain.DTO.Responses.Topics.TopicResponseDTO
    isDefinition: true
    commentId: T:Domain.DTO.Responses.Topics.TopicResponseDTO
  Domain.DTO.Responses.Topics:
    name:
      CSharp:
      - name: Domain.DTO.Responses.Topics
        nameWithType: Domain.DTO.Responses.Topics
        qualifiedName: Domain.DTO.Responses.Topics
      VB:
      - name: Domain.DTO.Responses.Topics
        nameWithType: Domain.DTO.Responses.Topics
        qualifiedName: Domain.DTO.Responses.Topics
    isDefinition: true
    commentId: N:Domain.DTO.Responses.Topics
  Domain.DTO.Responses.Users.CreateUserResponseDTO.Name*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Users.CreateUserResponseDTO.Name*
        name: Name
        nameWithType: CreateUserResponseDTO.Name
        qualifiedName: Domain.DTO.Responses.Users.CreateUserResponseDTO.Name
      VB:
      - id: Domain.DTO.Responses.Users.CreateUserResponseDTO.Name*
        name: Name
        nameWithType: CreateUserResponseDTO.Name
        qualifiedName: Domain.DTO.Responses.Users.CreateUserResponseDTO.Name
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Users.CreateUserResponseDTO.Name
  Domain.DTO.Responses.Users.CreateUserResponseDTO.Message*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Users.CreateUserResponseDTO.Message*
        name: Message
        nameWithType: CreateUserResponseDTO.Message
        qualifiedName: Domain.DTO.Responses.Users.CreateUserResponseDTO.Message
      VB:
      - id: Domain.DTO.Responses.Users.CreateUserResponseDTO.Message*
        name: Message
        nameWithType: CreateUserResponseDTO.Message
        qualifiedName: Domain.DTO.Responses.Users.CreateUserResponseDTO.Message
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Users.CreateUserResponseDTO.Message
  Domain.DTO.Responses.Users.CreateUserResponseDTO:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Users.CreateUserResponseDTO
        name: CreateUserResponseDTO
        nameWithType: CreateUserResponseDTO
        qualifiedName: Domain.DTO.Responses.Users.CreateUserResponseDTO
      VB:
      - id: Domain.DTO.Responses.Users.CreateUserResponseDTO
        name: CreateUserResponseDTO
        nameWithType: CreateUserResponseDTO
        qualifiedName: Domain.DTO.Responses.Users.CreateUserResponseDTO
    isDefinition: true
    commentId: T:Domain.DTO.Responses.Users.CreateUserResponseDTO
  Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Name*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Name*
        name: Name
        nameWithType: GetUserByIdResponseDTO.Name
        qualifiedName: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Name
      VB:
      - id: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Name*
        name: Name
        nameWithType: GetUserByIdResponseDTO.Name
        qualifiedName: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Name
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Name
  Domain.DTO.Responses.Users.GetUserByIdResponseDTO.First_Name*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.First_Name*
        name: First_Name
        nameWithType: GetUserByIdResponseDTO.First_Name
        qualifiedName: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.First_Name
      VB:
      - id: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.First_Name*
        name: First_Name
        nameWithType: GetUserByIdResponseDTO.First_Name
        qualifiedName: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.First_Name
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Users.GetUserByIdResponseDTO.First_Name
  Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Login_Name*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Login_Name*
        name: Login_Name
        nameWithType: GetUserByIdResponseDTO.Login_Name
        qualifiedName: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Login_Name
      VB:
      - id: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Login_Name*
        name: Login_Name
        nameWithType: GetUserByIdResponseDTO.Login_Name
        qualifiedName: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Login_Name
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Login_Name
  Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Ph_No*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Ph_No*
        name: Ph_No
        nameWithType: GetUserByIdResponseDTO.Ph_No
        qualifiedName: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Ph_No
      VB:
      - id: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Ph_No*
        name: Ph_No
        nameWithType: GetUserByIdResponseDTO.Ph_No
        qualifiedName: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Ph_No
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Ph_No
  System.Byte[]:
    name:
      CSharp:
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Photo*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Photo*
        name: Photo
        nameWithType: GetUserByIdResponseDTO.Photo
        qualifiedName: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Photo
      VB:
      - id: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Photo*
        name: Photo
        nameWithType: GetUserByIdResponseDTO.Photo
        qualifiedName: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Photo
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Photo
  Domain.DTO.Responses.Users.GetUserByIdResponseDTO.E_Mail*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.E_Mail*
        name: E_Mail
        nameWithType: GetUserByIdResponseDTO.E_Mail
        qualifiedName: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.E_Mail
      VB:
      - id: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.E_Mail*
        name: E_Mail
        nameWithType: GetUserByIdResponseDTO.E_Mail
        qualifiedName: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.E_Mail
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Users.GetUserByIdResponseDTO.E_Mail
  Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Password*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Password*
        name: Password
        nameWithType: GetUserByIdResponseDTO.Password
        qualifiedName: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Password
      VB:
      - id: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Password*
        name: Password
        nameWithType: GetUserByIdResponseDTO.Password
        qualifiedName: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Password
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Password
  Domain.DTO.Responses.Users.GetUserByIdResponseDTO.ModeratorYN*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.ModeratorYN*
        name: ModeratorYN
        nameWithType: GetUserByIdResponseDTO.ModeratorYN
        qualifiedName: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.ModeratorYN
      VB:
      - id: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.ModeratorYN*
        name: ModeratorYN
        nameWithType: GetUserByIdResponseDTO.ModeratorYN
        qualifiedName: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.ModeratorYN
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Users.GetUserByIdResponseDTO.ModeratorYN
  Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Id*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Id*
        name: Id
        nameWithType: GetUserByIdResponseDTO.Id
        qualifiedName: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Id
      VB:
      - id: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Id*
        name: Id
        nameWithType: GetUserByIdResponseDTO.Id
        qualifiedName: Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Id
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Users.GetUserByIdResponseDTO.Id
  Domain.DTO.Responses.Users.GetUserByIdResponseDTO:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Users.GetUserByIdResponseDTO
        name: GetUserByIdResponseDTO
        nameWithType: GetUserByIdResponseDTO
        qualifiedName: Domain.DTO.Responses.Users.GetUserByIdResponseDTO
      VB:
      - id: Domain.DTO.Responses.Users.GetUserByIdResponseDTO
        name: GetUserByIdResponseDTO
        nameWithType: GetUserByIdResponseDTO
        qualifiedName: Domain.DTO.Responses.Users.GetUserByIdResponseDTO
    isDefinition: true
    commentId: T:Domain.DTO.Responses.Users.GetUserByIdResponseDTO
  Domain.DTO.Responses.Users.GetUsersResponseDTO.Id*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Users.GetUsersResponseDTO.Id*
        name: Id
        nameWithType: GetUsersResponseDTO.Id
        qualifiedName: Domain.DTO.Responses.Users.GetUsersResponseDTO.Id
      VB:
      - id: Domain.DTO.Responses.Users.GetUsersResponseDTO.Id*
        name: Id
        nameWithType: GetUsersResponseDTO.Id
        qualifiedName: Domain.DTO.Responses.Users.GetUsersResponseDTO.Id
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Users.GetUsersResponseDTO.Id
  Domain.DTO.Responses.Users.GetUsersResponseDTO.Name*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Users.GetUsersResponseDTO.Name*
        name: Name
        nameWithType: GetUsersResponseDTO.Name
        qualifiedName: Domain.DTO.Responses.Users.GetUsersResponseDTO.Name
      VB:
      - id: Domain.DTO.Responses.Users.GetUsersResponseDTO.Name*
        name: Name
        nameWithType: GetUsersResponseDTO.Name
        qualifiedName: Domain.DTO.Responses.Users.GetUsersResponseDTO.Name
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Users.GetUsersResponseDTO.Name
  Domain.DTO.Responses.Users.GetUsersResponseDTO.FirstName*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Users.GetUsersResponseDTO.FirstName*
        name: FirstName
        nameWithType: GetUsersResponseDTO.FirstName
        qualifiedName: Domain.DTO.Responses.Users.GetUsersResponseDTO.FirstName
      VB:
      - id: Domain.DTO.Responses.Users.GetUsersResponseDTO.FirstName*
        name: FirstName
        nameWithType: GetUsersResponseDTO.FirstName
        qualifiedName: Domain.DTO.Responses.Users.GetUsersResponseDTO.FirstName
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Users.GetUsersResponseDTO.FirstName
  Domain.DTO.Responses.Users.GetUsersResponseDTO.LoginName*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Users.GetUsersResponseDTO.LoginName*
        name: LoginName
        nameWithType: GetUsersResponseDTO.LoginName
        qualifiedName: Domain.DTO.Responses.Users.GetUsersResponseDTO.LoginName
      VB:
      - id: Domain.DTO.Responses.Users.GetUsersResponseDTO.LoginName*
        name: LoginName
        nameWithType: GetUsersResponseDTO.LoginName
        qualifiedName: Domain.DTO.Responses.Users.GetUsersResponseDTO.LoginName
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Users.GetUsersResponseDTO.LoginName
  Domain.DTO.Responses.Users.GetUsersResponseDTO.PhNo*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Users.GetUsersResponseDTO.PhNo*
        name: PhNo
        nameWithType: GetUsersResponseDTO.PhNo
        qualifiedName: Domain.DTO.Responses.Users.GetUsersResponseDTO.PhNo
      VB:
      - id: Domain.DTO.Responses.Users.GetUsersResponseDTO.PhNo*
        name: PhNo
        nameWithType: GetUsersResponseDTO.PhNo
        qualifiedName: Domain.DTO.Responses.Users.GetUsersResponseDTO.PhNo
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Users.GetUsersResponseDTO.PhNo
  Domain.DTO.Responses.Users.GetUsersResponseDTO.EMail*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Users.GetUsersResponseDTO.EMail*
        name: EMail
        nameWithType: GetUsersResponseDTO.EMail
        qualifiedName: Domain.DTO.Responses.Users.GetUsersResponseDTO.EMail
      VB:
      - id: Domain.DTO.Responses.Users.GetUsersResponseDTO.EMail*
        name: EMail
        nameWithType: GetUsersResponseDTO.EMail
        qualifiedName: Domain.DTO.Responses.Users.GetUsersResponseDTO.EMail
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Users.GetUsersResponseDTO.EMail
  Domain.DTO.Responses.Users.GetUsersResponseDTO.ModeratorYN*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Users.GetUsersResponseDTO.ModeratorYN*
        name: ModeratorYN
        nameWithType: GetUsersResponseDTO.ModeratorYN
        qualifiedName: Domain.DTO.Responses.Users.GetUsersResponseDTO.ModeratorYN
      VB:
      - id: Domain.DTO.Responses.Users.GetUsersResponseDTO.ModeratorYN*
        name: ModeratorYN
        nameWithType: GetUsersResponseDTO.ModeratorYN
        qualifiedName: Domain.DTO.Responses.Users.GetUsersResponseDTO.ModeratorYN
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Users.GetUsersResponseDTO.ModeratorYN
  Domain.DTO.Responses.Users.GetUsersResponseDTO.Password*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Users.GetUsersResponseDTO.Password*
        name: Password
        nameWithType: GetUsersResponseDTO.Password
        qualifiedName: Domain.DTO.Responses.Users.GetUsersResponseDTO.Password
      VB:
      - id: Domain.DTO.Responses.Users.GetUsersResponseDTO.Password*
        name: Password
        nameWithType: GetUsersResponseDTO.Password
        qualifiedName: Domain.DTO.Responses.Users.GetUsersResponseDTO.Password
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Users.GetUsersResponseDTO.Password
  Domain.DTO.Responses.Users.GetUsersResponseDTO:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Users.GetUsersResponseDTO
        name: GetUsersResponseDTO
        nameWithType: GetUsersResponseDTO
        qualifiedName: Domain.DTO.Responses.Users.GetUsersResponseDTO
      VB:
      - id: Domain.DTO.Responses.Users.GetUsersResponseDTO
        name: GetUsersResponseDTO
        nameWithType: GetUsersResponseDTO
        qualifiedName: Domain.DTO.Responses.Users.GetUsersResponseDTO
    isDefinition: true
    commentId: T:Domain.DTO.Responses.Users.GetUsersResponseDTO
  Domain.DTO.Responses.Users.UpdateUserResponseDTO.Name*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Name*
        name: Name
        nameWithType: UpdateUserResponseDTO.Name
        qualifiedName: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Name
      VB:
      - id: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Name*
        name: Name
        nameWithType: UpdateUserResponseDTO.Name
        qualifiedName: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Name
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Users.UpdateUserResponseDTO.Name
  Domain.DTO.Responses.Users.UpdateUserResponseDTO.First_Name*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Users.UpdateUserResponseDTO.First_Name*
        name: First_Name
        nameWithType: UpdateUserResponseDTO.First_Name
        qualifiedName: Domain.DTO.Responses.Users.UpdateUserResponseDTO.First_Name
      VB:
      - id: Domain.DTO.Responses.Users.UpdateUserResponseDTO.First_Name*
        name: First_Name
        nameWithType: UpdateUserResponseDTO.First_Name
        qualifiedName: Domain.DTO.Responses.Users.UpdateUserResponseDTO.First_Name
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Users.UpdateUserResponseDTO.First_Name
  Domain.DTO.Responses.Users.UpdateUserResponseDTO.Login_Name*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Login_Name*
        name: Login_Name
        nameWithType: UpdateUserResponseDTO.Login_Name
        qualifiedName: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Login_Name
      VB:
      - id: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Login_Name*
        name: Login_Name
        nameWithType: UpdateUserResponseDTO.Login_Name
        qualifiedName: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Login_Name
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Users.UpdateUserResponseDTO.Login_Name
  Domain.DTO.Responses.Users.UpdateUserResponseDTO.Ph_No*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Ph_No*
        name: Ph_No
        nameWithType: UpdateUserResponseDTO.Ph_No
        qualifiedName: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Ph_No
      VB:
      - id: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Ph_No*
        name: Ph_No
        nameWithType: UpdateUserResponseDTO.Ph_No
        qualifiedName: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Ph_No
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Users.UpdateUserResponseDTO.Ph_No
  Domain.DTO.Responses.Users.UpdateUserResponseDTO.E_Mail*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Users.UpdateUserResponseDTO.E_Mail*
        name: E_Mail
        nameWithType: UpdateUserResponseDTO.E_Mail
        qualifiedName: Domain.DTO.Responses.Users.UpdateUserResponseDTO.E_Mail
      VB:
      - id: Domain.DTO.Responses.Users.UpdateUserResponseDTO.E_Mail*
        name: E_Mail
        nameWithType: UpdateUserResponseDTO.E_Mail
        qualifiedName: Domain.DTO.Responses.Users.UpdateUserResponseDTO.E_Mail
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Users.UpdateUserResponseDTO.E_Mail
  Domain.DTO.Responses.Users.UpdateUserResponseDTO.Password*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Password*
        name: Password
        nameWithType: UpdateUserResponseDTO.Password
        qualifiedName: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Password
      VB:
      - id: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Password*
        name: Password
        nameWithType: UpdateUserResponseDTO.Password
        qualifiedName: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Password
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Users.UpdateUserResponseDTO.Password
  Domain.DTO.Responses.Users.UpdateUserResponseDTO.Id*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Id*
        name: Id
        nameWithType: UpdateUserResponseDTO.Id
        qualifiedName: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Id
      VB:
      - id: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Id*
        name: Id
        nameWithType: UpdateUserResponseDTO.Id
        qualifiedName: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Id
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Users.UpdateUserResponseDTO.Id
  Domain.DTO.Responses.Users.UpdateUserResponseDTO.Moderator_Y_N*:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Moderator_Y_N*
        name: Moderator_Y_N
        nameWithType: UpdateUserResponseDTO.Moderator_Y_N
        qualifiedName: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Moderator_Y_N
      VB:
      - id: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Moderator_Y_N*
        name: Moderator_Y_N
        nameWithType: UpdateUserResponseDTO.Moderator_Y_N
        qualifiedName: Domain.DTO.Responses.Users.UpdateUserResponseDTO.Moderator_Y_N
    isDefinition: true
    commentId: Overload:Domain.DTO.Responses.Users.UpdateUserResponseDTO.Moderator_Y_N
  Domain.DTO.Responses.Users.UpdateUserResponseDTO:
    name:
      CSharp:
      - id: Domain.DTO.Responses.Users.UpdateUserResponseDTO
        name: UpdateUserResponseDTO
        nameWithType: UpdateUserResponseDTO
        qualifiedName: Domain.DTO.Responses.Users.UpdateUserResponseDTO
      VB:
      - id: Domain.DTO.Responses.Users.UpdateUserResponseDTO
        name: UpdateUserResponseDTO
        nameWithType: UpdateUserResponseDTO
        qualifiedName: Domain.DTO.Responses.Users.UpdateUserResponseDTO
    isDefinition: true
    commentId: T:Domain.DTO.Responses.Users.UpdateUserResponseDTO
  Domain.DTO.Responses.Users:
    name:
      CSharp:
      - name: Domain.DTO.Responses.Users
        nameWithType: Domain.DTO.Responses.Users
        qualifiedName: Domain.DTO.Responses.Users
      VB:
      - name: Domain.DTO.Responses.Users
        nameWithType: Domain.DTO.Responses.Users
        qualifiedName: Domain.DTO.Responses.Users
    isDefinition: true
    commentId: N:Domain.DTO.Responses.Users
  Domain.Entites.Entity.Id*:
    name:
      CSharp:
      - id: Domain.Entites.Entity.Id*
        name: Id
        nameWithType: Entity.Id
        qualifiedName: Domain.Entites.Entity.Id
      VB:
      - id: Domain.Entites.Entity.Id*
        name: Id
        nameWithType: Entity.Id
        qualifiedName: Domain.Entites.Entity.Id
    isDefinition: true
    commentId: Overload:Domain.Entites.Entity.Id
  Domain.Entites.Entity.Equals*:
    name:
      CSharp:
      - id: Domain.Entites.Entity.Equals*
        name: Equals
        nameWithType: Entity.Equals
        qualifiedName: Domain.Entites.Entity.Equals
      VB:
      - id: Domain.Entites.Entity.Equals*
        name: Equals
        nameWithType: Entity.Equals
        qualifiedName: Domain.Entites.Entity.Equals
    isDefinition: true
    commentId: Overload:Domain.Entites.Entity.Equals
  Domain.Entites.Entity.GetHashCode*:
    name:
      CSharp:
      - id: Domain.Entites.Entity.GetHashCode*
        name: GetHashCode
        nameWithType: Entity.GetHashCode
        qualifiedName: Domain.Entites.Entity.GetHashCode
      VB:
      - id: Domain.Entites.Entity.GetHashCode*
        name: GetHashCode
        nameWithType: Entity.GetHashCode
        qualifiedName: Domain.Entites.Entity.GetHashCode
    isDefinition: true
    commentId: Overload:Domain.Entites.Entity.GetHashCode
  Domain.Entites.Entity:
    name:
      CSharp:
      - id: Domain.Entites.Entity
        name: Entity
        nameWithType: Entity
        qualifiedName: Domain.Entites.Entity
      VB:
      - id: Domain.Entites.Entity
        name: Entity
        nameWithType: Entity
        qualifiedName: Domain.Entites.Entity
    isDefinition: true
    parent: Domain.Entites
    commentId: T:Domain.Entites.Entity
  Domain.Entites:
    name:
      CSharp:
      - name: Domain.Entites
        nameWithType: Domain.Entites
        qualifiedName: Domain.Entites
      VB:
      - name: Domain.Entites
        nameWithType: Domain.Entites
        qualifiedName: Domain.Entites
    isDefinition: true
    commentId: N:Domain.Entites
  Domain.Entites.Entity.Id:
    name:
      CSharp:
      - id: Domain.Entites.Entity.Id
        name: Id
        nameWithType: Entity.Id
        qualifiedName: Domain.Entites.Entity.Id
      VB:
      - id: Domain.Entites.Entity.Id
        name: Id
        nameWithType: Entity.Id
        qualifiedName: Domain.Entites.Entity.Id
    isDefinition: true
    parent: Domain.Entites.Entity
    commentId: P:Domain.Entites.Entity.Id
  Domain.Entites.Entity.Equals(System.Object):
    name:
      CSharp:
      - id: Domain.Entites.Entity.Equals(System.Object)
        name: Equals
        nameWithType: Entity.Equals
        qualifiedName: Domain.Entites.Entity.Equals
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Domain.Entites.Entity.Equals(System.Object)
        name: Equals
        nameWithType: Entity.Equals
        qualifiedName: Domain.Entites.Entity.Equals
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Domain.Entites.Entity
    commentId: M:Domain.Entites.Entity.Equals(System.Object)
  Domain.Entites.Entity.GetHashCode:
    name:
      CSharp:
      - id: Domain.Entites.Entity.GetHashCode
        name: GetHashCode
        nameWithType: Entity.GetHashCode
        qualifiedName: Domain.Entites.Entity.GetHashCode
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Domain.Entites.Entity.GetHashCode
        name: GetHashCode
        nameWithType: Entity.GetHashCode
        qualifiedName: Domain.Entites.Entity.GetHashCode
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Domain.Entites.Entity
    commentId: M:Domain.Entites.Entity.GetHashCode
  Domain.Entites.Reply.Text*:
    name:
      CSharp:
      - id: Domain.Entites.Reply.Text*
        name: Text
        nameWithType: Reply.Text
        qualifiedName: Domain.Entites.Reply.Text
      VB:
      - id: Domain.Entites.Reply.Text*
        name: Text
        nameWithType: Reply.Text
        qualifiedName: Domain.Entites.Reply.Text
    isDefinition: true
    commentId: Overload:Domain.Entites.Reply.Text
  Domain.Entites.Reply.Reply_Date*:
    name:
      CSharp:
      - id: Domain.Entites.Reply.Reply_Date*
        name: Reply_Date
        nameWithType: Reply.Reply_Date
        qualifiedName: Domain.Entites.Reply.Reply_Date
      VB:
      - id: Domain.Entites.Reply.Reply_Date*
        name: Reply_Date
        nameWithType: Reply.Reply_Date
        qualifiedName: Domain.Entites.Reply.Reply_Date
    isDefinition: true
    commentId: Overload:Domain.Entites.Reply.Reply_Date
  System.Nullable{System.Boolean}:
    name:
      CSharp:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Nullable`1
    parent: System
    commentId: T:System.Nullable{System.Boolean}
  Domain.Entites.Reply.Deleted*:
    name:
      CSharp:
      - id: Domain.Entites.Reply.Deleted*
        name: Deleted
        nameWithType: Reply.Deleted
        qualifiedName: Domain.Entites.Reply.Deleted
      VB:
      - id: Domain.Entites.Reply.Deleted*
        name: Deleted
        nameWithType: Reply.Deleted
        qualifiedName: Domain.Entites.Reply.Deleted
    isDefinition: true
    commentId: Overload:Domain.Entites.Reply.Deleted
  Domain.Entites.Reply.Reply_Update_Date*:
    name:
      CSharp:
      - id: Domain.Entites.Reply.Reply_Update_Date*
        name: Reply_Update_Date
        nameWithType: Reply.Reply_Update_Date
        qualifiedName: Domain.Entites.Reply.Reply_Update_Date
      VB:
      - id: Domain.Entites.Reply.Reply_Update_Date*
        name: Reply_Update_Date
        nameWithType: Reply.Reply_Update_Date
        qualifiedName: Domain.Entites.Reply.Reply_Update_Date
    isDefinition: true
    commentId: Overload:Domain.Entites.Reply.Reply_Update_Date
  Domain.Entites.Reply.Id_Parent_Reply*:
    name:
      CSharp:
      - id: Domain.Entites.Reply.Id_Parent_Reply*
        name: Id_Parent_Reply
        nameWithType: Reply.Id_Parent_Reply
        qualifiedName: Domain.Entites.Reply.Id_Parent_Reply
      VB:
      - id: Domain.Entites.Reply.Id_Parent_Reply*
        name: Id_Parent_Reply
        nameWithType: Reply.Id_Parent_Reply
        qualifiedName: Domain.Entites.Reply.Id_Parent_Reply
    isDefinition: true
    commentId: Overload:Domain.Entites.Reply.Id_Parent_Reply
  Domain.Entites.Reply.Id_User*:
    name:
      CSharp:
      - id: Domain.Entites.Reply.Id_User*
        name: Id_User
        nameWithType: Reply.Id_User
        qualifiedName: Domain.Entites.Reply.Id_User
      VB:
      - id: Domain.Entites.Reply.Id_User*
        name: Id_User
        nameWithType: Reply.Id_User
        qualifiedName: Domain.Entites.Reply.Id_User
    isDefinition: true
    commentId: Overload:Domain.Entites.Reply.Id_User
  Domain.Entites.Reply.Id_Topic*:
    name:
      CSharp:
      - id: Domain.Entites.Reply.Id_Topic*
        name: Id_Topic
        nameWithType: Reply.Id_Topic
        qualifiedName: Domain.Entites.Reply.Id_Topic
      VB:
      - id: Domain.Entites.Reply.Id_Topic*
        name: Id_Topic
        nameWithType: Reply.Id_Topic
        qualifiedName: Domain.Entites.Reply.Id_Topic
    isDefinition: true
    commentId: Overload:Domain.Entites.Reply.Id_Topic
  Domain.Entites.Reply:
    name:
      CSharp:
      - id: Domain.Entites.Reply
        name: Reply
        nameWithType: Reply
        qualifiedName: Domain.Entites.Reply
      VB:
      - id: Domain.Entites.Reply
        name: Reply
        nameWithType: Reply
        qualifiedName: Domain.Entites.Reply
    isDefinition: true
    commentId: T:Domain.Entites.Reply
  Domain.Entites.Rubric.Name*:
    name:
      CSharp:
      - id: Domain.Entites.Rubric.Name*
        name: Name
        nameWithType: Rubric.Name
        qualifiedName: Domain.Entites.Rubric.Name
      VB:
      - id: Domain.Entites.Rubric.Name*
        name: Name
        nameWithType: Rubric.Name
        qualifiedName: Domain.Entites.Rubric.Name
    isDefinition: true
    commentId: Overload:Domain.Entites.Rubric.Name
  Domain.Entites.Rubric:
    name:
      CSharp:
      - id: Domain.Entites.Rubric
        name: Rubric
        nameWithType: Rubric
        qualifiedName: Domain.Entites.Rubric
      VB:
      - id: Domain.Entites.Rubric
        name: Rubric
        nameWithType: Rubric
        qualifiedName: Domain.Entites.Rubric
    isDefinition: true
    commentId: T:Domain.Entites.Rubric
  Domain.Entites.RubricDetail.Rubric_Name*:
    name:
      CSharp:
      - id: Domain.Entites.RubricDetail.Rubric_Name*
        name: Rubric_Name
        nameWithType: RubricDetail.Rubric_Name
        qualifiedName: Domain.Entites.RubricDetail.Rubric_Name
      VB:
      - id: Domain.Entites.RubricDetail.Rubric_Name*
        name: Rubric_Name
        nameWithType: RubricDetail.Rubric_Name
        qualifiedName: Domain.Entites.RubricDetail.Rubric_Name
    isDefinition: true
    commentId: Overload:Domain.Entites.RubricDetail.Rubric_Name
  Domain.Entites.RubricDetail.Topic_Id*:
    name:
      CSharp:
      - id: Domain.Entites.RubricDetail.Topic_Id*
        name: Topic_Id
        nameWithType: RubricDetail.Topic_Id
        qualifiedName: Domain.Entites.RubricDetail.Topic_Id
      VB:
      - id: Domain.Entites.RubricDetail.Topic_Id*
        name: Topic_Id
        nameWithType: RubricDetail.Topic_Id
        qualifiedName: Domain.Entites.RubricDetail.Topic_Id
    isDefinition: true
    commentId: Overload:Domain.Entites.RubricDetail.Topic_Id
  Domain.Entites.RubricDetail.Topic_Deleted*:
    name:
      CSharp:
      - id: Domain.Entites.RubricDetail.Topic_Deleted*
        name: Topic_Deleted
        nameWithType: RubricDetail.Topic_Deleted
        qualifiedName: Domain.Entites.RubricDetail.Topic_Deleted
      VB:
      - id: Domain.Entites.RubricDetail.Topic_Deleted*
        name: Topic_Deleted
        nameWithType: RubricDetail.Topic_Deleted
        qualifiedName: Domain.Entites.RubricDetail.Topic_Deleted
    isDefinition: true
    commentId: Overload:Domain.Entites.RubricDetail.Topic_Deleted
  Domain.Entites.RubricDetail.Topic_Tex_Pub*:
    name:
      CSharp:
      - id: Domain.Entites.RubricDetail.Topic_Tex_Pub*
        name: Topic_Tex_Pub
        nameWithType: RubricDetail.Topic_Tex_Pub
        qualifiedName: Domain.Entites.RubricDetail.Topic_Tex_Pub
      VB:
      - id: Domain.Entites.RubricDetail.Topic_Tex_Pub*
        name: Topic_Tex_Pub
        nameWithType: RubricDetail.Topic_Tex_Pub
        qualifiedName: Domain.Entites.RubricDetail.Topic_Tex_Pub
    isDefinition: true
    commentId: Overload:Domain.Entites.RubricDetail.Topic_Tex_Pub
  Domain.Entites.RubricDetail.Topic_Pub_Date*:
    name:
      CSharp:
      - id: Domain.Entites.RubricDetail.Topic_Pub_Date*
        name: Topic_Pub_Date
        nameWithType: RubricDetail.Topic_Pub_Date
        qualifiedName: Domain.Entites.RubricDetail.Topic_Pub_Date
      VB:
      - id: Domain.Entites.RubricDetail.Topic_Pub_Date*
        name: Topic_Pub_Date
        nameWithType: RubricDetail.Topic_Pub_Date
        qualifiedName: Domain.Entites.RubricDetail.Topic_Pub_Date
    isDefinition: true
    commentId: Overload:Domain.Entites.RubricDetail.Topic_Pub_Date
  Domain.Entites.RubricDetail.Topic_Pub_Update_Date*:
    name:
      CSharp:
      - id: Domain.Entites.RubricDetail.Topic_Pub_Update_Date*
        name: Topic_Pub_Update_Date
        nameWithType: RubricDetail.Topic_Pub_Update_Date
        qualifiedName: Domain.Entites.RubricDetail.Topic_Pub_Update_Date
      VB:
      - id: Domain.Entites.RubricDetail.Topic_Pub_Update_Date*
        name: Topic_Pub_Update_Date
        nameWithType: RubricDetail.Topic_Pub_Update_Date
        qualifiedName: Domain.Entites.RubricDetail.Topic_Pub_Update_Date
    isDefinition: true
    commentId: Overload:Domain.Entites.RubricDetail.Topic_Pub_Update_Date
  Domain.Entites.RubricDetail.Topic_Title*:
    name:
      CSharp:
      - id: Domain.Entites.RubricDetail.Topic_Title*
        name: Topic_Title
        nameWithType: RubricDetail.Topic_Title
        qualifiedName: Domain.Entites.RubricDetail.Topic_Title
      VB:
      - id: Domain.Entites.RubricDetail.Topic_Title*
        name: Topic_Title
        nameWithType: RubricDetail.Topic_Title
        qualifiedName: Domain.Entites.RubricDetail.Topic_Title
    isDefinition: true
    commentId: Overload:Domain.Entites.RubricDetail.Topic_Title
  Domain.Entites.RubricDetail.T_Creator_Id*:
    name:
      CSharp:
      - id: Domain.Entites.RubricDetail.T_Creator_Id*
        name: T_Creator_Id
        nameWithType: RubricDetail.T_Creator_Id
        qualifiedName: Domain.Entites.RubricDetail.T_Creator_Id
      VB:
      - id: Domain.Entites.RubricDetail.T_Creator_Id*
        name: T_Creator_Id
        nameWithType: RubricDetail.T_Creator_Id
        qualifiedName: Domain.Entites.RubricDetail.T_Creator_Id
    isDefinition: true
    commentId: Overload:Domain.Entites.RubricDetail.T_Creator_Id
  Domain.Entites.RubricDetail.T_Creator_Nick_Name*:
    name:
      CSharp:
      - id: Domain.Entites.RubricDetail.T_Creator_Nick_Name*
        name: T_Creator_Nick_Name
        nameWithType: RubricDetail.T_Creator_Nick_Name
        qualifiedName: Domain.Entites.RubricDetail.T_Creator_Nick_Name
      VB:
      - id: Domain.Entites.RubricDetail.T_Creator_Nick_Name*
        name: T_Creator_Nick_Name
        nameWithType: RubricDetail.T_Creator_Nick_Name
        qualifiedName: Domain.Entites.RubricDetail.T_Creator_Nick_Name
    isDefinition: true
    commentId: Overload:Domain.Entites.RubricDetail.T_Creator_Nick_Name
  Domain.Entites.RubricDetail:
    name:
      CSharp:
      - id: Domain.Entites.RubricDetail
        name: RubricDetail
        nameWithType: RubricDetail
        qualifiedName: Domain.Entites.RubricDetail
      VB:
      - id: Domain.Entites.RubricDetail
        name: RubricDetail
        nameWithType: RubricDetail
        qualifiedName: Domain.Entites.RubricDetail
    isDefinition: true
    commentId: T:Domain.Entites.RubricDetail
  Domain.Entites.Topic.Title*:
    name:
      CSharp:
      - id: Domain.Entites.Topic.Title*
        name: Title
        nameWithType: Topic.Title
        qualifiedName: Domain.Entites.Topic.Title
      VB:
      - id: Domain.Entites.Topic.Title*
        name: Title
        nameWithType: Topic.Title
        qualifiedName: Domain.Entites.Topic.Title
    isDefinition: true
    commentId: Overload:Domain.Entites.Topic.Title
  Domain.Entites.Topic.Text_Pub*:
    name:
      CSharp:
      - id: Domain.Entites.Topic.Text_Pub*
        name: Text_Pub
        nameWithType: Topic.Text_Pub
        qualifiedName: Domain.Entites.Topic.Text_Pub
      VB:
      - id: Domain.Entites.Topic.Text_Pub*
        name: Text_Pub
        nameWithType: Topic.Text_Pub
        qualifiedName: Domain.Entites.Topic.Text_Pub
    isDefinition: true
    commentId: Overload:Domain.Entites.Topic.Text_Pub
  Domain.Entites.Topic.Pub_Date*:
    name:
      CSharp:
      - id: Domain.Entites.Topic.Pub_Date*
        name: Pub_Date
        nameWithType: Topic.Pub_Date
        qualifiedName: Domain.Entites.Topic.Pub_Date
      VB:
      - id: Domain.Entites.Topic.Pub_Date*
        name: Pub_Date
        nameWithType: Topic.Pub_Date
        qualifiedName: Domain.Entites.Topic.Pub_Date
    isDefinition: true
    commentId: Overload:Domain.Entites.Topic.Pub_Date
  System.Byte:
    name:
      CSharp:
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
      VB:
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Byte
  Domain.Entites.Topic.Deleted*:
    name:
      CSharp:
      - id: Domain.Entites.Topic.Deleted*
        name: Deleted
        nameWithType: Topic.Deleted
        qualifiedName: Domain.Entites.Topic.Deleted
      VB:
      - id: Domain.Entites.Topic.Deleted*
        name: Deleted
        nameWithType: Topic.Deleted
        qualifiedName: Domain.Entites.Topic.Deleted
    isDefinition: true
    commentId: Overload:Domain.Entites.Topic.Deleted
  Domain.Entites.Topic.Pub_Update_Date*:
    name:
      CSharp:
      - id: Domain.Entites.Topic.Pub_Update_Date*
        name: Pub_Update_Date
        nameWithType: Topic.Pub_Update_Date
        qualifiedName: Domain.Entites.Topic.Pub_Update_Date
      VB:
      - id: Domain.Entites.Topic.Pub_Update_Date*
        name: Pub_Update_Date
        nameWithType: Topic.Pub_Update_Date
        qualifiedName: Domain.Entites.Topic.Pub_Update_Date
    isDefinition: true
    commentId: Overload:Domain.Entites.Topic.Pub_Update_Date
  Domain.Entites.Topic.Id_User*:
    name:
      CSharp:
      - id: Domain.Entites.Topic.Id_User*
        name: Id_User
        nameWithType: Topic.Id_User
        qualifiedName: Domain.Entites.Topic.Id_User
      VB:
      - id: Domain.Entites.Topic.Id_User*
        name: Id_User
        nameWithType: Topic.Id_User
        qualifiedName: Domain.Entites.Topic.Id_User
    isDefinition: true
    commentId: Overload:Domain.Entites.Topic.Id_User
  Domain.Entites.Topic.Id_Rubric*:
    name:
      CSharp:
      - id: Domain.Entites.Topic.Id_Rubric*
        name: Id_Rubric
        nameWithType: Topic.Id_Rubric
        qualifiedName: Domain.Entites.Topic.Id_Rubric
      VB:
      - id: Domain.Entites.Topic.Id_Rubric*
        name: Id_Rubric
        nameWithType: Topic.Id_Rubric
        qualifiedName: Domain.Entites.Topic.Id_Rubric
    isDefinition: true
    commentId: Overload:Domain.Entites.Topic.Id_Rubric
  Domain.Entites.Topic.Count_Views*:
    name:
      CSharp:
      - id: Domain.Entites.Topic.Count_Views*
        name: Count_Views
        nameWithType: Topic.Count_Views
        qualifiedName: Domain.Entites.Topic.Count_Views
      VB:
      - id: Domain.Entites.Topic.Count_Views*
        name: Count_Views
        nameWithType: Topic.Count_Views
        qualifiedName: Domain.Entites.Topic.Count_Views
    isDefinition: true
    commentId: Overload:Domain.Entites.Topic.Count_Views
  Domain.Entites.Topic:
    name:
      CSharp:
      - id: Domain.Entites.Topic
        name: Topic
        nameWithType: Topic
        qualifiedName: Domain.Entites.Topic
      VB:
      - id: Domain.Entites.Topic
        name: Topic
        nameWithType: Topic
        qualifiedName: Domain.Entites.Topic
    isDefinition: true
    commentId: T:Domain.Entites.Topic
  Domain.Entites.TopicDetail.Topic_Deleted*:
    name:
      CSharp:
      - id: Domain.Entites.TopicDetail.Topic_Deleted*
        name: Topic_Deleted
        nameWithType: TopicDetail.Topic_Deleted
        qualifiedName: Domain.Entites.TopicDetail.Topic_Deleted
      VB:
      - id: Domain.Entites.TopicDetail.Topic_Deleted*
        name: Topic_Deleted
        nameWithType: TopicDetail.Topic_Deleted
        qualifiedName: Domain.Entites.TopicDetail.Topic_Deleted
    isDefinition: true
    commentId: Overload:Domain.Entites.TopicDetail.Topic_Deleted
  Domain.Entites.TopicDetail.Count_Views*:
    name:
      CSharp:
      - id: Domain.Entites.TopicDetail.Count_Views*
        name: Count_Views
        nameWithType: TopicDetail.Count_Views
        qualifiedName: Domain.Entites.TopicDetail.Count_Views
      VB:
      - id: Domain.Entites.TopicDetail.Count_Views*
        name: Count_Views
        nameWithType: TopicDetail.Count_Views
        qualifiedName: Domain.Entites.TopicDetail.Count_Views
    isDefinition: true
    commentId: Overload:Domain.Entites.TopicDetail.Count_Views
  Domain.Entites.TopicDetail.Child_Reply_Id*:
    name:
      CSharp:
      - id: Domain.Entites.TopicDetail.Child_Reply_Id*
        name: Child_Reply_Id
        nameWithType: TopicDetail.Child_Reply_Id
        qualifiedName: Domain.Entites.TopicDetail.Child_Reply_Id
      VB:
      - id: Domain.Entites.TopicDetail.Child_Reply_Id*
        name: Child_Reply_Id
        nameWithType: TopicDetail.Child_Reply_Id
        qualifiedName: Domain.Entites.TopicDetail.Child_Reply_Id
    isDefinition: true
    commentId: Overload:Domain.Entites.TopicDetail.Child_Reply_Id
  Domain.Entites.TopicDetail.Child_Reply_Deleted*:
    name:
      CSharp:
      - id: Domain.Entites.TopicDetail.Child_Reply_Deleted*
        name: Child_Reply_Deleted
        nameWithType: TopicDetail.Child_Reply_Deleted
        qualifiedName: Domain.Entites.TopicDetail.Child_Reply_Deleted
      VB:
      - id: Domain.Entites.TopicDetail.Child_Reply_Deleted*
        name: Child_Reply_Deleted
        nameWithType: TopicDetail.Child_Reply_Deleted
        qualifiedName: Domain.Entites.TopicDetail.Child_Reply_Deleted
    isDefinition: true
    commentId: Overload:Domain.Entites.TopicDetail.Child_Reply_Deleted
  Domain.Entites.TopicDetail.Child_Reply_Text*:
    name:
      CSharp:
      - id: Domain.Entites.TopicDetail.Child_Reply_Text*
        name: Child_Reply_Text
        nameWithType: TopicDetail.Child_Reply_Text
        qualifiedName: Domain.Entites.TopicDetail.Child_Reply_Text
      VB:
      - id: Domain.Entites.TopicDetail.Child_Reply_Text*
        name: Child_Reply_Text
        nameWithType: TopicDetail.Child_Reply_Text
        qualifiedName: Domain.Entites.TopicDetail.Child_Reply_Text
    isDefinition: true
    commentId: Overload:Domain.Entites.TopicDetail.Child_Reply_Text
  Domain.Entites.TopicDetail.Child_Reply_Date*:
    name:
      CSharp:
      - id: Domain.Entites.TopicDetail.Child_Reply_Date*
        name: Child_Reply_Date
        nameWithType: TopicDetail.Child_Reply_Date
        qualifiedName: Domain.Entites.TopicDetail.Child_Reply_Date
      VB:
      - id: Domain.Entites.TopicDetail.Child_Reply_Date*
        name: Child_Reply_Date
        nameWithType: TopicDetail.Child_Reply_Date
        qualifiedName: Domain.Entites.TopicDetail.Child_Reply_Date
    isDefinition: true
    commentId: Overload:Domain.Entites.TopicDetail.Child_Reply_Date
  Domain.Entites.TopicDetail.Child_Reply_Update_Date*:
    name:
      CSharp:
      - id: Domain.Entites.TopicDetail.Child_Reply_Update_Date*
        name: Child_Reply_Update_Date
        nameWithType: TopicDetail.Child_Reply_Update_Date
        qualifiedName: Domain.Entites.TopicDetail.Child_Reply_Update_Date
      VB:
      - id: Domain.Entites.TopicDetail.Child_Reply_Update_Date*
        name: Child_Reply_Update_Date
        nameWithType: TopicDetail.Child_Reply_Update_Date
        qualifiedName: Domain.Entites.TopicDetail.Child_Reply_Update_Date
    isDefinition: true
    commentId: Overload:Domain.Entites.TopicDetail.Child_Reply_Update_Date
  Domain.Entites.TopicDetail.Creator_Id_CR*:
    name:
      CSharp:
      - id: Domain.Entites.TopicDetail.Creator_Id_CR*
        name: Creator_Id_CR
        nameWithType: TopicDetail.Creator_Id_CR
        qualifiedName: Domain.Entites.TopicDetail.Creator_Id_CR
      VB:
      - id: Domain.Entites.TopicDetail.Creator_Id_CR*
        name: Creator_Id_CR
        nameWithType: TopicDetail.Creator_Id_CR
        qualifiedName: Domain.Entites.TopicDetail.Creator_Id_CR
    isDefinition: true
    commentId: Overload:Domain.Entites.TopicDetail.Creator_Id_CR
  Domain.Entites.TopicDetail.Creator_Nick_Name_CR*:
    name:
      CSharp:
      - id: Domain.Entites.TopicDetail.Creator_Nick_Name_CR*
        name: Creator_Nick_Name_CR
        nameWithType: TopicDetail.Creator_Nick_Name_CR
        qualifiedName: Domain.Entites.TopicDetail.Creator_Nick_Name_CR
      VB:
      - id: Domain.Entites.TopicDetail.Creator_Nick_Name_CR*
        name: Creator_Nick_Name_CR
        nameWithType: TopicDetail.Creator_Nick_Name_CR
        qualifiedName: Domain.Entites.TopicDetail.Creator_Nick_Name_CR
    isDefinition: true
    commentId: Overload:Domain.Entites.TopicDetail.Creator_Nick_Name_CR
  Domain.Entites.TopicDetail.Parent_Reply_Id*:
    name:
      CSharp:
      - id: Domain.Entites.TopicDetail.Parent_Reply_Id*
        name: Parent_Reply_Id
        nameWithType: TopicDetail.Parent_Reply_Id
        qualifiedName: Domain.Entites.TopicDetail.Parent_Reply_Id
      VB:
      - id: Domain.Entites.TopicDetail.Parent_Reply_Id*
        name: Parent_Reply_Id
        nameWithType: TopicDetail.Parent_Reply_Id
        qualifiedName: Domain.Entites.TopicDetail.Parent_Reply_Id
    isDefinition: true
    commentId: Overload:Domain.Entites.TopicDetail.Parent_Reply_Id
  Domain.Entites.TopicDetail.Parent_Reply_Deleted*:
    name:
      CSharp:
      - id: Domain.Entites.TopicDetail.Parent_Reply_Deleted*
        name: Parent_Reply_Deleted
        nameWithType: TopicDetail.Parent_Reply_Deleted
        qualifiedName: Domain.Entites.TopicDetail.Parent_Reply_Deleted
      VB:
      - id: Domain.Entites.TopicDetail.Parent_Reply_Deleted*
        name: Parent_Reply_Deleted
        nameWithType: TopicDetail.Parent_Reply_Deleted
        qualifiedName: Domain.Entites.TopicDetail.Parent_Reply_Deleted
    isDefinition: true
    commentId: Overload:Domain.Entites.TopicDetail.Parent_Reply_Deleted
  Domain.Entites.TopicDetail.Parent_Reply_Text*:
    name:
      CSharp:
      - id: Domain.Entites.TopicDetail.Parent_Reply_Text*
        name: Parent_Reply_Text
        nameWithType: TopicDetail.Parent_Reply_Text
        qualifiedName: Domain.Entites.TopicDetail.Parent_Reply_Text
      VB:
      - id: Domain.Entites.TopicDetail.Parent_Reply_Text*
        name: Parent_Reply_Text
        nameWithType: TopicDetail.Parent_Reply_Text
        qualifiedName: Domain.Entites.TopicDetail.Parent_Reply_Text
    isDefinition: true
    commentId: Overload:Domain.Entites.TopicDetail.Parent_Reply_Text
  Domain.Entites.TopicDetail.Parent_Reply_Date*:
    name:
      CSharp:
      - id: Domain.Entites.TopicDetail.Parent_Reply_Date*
        name: Parent_Reply_Date
        nameWithType: TopicDetail.Parent_Reply_Date
        qualifiedName: Domain.Entites.TopicDetail.Parent_Reply_Date
      VB:
      - id: Domain.Entites.TopicDetail.Parent_Reply_Date*
        name: Parent_Reply_Date
        nameWithType: TopicDetail.Parent_Reply_Date
        qualifiedName: Domain.Entites.TopicDetail.Parent_Reply_Date
    isDefinition: true
    commentId: Overload:Domain.Entites.TopicDetail.Parent_Reply_Date
  Domain.Entites.TopicDetail.Parent_Reply_Update_Date*:
    name:
      CSharp:
      - id: Domain.Entites.TopicDetail.Parent_Reply_Update_Date*
        name: Parent_Reply_Update_Date
        nameWithType: TopicDetail.Parent_Reply_Update_Date
        qualifiedName: Domain.Entites.TopicDetail.Parent_Reply_Update_Date
      VB:
      - id: Domain.Entites.TopicDetail.Parent_Reply_Update_Date*
        name: Parent_Reply_Update_Date
        nameWithType: TopicDetail.Parent_Reply_Update_Date
        qualifiedName: Domain.Entites.TopicDetail.Parent_Reply_Update_Date
    isDefinition: true
    commentId: Overload:Domain.Entites.TopicDetail.Parent_Reply_Update_Date
  Domain.Entites.TopicDetail.Creator_Id_PR*:
    name:
      CSharp:
      - id: Domain.Entites.TopicDetail.Creator_Id_PR*
        name: Creator_Id_PR
        nameWithType: TopicDetail.Creator_Id_PR
        qualifiedName: Domain.Entites.TopicDetail.Creator_Id_PR
      VB:
      - id: Domain.Entites.TopicDetail.Creator_Id_PR*
        name: Creator_Id_PR
        nameWithType: TopicDetail.Creator_Id_PR
        qualifiedName: Domain.Entites.TopicDetail.Creator_Id_PR
    isDefinition: true
    commentId: Overload:Domain.Entites.TopicDetail.Creator_Id_PR
  Domain.Entites.TopicDetail.Creator_Nick_Name_PR*:
    name:
      CSharp:
      - id: Domain.Entites.TopicDetail.Creator_Nick_Name_PR*
        name: Creator_Nick_Name_PR
        nameWithType: TopicDetail.Creator_Nick_Name_PR
        qualifiedName: Domain.Entites.TopicDetail.Creator_Nick_Name_PR
      VB:
      - id: Domain.Entites.TopicDetail.Creator_Nick_Name_PR*
        name: Creator_Nick_Name_PR
        nameWithType: TopicDetail.Creator_Nick_Name_PR
        qualifiedName: Domain.Entites.TopicDetail.Creator_Nick_Name_PR
    isDefinition: true
    commentId: Overload:Domain.Entites.TopicDetail.Creator_Nick_Name_PR
  Domain.Entites.TopicDetail:
    name:
      CSharp:
      - id: Domain.Entites.TopicDetail
        name: TopicDetail
        nameWithType: TopicDetail
        qualifiedName: Domain.Entites.TopicDetail
      VB:
      - id: Domain.Entites.TopicDetail
        name: TopicDetail
        nameWithType: TopicDetail
        qualifiedName: Domain.Entites.TopicDetail
    isDefinition: true
    commentId: T:Domain.Entites.TopicDetail
  Domain.Entites._User.Name*:
    name:
      CSharp:
      - id: Domain.Entites._User.Name*
        name: Name
        nameWithType: _User.Name
        qualifiedName: Domain.Entites._User.Name
      VB:
      - id: Domain.Entites._User.Name*
        name: Name
        nameWithType: _User.Name
        qualifiedName: Domain.Entites._User.Name
    isDefinition: true
    commentId: Overload:Domain.Entites._User.Name
  Domain.Entites._User.First_Name*:
    name:
      CSharp:
      - id: Domain.Entites._User.First_Name*
        name: First_Name
        nameWithType: _User.First_Name
        qualifiedName: Domain.Entites._User.First_Name
      VB:
      - id: Domain.Entites._User.First_Name*
        name: First_Name
        nameWithType: _User.First_Name
        qualifiedName: Domain.Entites._User.First_Name
    isDefinition: true
    commentId: Overload:Domain.Entites._User.First_Name
  Domain.Entites._User.Nick_Name*:
    name:
      CSharp:
      - id: Domain.Entites._User.Nick_Name*
        name: Nick_Name
        nameWithType: _User.Nick_Name
        qualifiedName: Domain.Entites._User.Nick_Name
      VB:
      - id: Domain.Entites._User.Nick_Name*
        name: Nick_Name
        nameWithType: _User.Nick_Name
        qualifiedName: Domain.Entites._User.Nick_Name
    isDefinition: true
    commentId: Overload:Domain.Entites._User.Nick_Name
  Domain.Entites._User.Ph_No*:
    name:
      CSharp:
      - id: Domain.Entites._User.Ph_No*
        name: Ph_No
        nameWithType: _User.Ph_No
        qualifiedName: Domain.Entites._User.Ph_No
      VB:
      - id: Domain.Entites._User.Ph_No*
        name: Ph_No
        nameWithType: _User.Ph_No
        qualifiedName: Domain.Entites._User.Ph_No
    isDefinition: true
    commentId: Overload:Domain.Entites._User.Ph_No
  Domain.Entites._User.Photo*:
    name:
      CSharp:
      - id: Domain.Entites._User.Photo*
        name: Photo
        nameWithType: _User.Photo
        qualifiedName: Domain.Entites._User.Photo
      VB:
      - id: Domain.Entites._User.Photo*
        name: Photo
        nameWithType: _User.Photo
        qualifiedName: Domain.Entites._User.Photo
    isDefinition: true
    commentId: Overload:Domain.Entites._User.Photo
  Domain.Entites._User.E_Mail*:
    name:
      CSharp:
      - id: Domain.Entites._User.E_Mail*
        name: E_Mail
        nameWithType: _User.E_Mail
        qualifiedName: Domain.Entites._User.E_Mail
      VB:
      - id: Domain.Entites._User.E_Mail*
        name: E_Mail
        nameWithType: _User.E_Mail
        qualifiedName: Domain.Entites._User.E_Mail
    isDefinition: true
    commentId: Overload:Domain.Entites._User.E_Mail
  Domain.Entites._User.Moderator_Y_N*:
    name:
      CSharp:
      - id: Domain.Entites._User.Moderator_Y_N*
        name: Moderator_Y_N
        nameWithType: _User.Moderator_Y_N
        qualifiedName: Domain.Entites._User.Moderator_Y_N
      VB:
      - id: Domain.Entites._User.Moderator_Y_N*
        name: Moderator_Y_N
        nameWithType: _User.Moderator_Y_N
        qualifiedName: Domain.Entites._User.Moderator_Y_N
    isDefinition: true
    commentId: Overload:Domain.Entites._User.Moderator_Y_N
  Domain.Entites._User.Password*:
    name:
      CSharp:
      - id: Domain.Entites._User.Password*
        name: Password
        nameWithType: _User.Password
        qualifiedName: Domain.Entites._User.Password
      VB:
      - id: Domain.Entites._User.Password*
        name: Password
        nameWithType: _User.Password
        qualifiedName: Domain.Entites._User.Password
    isDefinition: true
    commentId: Overload:Domain.Entites._User.Password
  Domain.Entites._User.Count_Replies*:
    name:
      CSharp:
      - id: Domain.Entites._User.Count_Replies*
        name: Count_Replies
        nameWithType: _User.Count_Replies
        qualifiedName: Domain.Entites._User.Count_Replies
      VB:
      - id: Domain.Entites._User.Count_Replies*
        name: Count_Replies
        nameWithType: _User.Count_Replies
        qualifiedName: Domain.Entites._User.Count_Replies
    isDefinition: true
    commentId: Overload:Domain.Entites._User.Count_Replies
  Domain.Entites._User.Count_Topics*:
    name:
      CSharp:
      - id: Domain.Entites._User.Count_Topics*
        name: Count_Topics
        nameWithType: _User.Count_Topics
        qualifiedName: Domain.Entites._User.Count_Topics
      VB:
      - id: Domain.Entites._User.Count_Topics*
        name: Count_Topics
        nameWithType: _User.Count_Topics
        qualifiedName: Domain.Entites._User.Count_Topics
    isDefinition: true
    commentId: Overload:Domain.Entites._User.Count_Topics
  Domain.Entites._User:
    name:
      CSharp:
      - id: Domain.Entites._User
        name: _User
        nameWithType: _User
        qualifiedName: Domain.Entites._User
      VB:
      - id: Domain.Entites._User
        name: _User
        nameWithType: _User
        qualifiedName: Domain.Entites._User
    isDefinition: true
    commentId: T:Domain.Entites._User
  System.Exception:
    name:
      CSharp:
      - id: System.Exception
        name: Exception
        nameWithType: Exception
        qualifiedName: System.Exception
        isExternal: true
      VB:
      - id: System.Exception
        name: Exception
        nameWithType: Exception
        qualifiedName: System.Exception
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Exception
  System.Exception.GetBaseException:
    name:
      CSharp:
      - id: System.Exception.GetBaseException
        name: GetBaseException
        nameWithType: Exception.GetBaseException
        qualifiedName: System.Exception.GetBaseException
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Exception.GetBaseException
        name: GetBaseException
        nameWithType: Exception.GetBaseException
        qualifiedName: System.Exception.GetBaseException
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Exception
    commentId: M:System.Exception.GetBaseException
  System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):
    name:
      CSharp:
      - id: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
        name: GetObjectData
        nameWithType: Exception.GetObjectData
        qualifiedName: System.Exception.GetObjectData
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Runtime.Serialization.SerializationInfo
        name: SerializationInfo
        nameWithType: SerializationInfo
        qualifiedName: System.Runtime.Serialization.SerializationInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Runtime.Serialization.StreamingContext
        name: StreamingContext
        nameWithType: StreamingContext
        qualifiedName: System.Runtime.Serialization.StreamingContext
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
        name: GetObjectData
        nameWithType: Exception.GetObjectData
        qualifiedName: System.Exception.GetObjectData
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Runtime.Serialization.SerializationInfo
        name: SerializationInfo
        nameWithType: SerializationInfo
        qualifiedName: System.Runtime.Serialization.SerializationInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Runtime.Serialization.StreamingContext
        name: StreamingContext
        nameWithType: StreamingContext
        qualifiedName: System.Runtime.Serialization.StreamingContext
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Exception
    commentId: M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  System.Exception.GetType:
    name:
      CSharp:
      - id: System.Exception.GetType
        name: GetType
        nameWithType: Exception.GetType
        qualifiedName: System.Exception.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Exception.GetType
        name: GetType
        nameWithType: Exception.GetType
        qualifiedName: System.Exception.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Exception
    commentId: M:System.Exception.GetType
  System.Exception.ToString:
    name:
      CSharp:
      - id: System.Exception.ToString
        name: ToString
        nameWithType: Exception.ToString
        qualifiedName: System.Exception.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Exception.ToString
        name: ToString
        nameWithType: Exception.ToString
        qualifiedName: System.Exception.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Exception
    commentId: M:System.Exception.ToString
  System.Exception.Data:
    name:
      CSharp:
      - id: System.Exception.Data
        name: Data
        nameWithType: Exception.Data
        qualifiedName: System.Exception.Data
        isExternal: true
      VB:
      - id: System.Exception.Data
        name: Data
        nameWithType: Exception.Data
        qualifiedName: System.Exception.Data
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.Data
  System.Exception.HelpLink:
    name:
      CSharp:
      - id: System.Exception.HelpLink
        name: HelpLink
        nameWithType: Exception.HelpLink
        qualifiedName: System.Exception.HelpLink
        isExternal: true
      VB:
      - id: System.Exception.HelpLink
        name: HelpLink
        nameWithType: Exception.HelpLink
        qualifiedName: System.Exception.HelpLink
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.HelpLink
  System.Exception.HResult:
    name:
      CSharp:
      - id: System.Exception.HResult
        name: HResult
        nameWithType: Exception.HResult
        qualifiedName: System.Exception.HResult
        isExternal: true
      VB:
      - id: System.Exception.HResult
        name: HResult
        nameWithType: Exception.HResult
        qualifiedName: System.Exception.HResult
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.HResult
  System.Exception.InnerException:
    name:
      CSharp:
      - id: System.Exception.InnerException
        name: InnerException
        nameWithType: Exception.InnerException
        qualifiedName: System.Exception.InnerException
        isExternal: true
      VB:
      - id: System.Exception.InnerException
        name: InnerException
        nameWithType: Exception.InnerException
        qualifiedName: System.Exception.InnerException
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.InnerException
  System.Exception.Message:
    name:
      CSharp:
      - id: System.Exception.Message
        name: Message
        nameWithType: Exception.Message
        qualifiedName: System.Exception.Message
        isExternal: true
      VB:
      - id: System.Exception.Message
        name: Message
        nameWithType: Exception.Message
        qualifiedName: System.Exception.Message
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.Message
  System.Exception.Source:
    name:
      CSharp:
      - id: System.Exception.Source
        name: Source
        nameWithType: Exception.Source
        qualifiedName: System.Exception.Source
        isExternal: true
      VB:
      - id: System.Exception.Source
        name: Source
        nameWithType: Exception.Source
        qualifiedName: System.Exception.Source
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.Source
  System.Exception.StackTrace:
    name:
      CSharp:
      - id: System.Exception.StackTrace
        name: StackTrace
        nameWithType: Exception.StackTrace
        qualifiedName: System.Exception.StackTrace
        isExternal: true
      VB:
      - id: System.Exception.StackTrace
        name: StackTrace
        nameWithType: Exception.StackTrace
        qualifiedName: System.Exception.StackTrace
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.StackTrace
  System.Exception.TargetSite:
    name:
      CSharp:
      - id: System.Exception.TargetSite
        name: TargetSite
        nameWithType: Exception.TargetSite
        qualifiedName: System.Exception.TargetSite
        isExternal: true
      VB:
      - id: System.Exception.TargetSite
        name: TargetSite
        nameWithType: Exception.TargetSite
        qualifiedName: System.Exception.TargetSite
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.TargetSite
  System.Exception.SerializeObjectState:
    name:
      CSharp:
      - id: System.Exception.SerializeObjectState
        name: SerializeObjectState
        nameWithType: Exception.SerializeObjectState
        qualifiedName: System.Exception.SerializeObjectState
        isExternal: true
      VB:
      - id: System.Exception.SerializeObjectState
        name: SerializeObjectState
        nameWithType: Exception.SerializeObjectState
        qualifiedName: System.Exception.SerializeObjectState
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: E:System.Exception.SerializeObjectState
  System.Runtime.Serialization:
    name:
      CSharp:
      - name: System.Runtime.Serialization
        nameWithType: System.Runtime.Serialization
        qualifiedName: System.Runtime.Serialization
        isExternal: true
      VB:
      - name: System.Runtime.Serialization
        nameWithType: System.Runtime.Serialization
        qualifiedName: System.Runtime.Serialization
    isDefinition: true
    commentId: N:System.Runtime.Serialization
  System.Runtime.Serialization.ISerializable:
    name:
      CSharp:
      - id: System.Runtime.Serialization.ISerializable
        name: ISerializable
        nameWithType: ISerializable
        qualifiedName: System.Runtime.Serialization.ISerializable
        isExternal: true
      VB:
      - id: System.Runtime.Serialization.ISerializable
        name: ISerializable
        nameWithType: ISerializable
        qualifiedName: System.Runtime.Serialization.ISerializable
        isExternal: true
    isDefinition: true
    parent: System.Runtime.Serialization
    commentId: T:System.Runtime.Serialization.ISerializable
  Domain.Exceptions.AuthentificationFailException.#ctor*:
    name:
      CSharp:
      - id: Domain.Exceptions.AuthentificationFailException.#ctor*
        name: AuthentificationFailException
        nameWithType: AuthentificationFailException.AuthentificationFailException
        qualifiedName: Domain.Exceptions.AuthentificationFailException.AuthentificationFailException
      VB:
      - id: Domain.Exceptions.AuthentificationFailException.#ctor*
        name: AuthentificationFailException
        nameWithType: AuthentificationFailException.AuthentificationFailException
        qualifiedName: Domain.Exceptions.AuthentificationFailException.AuthentificationFailException
    isDefinition: true
    commentId: Overload:Domain.Exceptions.AuthentificationFailException.#ctor
  Domain.Exceptions.AuthentificationFailException:
    name:
      CSharp:
      - id: Domain.Exceptions.AuthentificationFailException
        name: AuthentificationFailException
        nameWithType: AuthentificationFailException
        qualifiedName: Domain.Exceptions.AuthentificationFailException
      VB:
      - id: Domain.Exceptions.AuthentificationFailException
        name: AuthentificationFailException
        nameWithType: AuthentificationFailException
        qualifiedName: Domain.Exceptions.AuthentificationFailException
    isDefinition: true
    commentId: T:Domain.Exceptions.AuthentificationFailException
  Domain.Exceptions.ForbiddenAccessException.#ctor*:
    name:
      CSharp:
      - id: Domain.Exceptions.ForbiddenAccessException.#ctor*
        name: ForbiddenAccessException
        nameWithType: ForbiddenAccessException.ForbiddenAccessException
        qualifiedName: Domain.Exceptions.ForbiddenAccessException.ForbiddenAccessException
      VB:
      - id: Domain.Exceptions.ForbiddenAccessException.#ctor*
        name: ForbiddenAccessException
        nameWithType: ForbiddenAccessException.ForbiddenAccessException
        qualifiedName: Domain.Exceptions.ForbiddenAccessException.ForbiddenAccessException
    isDefinition: true
    commentId: Overload:Domain.Exceptions.ForbiddenAccessException.#ctor
  Domain.Exceptions.ForbiddenAccessException:
    name:
      CSharp:
      - id: Domain.Exceptions.ForbiddenAccessException
        name: ForbiddenAccessException
        nameWithType: ForbiddenAccessException
        qualifiedName: Domain.Exceptions.ForbiddenAccessException
      VB:
      - id: Domain.Exceptions.ForbiddenAccessException
        name: ForbiddenAccessException
        nameWithType: ForbiddenAccessException
        qualifiedName: Domain.Exceptions.ForbiddenAccessException
    isDefinition: true
    commentId: T:Domain.Exceptions.ForbiddenAccessException
  Domain.Exceptions.InsertSQLFailureException.#ctor*:
    name:
      CSharp:
      - id: Domain.Exceptions.InsertSQLFailureException.#ctor*
        name: InsertSQLFailureException
        nameWithType: InsertSQLFailureException.InsertSQLFailureException
        qualifiedName: Domain.Exceptions.InsertSQLFailureException.InsertSQLFailureException
      VB:
      - id: Domain.Exceptions.InsertSQLFailureException.#ctor*
        name: InsertSQLFailureException
        nameWithType: InsertSQLFailureException.InsertSQLFailureException
        qualifiedName: Domain.Exceptions.InsertSQLFailureException.InsertSQLFailureException
    isDefinition: true
    commentId: Overload:Domain.Exceptions.InsertSQLFailureException.#ctor
  Domain.Exceptions.InsertSQLFailureException:
    name:
      CSharp:
      - id: Domain.Exceptions.InsertSQLFailureException
        name: InsertSQLFailureException
        nameWithType: InsertSQLFailureException
        qualifiedName: Domain.Exceptions.InsertSQLFailureException
      VB:
      - id: Domain.Exceptions.InsertSQLFailureException
        name: InsertSQLFailureException
        nameWithType: InsertSQLFailureException
        qualifiedName: Domain.Exceptions.InsertSQLFailureException
    isDefinition: true
    commentId: T:Domain.Exceptions.InsertSQLFailureException
  Domain.Exceptions.NotFoundException.#ctor*:
    name:
      CSharp:
      - id: Domain.Exceptions.NotFoundException.#ctor*
        name: NotFoundException
        nameWithType: NotFoundException.NotFoundException
        qualifiedName: Domain.Exceptions.NotFoundException.NotFoundException
      VB:
      - id: Domain.Exceptions.NotFoundException.#ctor*
        name: NotFoundException
        nameWithType: NotFoundException.NotFoundException
        qualifiedName: Domain.Exceptions.NotFoundException.NotFoundException
    isDefinition: true
    commentId: Overload:Domain.Exceptions.NotFoundException.#ctor
  Domain.Exceptions.NotFoundException:
    name:
      CSharp:
      - id: Domain.Exceptions.NotFoundException
        name: NotFoundException
        nameWithType: NotFoundException
        qualifiedName: Domain.Exceptions.NotFoundException
      VB:
      - id: Domain.Exceptions.NotFoundException
        name: NotFoundException
        nameWithType: NotFoundException
        qualifiedName: Domain.Exceptions.NotFoundException
    isDefinition: true
    commentId: T:Domain.Exceptions.NotFoundException
  Domain.Exceptions.UnknownException.#ctor*:
    name:
      CSharp:
      - id: Domain.Exceptions.UnknownException.#ctor*
        name: UnknownException
        nameWithType: UnknownException.UnknownException
        qualifiedName: Domain.Exceptions.UnknownException.UnknownException
      VB:
      - id: Domain.Exceptions.UnknownException.#ctor*
        name: UnknownException
        nameWithType: UnknownException.UnknownException
        qualifiedName: Domain.Exceptions.UnknownException.UnknownException
    isDefinition: true
    commentId: Overload:Domain.Exceptions.UnknownException.#ctor
  Domain.Exceptions.UnknownException:
    name:
      CSharp:
      - id: Domain.Exceptions.UnknownException
        name: UnknownException
        nameWithType: UnknownException
        qualifiedName: Domain.Exceptions.UnknownException
      VB:
      - id: Domain.Exceptions.UnknownException
        name: UnknownException
        nameWithType: UnknownException
        qualifiedName: Domain.Exceptions.UnknownException
    isDefinition: true
    commentId: T:Domain.Exceptions.UnknownException
  Domain.Exceptions.UpdateSQLFailureException.#ctor*:
    name:
      CSharp:
      - id: Domain.Exceptions.UpdateSQLFailureException.#ctor*
        name: UpdateSQLFailureException
        nameWithType: UpdateSQLFailureException.UpdateSQLFailureException
        qualifiedName: Domain.Exceptions.UpdateSQLFailureException.UpdateSQLFailureException
      VB:
      - id: Domain.Exceptions.UpdateSQLFailureException.#ctor*
        name: UpdateSQLFailureException
        nameWithType: UpdateSQLFailureException.UpdateSQLFailureException
        qualifiedName: Domain.Exceptions.UpdateSQLFailureException.UpdateSQLFailureException
    isDefinition: true
    commentId: Overload:Domain.Exceptions.UpdateSQLFailureException.#ctor
  Domain.Exceptions.UpdateSQLFailureException:
    name:
      CSharp:
      - id: Domain.Exceptions.UpdateSQLFailureException
        name: UpdateSQLFailureException
        nameWithType: UpdateSQLFailureException
        qualifiedName: Domain.Exceptions.UpdateSQLFailureException
      VB:
      - id: Domain.Exceptions.UpdateSQLFailureException
        name: UpdateSQLFailureException
        nameWithType: UpdateSQLFailureException
        qualifiedName: Domain.Exceptions.UpdateSQLFailureException
    isDefinition: true
    commentId: T:Domain.Exceptions.UpdateSQLFailureException
  Domain.Exceptions:
    name:
      CSharp:
      - name: Domain.Exceptions
        nameWithType: Domain.Exceptions
        qualifiedName: Domain.Exceptions
      VB:
      - name: Domain.Exceptions
        nameWithType: Domain.Exceptions
        qualifiedName: Domain.Exceptions
    isDefinition: true
    commentId: N:Domain.Exceptions
