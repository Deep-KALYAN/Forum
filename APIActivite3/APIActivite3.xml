<?xml version="1.0"?>
<doc>
    <assembly>
        <name>APIActivite3</name>
    </assembly>
    <members>
        <member name="M:APIActivite3.Controllers.IReplyController.CreateReply(Domain.DTO.Requestes.Replies.CreateReplyRequestDTO)">
            <summary>
            To Create the Reply
            </summary>
            <param name="newReply">CreateReplyRequestDTO</param>
            <returns>ReplyResponseDTO or BadRequest</returns>
        </member>
        <member name="M:APIActivite3.Controllers.IReplyController.DeleteReply(System.Int32,APIActivite3.Utils.ICurrentUserUtils)">
            <summary>
            To Delete the Reply
            </summary>
            <param name="id">id</param>
            <param name="currentUserUtils">ICurrentUserUtils</param>
            <returns>NoContent or NotFound</returns>
        </member>
        <member name="M:APIActivite3.Controllers.IReplyController.GetReplyById(System.Int32)">
            <summary>
            To get the reply by Id
            </summary>
            <param name="id">id</param>
            <returns>OK ReplyResponseDTO or NotFound</returns>
        </member>
        <member name="M:APIActivite3.Controllers.IReplyController.UpdateReply(System.Int32,Domain.DTO.Requestes.Replies.UpdateReplyRequestDTO,APIActivite3.Utils.ICurrentUserUtils)">
            <summary>
            To Update the reply
            </summary>
            <param name="id">id</param>
            <param name="updateReply">UpdateReplyRequestDTO</param>
            <param name="currentUserUtils">ICurrentUserUtils</param>
            <returns></returns>
        </member>
        <member name="M:APIActivite3.Controllers.IRubricController.GetAllRubricsTopics">
            <summary>
            To Get all Topics of All Rubrics
            </summary>
            <returns>Ok GetRubricsAndTopicsDetailResponseDTO or NotFound</returns>
        </member>
        <member name="M:APIActivite3.Controllers.IRubricController.GetRubrics">
            <summary>
            To Get all Rubrics 
            </summary>
            <returns> OK GetRubricsResponseDTO or  NotFound</returns>
        </member>
        <member name="M:APIActivite3.Controllers.IRubricController.GetTopicsByRubricId(System.Int32)">
            <summary>
            To Get Topics(with Detail) by Rubric Id (from View)
            Deleted Topics Filtered in DB View
            </summary>
            <param name="id">id</param>
            <returns>OK GetRubricsAndTopicsDetailResponseDTO or  NotFound</returns>
        </member>
        <member name="M:APIActivite3.Controllers.ISecurityController.Login(Domain.DTO.Requestes.Security.AuthentificationRequestDTO)">
            <summary>
            Login to Generate Jwt Token
            </summary>
            <param name="authentificationRequestDTO">AuthentificationRequestDTO</param>
            <returns>GenerateJwtToken(login_name, List of Roles, user id) or AuthentificationFailure</returns>
        </member>
        <member name="M:APIActivite3.Controllers.ITopicController.CreateTopic(Domain.DTO.Requestes.Topics.CreateTopicRequestDTO,APIActivite3.Utils.ICurrentUserUtils)">
            <summary>
            To Create the New Topic
            </summary>
            <param name="newTopicDTO">CreateTopicRequestDTO</param>
            <param name="currentUserUtils">ICurrentUserUtils</param>
            <returns>TopicResponseDTO or BadRequest</returns>
        </member>
        <member name="M:APIActivite3.Controllers.ITopicController.DeleteTopic(System.Int32)">
            <summary>
            To Delete the Topic by ID
            </summary>
            <param name="id">id</param>
            <returns>NoContent or NotFound</returns>
        </member>
        <member name="M:APIActivite3.Controllers.ITopicController.GetTopicById(System.Int32)">
            <summary>
            To Get Topic by Id
            </summary>
            <param name="id">id</param>
            <returns>OK TopicResponseDTO or NotFound </returns>
        </member>
        <member name="M:APIActivite3.Controllers.ITopicController.GetTopicDetailById(System.Int32)">
            <summary>
            To Get the Replies and Theirs Parents Replies with Detail(from View) by Topic Id
            Deleled Topics filtered in DB view
            Deleted Replies and Deleted Parent Replies texts Changed in BLL
            </summary>
            <param name="id">id</param>
            <returns>GetTopicRepliesDetailResponseDTO or NotFound</returns>
        </member>
        <member name="M:APIActivite3.Controllers.ITopicController.UpdateTopic(System.Int32,Domain.DTO.Requestes.Topics.UpdateTopicRequestDTO,APIActivite3.Utils.ICurrentUserUtils)">
            <summary>
            To Update the Topic
            </summary>
            <param name="id">id</param>
            <param name="updateTopicDTO">UpdateTopicRequestDTO</param>
            <param name="currentUserUtils">ICurrentUserUtils</param>
            <returns>OK TopicResponseDTO or BadRequest</returns>
        </member>
        <member name="M:APIActivite3.Controllers.IUserAccountController.CreateUser(Domain.DTO.CreateUserRequestDTO)">
            <summary>
            To Create User Account
            </summary>
            <param name="newUser">CreateUserRequestDTO</param>
            <returns>CreateUserResponseDTO or BadRequest</returns>
        </member>
        <member name="M:APIActivite3.Controllers.IUserAccountController.DeleteUser(System.Int32)">
            <summary>
            To Delete User Account by Id
            </summary>
            <param name="id">id</param>
            <returns>NoContent or NotFound</returns>
        </member>
        <member name="M:APIActivite3.Controllers.IUserAccountController.GetUserById(System.Int32)">
            <summary>
            To Get User Account by Id
            </summary>
            <param name="id">id</param>
            <returns>OK GetUsersResponseDTO or NotFound</returns>
        </member>
        <member name="M:APIActivite3.Controllers.IUserAccountController.GetUsers">
            <summary>
            To Get all Users Accounts
            </summary>
            <returns>OK GetUsersResponseDTO List or NotFound</returns>
        </member>
        <member name="M:APIActivite3.Controllers.IUserAccountController.ModifieUser(System.Int32,Domain.DTO.Requestes.Users.UpdateUserRequestDTO)">
            <summary>
            To Modify User Account
            </summary>
            <param name="id">id</param>
            <param name="newUser">UpdateUserRequestDTO</param>
            <returns>OK UpdateUserResponseDTO or BadRequest</returns>
        </member>
        <member name="M:APIActivite3.Filters.ApiExceptionFilterAttribute.HandleException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            Handle the good exception for the context
            </summary>
            <param name="context">Context of exception</param>
        </member>
        <member name="M:APIActivite3.Filters.ApiExceptionFilterAttribute.HandleInvalidModelStateException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            Handle Invalid Model State exception 
            </summary>
            <param name="context">Context of exception</param>
        </member>
        <member name="M:APIActivite3.Filters.ApiExceptionFilterAttribute.HandleNotFoundException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            Handle a not found ressource exception 
            </summary>
            <param name="context">Context of exception</param>
        </member>
        <member name="M:APIActivite3.Filters.ApiExceptionFilterAttribute.HandleUnauthorizedAccessException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            Handle for Unauthorized Access Exception
            </summary>
            <param name="context">Context of the exception</param>
        </member>
        <member name="M:APIActivite3.Filters.ApiExceptionFilterAttribute.HandleForbiddenAccessException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            Handle a forbidden Access excception
            </summary>
            <param name="context">Context of the exception</param>
        </member>
        <member name="M:APIActivite3.Filters.ApiExceptionFilterAttribute.HandleUnknownException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            Handle for an Unknow Exception
            </summary>
            <param name="context">Context of the exception</param>
        </member>
        <member name="M:APIActivite3.Utils.ICurrentUserUtils.GetCurrentUserId">
            <summary>
            To Get the Current User Id
            </summary>
            <returns>Id or null</returns>
        </member>
    </members>
</doc>
