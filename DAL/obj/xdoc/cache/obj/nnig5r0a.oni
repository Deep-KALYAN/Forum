id: DAL
language: CSharp
name:
  Default: DAL
qualifiedName:
  Default: DAL
type: Assembly
modifiers: {}
items:
- id: DAL
  commentId: N:DAL
  language: CSharp
  name:
    CSharp: DAL
    VB: DAL
  nameWithType:
    CSharp: DAL
    VB: DAL
  qualifiedName:
    CSharp: DAL
    VB: DAL
  type: Namespace
  assemblies:
  - DAL
  modifiers: {}
  items:
  - id: DAL.DALExtension
    commentId: T:DAL.DALExtension
    language: CSharp
    name:
      CSharp: DALExtension
      VB: DALExtension
    nameWithType:
      CSharp: DALExtension
      VB: DALExtension
    qualifiedName:
      CSharp: DAL.DALExtension
      VB: DAL.DALExtension
    type: Class
    assemblies:
    - DAL
    namespace: DAL
    source:
      remote:
        path: DAL/DALExtension.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: DALExtension
      path: ../DAL/DALExtension.cs
      startLine: 6
    syntax:
      content:
        CSharp: public static class DALExtension
        VB: Public Module DALExtension
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - isExtensionMethod: true
      id: DAL.DALExtension.AddDALExtension(Microsoft.Extensions.DependencyInjection.IServiceCollection)
      commentId: M:DAL.DALExtension.AddDALExtension(Microsoft.Extensions.DependencyInjection.IServiceCollection)
      language: CSharp
      name:
        CSharp: AddDALExtension(IServiceCollection)
        VB: AddDALExtension(IServiceCollection)
      nameWithType:
        CSharp: DALExtension.AddDALExtension(IServiceCollection)
        VB: DALExtension.AddDALExtension(IServiceCollection)
      qualifiedName:
        CSharp: DAL.DALExtension.AddDALExtension(Microsoft.Extensions.DependencyInjection.IServiceCollection)
        VB: DAL.DALExtension.AddDALExtension(Microsoft.Extensions.DependencyInjection.IServiceCollection)
      type: Method
      assemblies:
      - DAL
      namespace: DAL
      source:
        remote:
          path: DAL/DALExtension.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: AddDALExtension
        path: ../DAL/DALExtension.cs
        startLine: 8
      syntax:
        content:
          CSharp: public static void AddDALExtension(this IServiceCollection services)
          VB: >-
            <ExtensionAttribute>

            Public Shared Sub AddDALExtension(services As IServiceCollection)
        parameters:
        - id: services
          type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      overload: DAL.DALExtension.AddDALExtension*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
- id: DAL.UOW
  commentId: N:DAL.UOW
  language: CSharp
  name:
    CSharp: DAL.UOW
    VB: DAL.UOW
  nameWithType:
    CSharp: DAL.UOW
    VB: DAL.UOW
  qualifiedName:
    CSharp: DAL.UOW
    VB: DAL.UOW
  type: Namespace
  assemblies:
  - DAL
  modifiers: {}
  items:
  - id: DAL.UOW.DBSession
    commentId: T:DAL.UOW.DBSession
    language: CSharp
    name:
      CSharp: DBSession
      VB: DBSession
    nameWithType:
      CSharp: DBSession
      VB: DBSession
    qualifiedName:
      CSharp: DAL.UOW.DBSession
      VB: DAL.UOW.DBSession
    type: Class
    assemblies:
    - DAL
    namespace: DAL.UOW
    source:
      remote:
        path: DAL/UOW/DBSession.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: DBSession
      path: ../DAL/UOW/DBSession.cs
      startLine: 11
    syntax:
      content:
        CSharp: 'public class DBSession : IDisposable, IDBSession'
        VB: >-
          Public Class DBSession

              Implements IDisposable, IDBSession
    inheritance:
    - System.Object
    implements:
    - System.IDisposable
    - DAL.UOW.IDBSession
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DAL.UOW.DBSession.Connection
      commentId: P:DAL.UOW.DBSession.Connection
      language: CSharp
      name:
        CSharp: Connection
        VB: Connection
      nameWithType:
        CSharp: DBSession.Connection
        VB: DBSession.Connection
      qualifiedName:
        CSharp: DAL.UOW.DBSession.Connection
        VB: DAL.UOW.DBSession.Connection
      type: Property
      assemblies:
      - DAL
      namespace: DAL.UOW
      source:
        remote:
          path: DAL/UOW/DBSession.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Connection
        path: ../DAL/UOW/DBSession.cs
        startLine: 13
      syntax:
        content:
          CSharp: public IDbConnection Connection { get; }
          VB: Public ReadOnly Property Connection As IDbConnection
        parameters: []
        return:
          type: System.Data.IDbConnection
      overload: DAL.UOW.DBSession.Connection*
      implements:
      - DAL.UOW.IDBSession.Connection
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DAL.UOW.DBSession.Transaction
      commentId: P:DAL.UOW.DBSession.Transaction
      language: CSharp
      name:
        CSharp: Transaction
        VB: Transaction
      nameWithType:
        CSharp: DBSession.Transaction
        VB: DBSession.Transaction
      qualifiedName:
        CSharp: DAL.UOW.DBSession.Transaction
        VB: DAL.UOW.DBSession.Transaction
      type: Property
      assemblies:
      - DAL
      namespace: DAL.UOW
      source:
        remote:
          path: DAL/UOW/DBSession.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Transaction
        path: ../DAL/UOW/DBSession.cs
        startLine: 15
      syntax:
        content:
          CSharp: public IDbTransaction Transaction { get; set; }
          VB: Public Property Transaction As IDbTransaction
        parameters: []
        return:
          type: System.Data.IDbTransaction
      overload: DAL.UOW.DBSession.Transaction*
      implements:
      - DAL.UOW.IDBSession.Transaction
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: DAL.UOW.DBSession.#ctor(Microsoft.Extensions.Configuration.IConfiguration)
      commentId: M:DAL.UOW.DBSession.#ctor(Microsoft.Extensions.Configuration.IConfiguration)
      language: CSharp
      name:
        CSharp: DBSession(IConfiguration)
        VB: DBSession(IConfiguration)
      nameWithType:
        CSharp: DBSession.DBSession(IConfiguration)
        VB: DBSession.DBSession(IConfiguration)
      qualifiedName:
        CSharp: DAL.UOW.DBSession.DBSession(Microsoft.Extensions.Configuration.IConfiguration)
        VB: DAL.UOW.DBSession.DBSession(Microsoft.Extensions.Configuration.IConfiguration)
      type: Constructor
      assemblies:
      - DAL
      namespace: DAL.UOW
      source:
        remote:
          path: DAL/UOW/DBSession.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: .ctor
        path: ../DAL/UOW/DBSession.cs
        startLine: 17
      syntax:
        content:
          CSharp: public DBSession(IConfiguration configuration)
          VB: Public Sub New(configuration As IConfiguration)
        parameters:
        - id: configuration
          type: Microsoft.Extensions.Configuration.IConfiguration
      overload: DAL.UOW.DBSession.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DAL.UOW.DBSession.Dispose
      commentId: M:DAL.UOW.DBSession.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: DBSession.Dispose()
        VB: DBSession.Dispose()
      qualifiedName:
        CSharp: DAL.UOW.DBSession.Dispose()
        VB: DAL.UOW.DBSession.Dispose()
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW
      source:
        remote:
          path: DAL/UOW/DBSession.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Dispose
        path: ../DAL/UOW/DBSession.cs
        startLine: 29
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: DAL.UOW.DBSession.Dispose*
      implements:
      - System.IDisposable.Dispose
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: DAL.UOW.IDBSession
    commentId: T:DAL.UOW.IDBSession
    language: CSharp
    name:
      CSharp: IDBSession
      VB: IDBSession
    nameWithType:
      CSharp: IDBSession
      VB: IDBSession
    qualifiedName:
      CSharp: DAL.UOW.IDBSession
      VB: DAL.UOW.IDBSession
    type: Interface
    assemblies:
    - DAL
    namespace: DAL.UOW
    source:
      remote:
        path: DAL/UOW/IDBSession.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: IDBSession
      path: ../DAL/UOW/IDBSession.cs
      startLine: 4
    syntax:
      content:
        CSharp: public interface IDBSession
        VB: Public Interface IDBSession
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: DAL.UOW.IDBSession.Connection
      commentId: P:DAL.UOW.IDBSession.Connection
      language: CSharp
      name:
        CSharp: Connection
        VB: Connection
      nameWithType:
        CSharp: IDBSession.Connection
        VB: IDBSession.Connection
      qualifiedName:
        CSharp: DAL.UOW.IDBSession.Connection
        VB: DAL.UOW.IDBSession.Connection
      type: Property
      assemblies:
      - DAL
      namespace: DAL.UOW
      source:
        remote:
          path: DAL/UOW/IDBSession.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Connection
        path: ../DAL/UOW/IDBSession.cs
        startLine: 7
      syntax:
        content:
          CSharp: IDbConnection Connection { get; }
          VB: ReadOnly Property Connection As IDbConnection
        parameters: []
        return:
          type: System.Data.IDbConnection
      overload: DAL.UOW.IDBSession.Connection*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: DAL.UOW.IDBSession.Transaction
      commentId: P:DAL.UOW.IDBSession.Transaction
      language: CSharp
      name:
        CSharp: Transaction
        VB: Transaction
      nameWithType:
        CSharp: IDBSession.Transaction
        VB: IDBSession.Transaction
      qualifiedName:
        CSharp: DAL.UOW.IDBSession.Transaction
        VB: DAL.UOW.IDBSession.Transaction
      type: Property
      assemblies:
      - DAL
      namespace: DAL.UOW
      source:
        remote:
          path: DAL/UOW/IDBSession.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Transaction
        path: ../DAL/UOW/IDBSession.cs
        startLine: 8
      syntax:
        content:
          CSharp: IDbTransaction Transaction { get; set; }
          VB: Property Transaction As IDbTransaction
        parameters: []
        return:
          type: System.Data.IDbTransaction
      overload: DAL.UOW.IDBSession.Transaction*
      modifiers:
        CSharp:
        - get
        - set
        VB: []
  - id: DAL.UOW.IUnitOfWork
    commentId: T:DAL.UOW.IUnitOfWork
    language: CSharp
    name:
      CSharp: IUnitOfWork
      VB: IUnitOfWork
    nameWithType:
      CSharp: IUnitOfWork
      VB: IUnitOfWork
    qualifiedName:
      CSharp: DAL.UOW.IUnitOfWork
      VB: DAL.UOW.IUnitOfWork
    type: Interface
    assemblies:
    - DAL
    namespace: DAL.UOW
    source:
      remote:
        path: DAL/UOW/IUnitOfWork.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: IUnitOfWork
      path: ../DAL/UOW/IUnitOfWork.cs
      startLine: 4
    syntax:
      content:
        CSharp: public interface IUnitOfWork
        VB: Public Interface IUnitOfWork
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: DAL.UOW.IUnitOfWork.Replies
      commentId: P:DAL.UOW.IUnitOfWork.Replies
      language: CSharp
      name:
        CSharp: Replies
        VB: Replies
      nameWithType:
        CSharp: IUnitOfWork.Replies
        VB: IUnitOfWork.Replies
      qualifiedName:
        CSharp: DAL.UOW.IUnitOfWork.Replies
        VB: DAL.UOW.IUnitOfWork.Replies
      type: Property
      assemblies:
      - DAL
      namespace: DAL.UOW
      source:
        remote:
          path: DAL/UOW/IUnitOfWork.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Replies
        path: ../DAL/UOW/IUnitOfWork.cs
        startLine: 6
      syntax:
        content:
          CSharp: IReplyRepository Replies { get; }
          VB: ReadOnly Property Replies As IReplyRepository
        parameters: []
        return:
          type: DAL.UOW.Repositories.IReplyRepository
      overload: DAL.UOW.IUnitOfWork.Replies*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: DAL.UOW.IUnitOfWork.Rubrics
      commentId: P:DAL.UOW.IUnitOfWork.Rubrics
      language: CSharp
      name:
        CSharp: Rubrics
        VB: Rubrics
      nameWithType:
        CSharp: IUnitOfWork.Rubrics
        VB: IUnitOfWork.Rubrics
      qualifiedName:
        CSharp: DAL.UOW.IUnitOfWork.Rubrics
        VB: DAL.UOW.IUnitOfWork.Rubrics
      type: Property
      assemblies:
      - DAL
      namespace: DAL.UOW
      source:
        remote:
          path: DAL/UOW/IUnitOfWork.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Rubrics
        path: ../DAL/UOW/IUnitOfWork.cs
        startLine: 7
      syntax:
        content:
          CSharp: IRubricRepository Rubrics { get; }
          VB: ReadOnly Property Rubrics As IRubricRepository
        parameters: []
        return:
          type: DAL.UOW.Repositories.IRubricRepository
      overload: DAL.UOW.IUnitOfWork.Rubrics*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: DAL.UOW.IUnitOfWork.Topics
      commentId: P:DAL.UOW.IUnitOfWork.Topics
      language: CSharp
      name:
        CSharp: Topics
        VB: Topics
      nameWithType:
        CSharp: IUnitOfWork.Topics
        VB: IUnitOfWork.Topics
      qualifiedName:
        CSharp: DAL.UOW.IUnitOfWork.Topics
        VB: DAL.UOW.IUnitOfWork.Topics
      type: Property
      assemblies:
      - DAL
      namespace: DAL.UOW
      source:
        remote:
          path: DAL/UOW/IUnitOfWork.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Topics
        path: ../DAL/UOW/IUnitOfWork.cs
        startLine: 8
      syntax:
        content:
          CSharp: ITopicRepository Topics { get; }
          VB: ReadOnly Property Topics As ITopicRepository
        parameters: []
        return:
          type: DAL.UOW.Repositories.ITopicRepository
      overload: DAL.UOW.IUnitOfWork.Topics*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: DAL.UOW.IUnitOfWork.Users
      commentId: P:DAL.UOW.IUnitOfWork.Users
      language: CSharp
      name:
        CSharp: Users
        VB: Users
      nameWithType:
        CSharp: IUnitOfWork.Users
        VB: IUnitOfWork.Users
      qualifiedName:
        CSharp: DAL.UOW.IUnitOfWork.Users
        VB: DAL.UOW.IUnitOfWork.Users
      type: Property
      assemblies:
      - DAL
      namespace: DAL.UOW
      source:
        remote:
          path: DAL/UOW/IUnitOfWork.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Users
        path: ../DAL/UOW/IUnitOfWork.cs
        startLine: 9
      syntax:
        content:
          CSharp: IUserRepository Users { get; }
          VB: ReadOnly Property Users As IUserRepository
        parameters: []
        return:
          type: DAL.UOW.Repositories.IUserRepository
      overload: DAL.UOW.IUnitOfWork.Users*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: DAL.UOW.IUnitOfWork.BeginTransaction
      commentId: M:DAL.UOW.IUnitOfWork.BeginTransaction
      language: CSharp
      name:
        CSharp: BeginTransaction()
        VB: BeginTransaction()
      nameWithType:
        CSharp: IUnitOfWork.BeginTransaction()
        VB: IUnitOfWork.BeginTransaction()
      qualifiedName:
        CSharp: DAL.UOW.IUnitOfWork.BeginTransaction()
        VB: DAL.UOW.IUnitOfWork.BeginTransaction()
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW
      source:
        remote:
          path: DAL/UOW/IUnitOfWork.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: BeginTransaction
        path: ../DAL/UOW/IUnitOfWork.cs
        startLine: 11
      syntax:
        content:
          CSharp: void BeginTransaction()
          VB: Sub BeginTransaction
      overload: DAL.UOW.IUnitOfWork.BeginTransaction*
      modifiers:
        CSharp: []
        VB: []
    - id: DAL.UOW.IUnitOfWork.Commit
      commentId: M:DAL.UOW.IUnitOfWork.Commit
      language: CSharp
      name:
        CSharp: Commit()
        VB: Commit()
      nameWithType:
        CSharp: IUnitOfWork.Commit()
        VB: IUnitOfWork.Commit()
      qualifiedName:
        CSharp: DAL.UOW.IUnitOfWork.Commit()
        VB: DAL.UOW.IUnitOfWork.Commit()
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW
      source:
        remote:
          path: DAL/UOW/IUnitOfWork.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Commit
        path: ../DAL/UOW/IUnitOfWork.cs
        startLine: 12
      syntax:
        content:
          CSharp: void Commit()
          VB: Sub Commit
      overload: DAL.UOW.IUnitOfWork.Commit*
      modifiers:
        CSharp: []
        VB: []
    - id: DAL.UOW.IUnitOfWork.RollBack
      commentId: M:DAL.UOW.IUnitOfWork.RollBack
      language: CSharp
      name:
        CSharp: RollBack()
        VB: RollBack()
      nameWithType:
        CSharp: IUnitOfWork.RollBack()
        VB: IUnitOfWork.RollBack()
      qualifiedName:
        CSharp: DAL.UOW.IUnitOfWork.RollBack()
        VB: DAL.UOW.IUnitOfWork.RollBack()
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW
      source:
        remote:
          path: DAL/UOW/IUnitOfWork.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: RollBack
        path: ../DAL/UOW/IUnitOfWork.cs
        startLine: 13
      syntax:
        content:
          CSharp: void RollBack()
          VB: Sub RollBack
      overload: DAL.UOW.IUnitOfWork.RollBack*
      modifiers:
        CSharp: []
        VB: []
  - id: DAL.UOW.UnitOfWork
    commentId: T:DAL.UOW.UnitOfWork
    language: CSharp
    name:
      CSharp: UnitOfWork
      VB: UnitOfWork
    nameWithType:
      CSharp: UnitOfWork
      VB: UnitOfWork
    qualifiedName:
      CSharp: DAL.UOW.UnitOfWork
      VB: DAL.UOW.UnitOfWork
    type: Class
    assemblies:
    - DAL
    namespace: DAL.UOW
    source:
      remote:
        path: DAL/UOW/UnitOfWork.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: UnitOfWork
      path: ../DAL/UOW/UnitOfWork.cs
      startLine: 9
    syntax:
      content:
        CSharp: 'class UnitOfWork : IUnitOfWork, IDisposable'
        VB: >-
          Class UnitOfWork

              Implements IUnitOfWork, IDisposable
    inheritance:
    - System.Object
    implements:
    - DAL.UOW.IUnitOfWork
    - System.IDisposable
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - class
      VB:
      - Class
    items:
    - id: DAL.UOW.UnitOfWork._dBSession
      commentId: F:DAL.UOW.UnitOfWork._dBSession
      language: CSharp
      name:
        CSharp: _dBSession
        VB: _dBSession
      nameWithType:
        CSharp: UnitOfWork._dBSession
        VB: UnitOfWork._dBSession
      qualifiedName:
        CSharp: DAL.UOW.UnitOfWork._dBSession
        VB: DAL.UOW.UnitOfWork._dBSession
      type: Field
      assemblies:
      - DAL
      namespace: DAL.UOW
      source:
        remote:
          path: DAL/UOW/UnitOfWork.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: _dBSession
        path: ../DAL/UOW/UnitOfWork.cs
        startLine: 11
      syntax:
        content:
          CSharp: readonly IDBSession _dBSession
          VB: ReadOnly _dBSession As IDBSession
        return:
          type: DAL.UOW.IDBSession
      modifiers:
        CSharp:
        - readonly
        VB:
        - ReadOnly
    - id: DAL.UOW.UnitOfWork.#ctor(DAL.UOW.IDBSession)
      commentId: M:DAL.UOW.UnitOfWork.#ctor(DAL.UOW.IDBSession)
      language: CSharp
      name:
        CSharp: UnitOfWork(IDBSession)
        VB: UnitOfWork(IDBSession)
      nameWithType:
        CSharp: UnitOfWork.UnitOfWork(IDBSession)
        VB: UnitOfWork.UnitOfWork(IDBSession)
      qualifiedName:
        CSharp: DAL.UOW.UnitOfWork.UnitOfWork(DAL.UOW.IDBSession)
        VB: DAL.UOW.UnitOfWork.UnitOfWork(DAL.UOW.IDBSession)
      type: Constructor
      assemblies:
      - DAL
      namespace: DAL.UOW
      source:
        remote:
          path: DAL/UOW/UnitOfWork.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: .ctor
        path: ../DAL/UOW/UnitOfWork.cs
        startLine: 12
      syntax:
        content:
          CSharp: public UnitOfWork(IDBSession dBSession)
          VB: Public Sub New(dBSession As IDBSession)
        parameters:
        - id: dBSession
          type: DAL.UOW.IDBSession
      overload: DAL.UOW.UnitOfWork.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DAL.UOW.UnitOfWork.BeginTransaction
      commentId: M:DAL.UOW.UnitOfWork.BeginTransaction
      language: CSharp
      name:
        CSharp: BeginTransaction()
        VB: BeginTransaction()
      nameWithType:
        CSharp: UnitOfWork.BeginTransaction()
        VB: UnitOfWork.BeginTransaction()
      qualifiedName:
        CSharp: DAL.UOW.UnitOfWork.BeginTransaction()
        VB: DAL.UOW.UnitOfWork.BeginTransaction()
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW
      source:
        remote:
          path: DAL/UOW/UnitOfWork.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: BeginTransaction
        path: ../DAL/UOW/UnitOfWork.cs
        startLine: 17
      syntax:
        content:
          CSharp: public void BeginTransaction()
          VB: Public Sub BeginTransaction
      overload: DAL.UOW.UnitOfWork.BeginTransaction*
      implements:
      - DAL.UOW.IUnitOfWork.BeginTransaction
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DAL.UOW.UnitOfWork.Commit
      commentId: M:DAL.UOW.UnitOfWork.Commit
      language: CSharp
      name:
        CSharp: Commit()
        VB: Commit()
      nameWithType:
        CSharp: UnitOfWork.Commit()
        VB: UnitOfWork.Commit()
      qualifiedName:
        CSharp: DAL.UOW.UnitOfWork.Commit()
        VB: DAL.UOW.UnitOfWork.Commit()
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW
      source:
        remote:
          path: DAL/UOW/UnitOfWork.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Commit
        path: ../DAL/UOW/UnitOfWork.cs
        startLine: 21
      syntax:
        content:
          CSharp: public void Commit()
          VB: Public Sub Commit
      overload: DAL.UOW.UnitOfWork.Commit*
      implements:
      - DAL.UOW.IUnitOfWork.Commit
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DAL.UOW.UnitOfWork.RollBack
      commentId: M:DAL.UOW.UnitOfWork.RollBack
      language: CSharp
      name:
        CSharp: RollBack()
        VB: RollBack()
      nameWithType:
        CSharp: UnitOfWork.RollBack()
        VB: UnitOfWork.RollBack()
      qualifiedName:
        CSharp: DAL.UOW.UnitOfWork.RollBack()
        VB: DAL.UOW.UnitOfWork.RollBack()
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW
      source:
        remote:
          path: DAL/UOW/UnitOfWork.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: RollBack
        path: ../DAL/UOW/UnitOfWork.cs
        startLine: 30
      syntax:
        content:
          CSharp: public void RollBack()
          VB: Public Sub RollBack
      overload: DAL.UOW.UnitOfWork.RollBack*
      implements:
      - DAL.UOW.IUnitOfWork.RollBack
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DAL.UOW.UnitOfWork.Dispose
      commentId: M:DAL.UOW.UnitOfWork.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: UnitOfWork.Dispose()
        VB: UnitOfWork.Dispose()
      qualifiedName:
        CSharp: DAL.UOW.UnitOfWork.Dispose()
        VB: DAL.UOW.UnitOfWork.Dispose()
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW
      source:
        remote:
          path: DAL/UOW/UnitOfWork.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Dispose
        path: ../DAL/UOW/UnitOfWork.cs
        startLine: 38
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: DAL.UOW.UnitOfWork.Dispose*
      implements:
      - System.IDisposable.Dispose
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DAL.UOW.UnitOfWork.Users
      commentId: P:DAL.UOW.UnitOfWork.Users
      language: CSharp
      name:
        CSharp: Users
        VB: Users
      nameWithType:
        CSharp: UnitOfWork.Users
        VB: UnitOfWork.Users
      qualifiedName:
        CSharp: DAL.UOW.UnitOfWork.Users
        VB: DAL.UOW.UnitOfWork.Users
      type: Property
      assemblies:
      - DAL
      namespace: DAL.UOW
      source:
        remote:
          path: DAL/UOW/UnitOfWork.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Users
        path: ../DAL/UOW/UnitOfWork.cs
        startLine: 45
      syntax:
        content:
          CSharp: public IUserRepository Users { get; }
          VB: Public ReadOnly Property Users As IUserRepository
        parameters: []
        return:
          type: DAL.UOW.Repositories.IUserRepository
      overload: DAL.UOW.UnitOfWork.Users*
      implements:
      - DAL.UOW.IUnitOfWork.Users
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DAL.UOW.UnitOfWork.Replies
      commentId: P:DAL.UOW.UnitOfWork.Replies
      language: CSharp
      name:
        CSharp: Replies
        VB: Replies
      nameWithType:
        CSharp: UnitOfWork.Replies
        VB: UnitOfWork.Replies
      qualifiedName:
        CSharp: DAL.UOW.UnitOfWork.Replies
        VB: DAL.UOW.UnitOfWork.Replies
      type: Property
      assemblies:
      - DAL
      namespace: DAL.UOW
      source:
        remote:
          path: DAL/UOW/UnitOfWork.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Replies
        path: ../DAL/UOW/UnitOfWork.cs
        startLine: 46
      syntax:
        content:
          CSharp: public IReplyRepository Replies { get; }
          VB: Public ReadOnly Property Replies As IReplyRepository
        parameters: []
        return:
          type: DAL.UOW.Repositories.IReplyRepository
      overload: DAL.UOW.UnitOfWork.Replies*
      implements:
      - DAL.UOW.IUnitOfWork.Replies
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DAL.UOW.UnitOfWork.Topics
      commentId: P:DAL.UOW.UnitOfWork.Topics
      language: CSharp
      name:
        CSharp: Topics
        VB: Topics
      nameWithType:
        CSharp: UnitOfWork.Topics
        VB: UnitOfWork.Topics
      qualifiedName:
        CSharp: DAL.UOW.UnitOfWork.Topics
        VB: DAL.UOW.UnitOfWork.Topics
      type: Property
      assemblies:
      - DAL
      namespace: DAL.UOW
      source:
        remote:
          path: DAL/UOW/UnitOfWork.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Topics
        path: ../DAL/UOW/UnitOfWork.cs
        startLine: 47
      syntax:
        content:
          CSharp: public ITopicRepository Topics { get; }
          VB: Public ReadOnly Property Topics As ITopicRepository
        parameters: []
        return:
          type: DAL.UOW.Repositories.ITopicRepository
      overload: DAL.UOW.UnitOfWork.Topics*
      implements:
      - DAL.UOW.IUnitOfWork.Topics
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DAL.UOW.UnitOfWork.Rubrics
      commentId: P:DAL.UOW.UnitOfWork.Rubrics
      language: CSharp
      name:
        CSharp: Rubrics
        VB: Rubrics
      nameWithType:
        CSharp: UnitOfWork.Rubrics
        VB: UnitOfWork.Rubrics
      qualifiedName:
        CSharp: DAL.UOW.UnitOfWork.Rubrics
        VB: DAL.UOW.UnitOfWork.Rubrics
      type: Property
      assemblies:
      - DAL
      namespace: DAL.UOW
      source:
        remote:
          path: DAL/UOW/UnitOfWork.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: Rubrics
        path: ../DAL/UOW/UnitOfWork.cs
        startLine: 48
      syntax:
        content:
          CSharp: public IRubricRepository Rubrics { get; }
          VB: Public ReadOnly Property Rubrics As IRubricRepository
        parameters: []
        return:
          type: DAL.UOW.Repositories.IRubricRepository
      overload: DAL.UOW.UnitOfWork.Rubrics*
      implements:
      - DAL.UOW.IUnitOfWork.Rubrics
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
- id: DAL.UOW.Repositories
  commentId: N:DAL.UOW.Repositories
  language: CSharp
  name:
    CSharp: DAL.UOW.Repositories
    VB: DAL.UOW.Repositories
  nameWithType:
    CSharp: DAL.UOW.Repositories
    VB: DAL.UOW.Repositories
  qualifiedName:
    CSharp: DAL.UOW.Repositories
    VB: DAL.UOW.Repositories
  type: Namespace
  assemblies:
  - DAL
  modifiers: {}
  items:
  - id: DAL.UOW.Repositories.IGenericRepository`1
    commentId: T:DAL.UOW.Repositories.IGenericRepository`1
    language: CSharp
    name:
      CSharp: IGenericRepository<T>
      VB: IGenericRepository(Of T)
    nameWithType:
      CSharp: IGenericRepository<T>
      VB: IGenericRepository(Of T)
    qualifiedName:
      CSharp: DAL.UOW.Repositories.IGenericRepository<T>
      VB: DAL.UOW.Repositories.IGenericRepository(Of T)
    type: Interface
    assemblies:
    - DAL
    namespace: DAL.UOW.Repositories
    source:
      remote:
        path: DAL/UOW/Repositories/IGenericRepository.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: IGenericRepository
      path: ../DAL/UOW/Repositories/IGenericRepository.cs
      startLine: 9
    syntax:
      content:
        CSharp: >-
          public interface IGenericRepository<T>

              where T : Entity
        VB: Public Interface IGenericRepository(Of T As Entity)
      typeParameters:
      - id: T
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: DAL.UOW.Repositories.IGenericRepository`1.CreateAsync(`0)
      commentId: M:DAL.UOW.Repositories.IGenericRepository`1.CreateAsync(`0)
      language: CSharp
      name:
        CSharp: CreateAsync(T)
        VB: CreateAsync(T)
      nameWithType:
        CSharp: IGenericRepository<T>.CreateAsync(T)
        VB: IGenericRepository(Of T).CreateAsync(T)
      qualifiedName:
        CSharp: DAL.UOW.Repositories.IGenericRepository<T>.CreateAsync(T)
        VB: DAL.UOW.Repositories.IGenericRepository(Of T).CreateAsync(T)
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/IGenericRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: CreateAsync
        path: ../DAL/UOW/Repositories/IGenericRepository.cs
        startLine: 12
      syntax:
        content:
          CSharp: Task<T> CreateAsync(T entity)
          VB: Function CreateAsync(entity As T) As Task(Of T)
        parameters:
        - id: entity
          type: '{T}'
        return:
          type: System.Threading.Tasks.Task{{T}}
      overload: DAL.UOW.Repositories.IGenericRepository`1.CreateAsync*
      modifiers:
        CSharp: []
        VB: []
    - id: DAL.UOW.Repositories.IGenericRepository`1.DeleteAsync(System.Int32)
      commentId: M:DAL.UOW.Repositories.IGenericRepository`1.DeleteAsync(System.Int32)
      language: CSharp
      name:
        CSharp: DeleteAsync(Int32)
        VB: DeleteAsync(Int32)
      nameWithType:
        CSharp: IGenericRepository<T>.DeleteAsync(Int32)
        VB: IGenericRepository(Of T).DeleteAsync(Int32)
      qualifiedName:
        CSharp: DAL.UOW.Repositories.IGenericRepository<T>.DeleteAsync(System.Int32)
        VB: DAL.UOW.Repositories.IGenericRepository(Of T).DeleteAsync(System.Int32)
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/IGenericRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: DeleteAsync
        path: ../DAL/UOW/Repositories/IGenericRepository.cs
        startLine: 13
      syntax:
        content:
          CSharp: Task<bool> DeleteAsync(int id)
          VB: Function DeleteAsync(id As Integer) As Task(Of Boolean)
        parameters:
        - id: id
          type: System.Int32
        return:
          type: System.Threading.Tasks.Task{System.Boolean}
      overload: DAL.UOW.Repositories.IGenericRepository`1.DeleteAsync*
      modifiers:
        CSharp: []
        VB: []
    - id: DAL.UOW.Repositories.IGenericRepository`1.GetAllAsync
      commentId: M:DAL.UOW.Repositories.IGenericRepository`1.GetAllAsync
      language: CSharp
      name:
        CSharp: GetAllAsync()
        VB: GetAllAsync()
      nameWithType:
        CSharp: IGenericRepository<T>.GetAllAsync()
        VB: IGenericRepository(Of T).GetAllAsync()
      qualifiedName:
        CSharp: DAL.UOW.Repositories.IGenericRepository<T>.GetAllAsync()
        VB: DAL.UOW.Repositories.IGenericRepository(Of T).GetAllAsync()
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/IGenericRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: GetAllAsync
        path: ../DAL/UOW/Repositories/IGenericRepository.cs
        startLine: 14
      syntax:
        content:
          CSharp: Task<IEnumerable<T>> GetAllAsync()
          VB: Function GetAllAsync As Task(Of IEnumerable(Of T))
        return:
          type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{{T}}}
      overload: DAL.UOW.Repositories.IGenericRepository`1.GetAllAsync*
      modifiers:
        CSharp: []
        VB: []
    - id: DAL.UOW.Repositories.IGenericRepository`1.GetByIdAsync(System.Int32)
      commentId: M:DAL.UOW.Repositories.IGenericRepository`1.GetByIdAsync(System.Int32)
      language: CSharp
      name:
        CSharp: GetByIdAsync(Int32)
        VB: GetByIdAsync(Int32)
      nameWithType:
        CSharp: IGenericRepository<T>.GetByIdAsync(Int32)
        VB: IGenericRepository(Of T).GetByIdAsync(Int32)
      qualifiedName:
        CSharp: DAL.UOW.Repositories.IGenericRepository<T>.GetByIdAsync(System.Int32)
        VB: DAL.UOW.Repositories.IGenericRepository(Of T).GetByIdAsync(System.Int32)
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/IGenericRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: GetByIdAsync
        path: ../DAL/UOW/Repositories/IGenericRepository.cs
        startLine: 15
      syntax:
        content:
          CSharp: Task<T> GetByIdAsync(int id)
          VB: Function GetByIdAsync(id As Integer) As Task(Of T)
        parameters:
        - id: id
          type: System.Int32
        return:
          type: System.Threading.Tasks.Task{{T}}
      overload: DAL.UOW.Repositories.IGenericRepository`1.GetByIdAsync*
      modifiers:
        CSharp: []
        VB: []
    - id: DAL.UOW.Repositories.IGenericRepository`1.UpdateAsync(`0)
      commentId: M:DAL.UOW.Repositories.IGenericRepository`1.UpdateAsync(`0)
      language: CSharp
      name:
        CSharp: UpdateAsync(T)
        VB: UpdateAsync(T)
      nameWithType:
        CSharp: IGenericRepository<T>.UpdateAsync(T)
        VB: IGenericRepository(Of T).UpdateAsync(T)
      qualifiedName:
        CSharp: DAL.UOW.Repositories.IGenericRepository<T>.UpdateAsync(T)
        VB: DAL.UOW.Repositories.IGenericRepository(Of T).UpdateAsync(T)
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/IGenericRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: UpdateAsync
        path: ../DAL/UOW/Repositories/IGenericRepository.cs
        startLine: 16
      syntax:
        content:
          CSharp: Task<T> UpdateAsync(T entity)
          VB: Function UpdateAsync(entity As T) As Task(Of T)
        parameters:
        - id: entity
          type: '{T}'
        return:
          type: System.Threading.Tasks.Task{{T}}
      overload: DAL.UOW.Repositories.IGenericRepository`1.UpdateAsync*
      modifiers:
        CSharp: []
        VB: []
  - id: DAL.UOW.Repositories.IReplyRepository
    commentId: T:DAL.UOW.Repositories.IReplyRepository
    language: CSharp
    name:
      CSharp: IReplyRepository
      VB: IReplyRepository
    nameWithType:
      CSharp: IReplyRepository
      VB: IReplyRepository
    qualifiedName:
      CSharp: DAL.UOW.Repositories.IReplyRepository
      VB: DAL.UOW.Repositories.IReplyRepository
    type: Interface
    assemblies:
    - DAL
    namespace: DAL.UOW.Repositories
    source:
      remote:
        path: DAL/UOW/Repositories/IReplyRepository.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: IReplyRepository
      path: ../DAL/UOW/Repositories/IReplyRepository.cs
      startLine: 6
    syntax:
      content:
        CSharp: 'public interface IReplyRepository : IGenericRepository<Reply>'
        VB: >-
          Public Interface IReplyRepository

              Inherits IGenericRepository(Of Reply)
    inheritedMembers:
    - DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Reply}.CreateAsync(Domain.Entites.Reply)
    - DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Reply}.DeleteAsync(System.Int32)
    - DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Reply}.GetAllAsync
    - DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Reply}.GetByIdAsync(System.Int32)
    - DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Reply}.UpdateAsync(Domain.Entites.Reply)
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: DAL.UOW.Repositories.IReplyRepository.GetAllByTopicIdAsync(System.Int32)
      commentId: M:DAL.UOW.Repositories.IReplyRepository.GetAllByTopicIdAsync(System.Int32)
      language: CSharp
      name:
        CSharp: GetAllByTopicIdAsync(Int32)
        VB: GetAllByTopicIdAsync(Int32)
      nameWithType:
        CSharp: IReplyRepository.GetAllByTopicIdAsync(Int32)
        VB: IReplyRepository.GetAllByTopicIdAsync(Int32)
      qualifiedName:
        CSharp: DAL.UOW.Repositories.IReplyRepository.GetAllByTopicIdAsync(System.Int32)
        VB: DAL.UOW.Repositories.IReplyRepository.GetAllByTopicIdAsync(System.Int32)
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/IReplyRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: GetAllByTopicIdAsync
        path: ../DAL/UOW/Repositories/IReplyRepository.cs
        startLine: 8
      syntax:
        content:
          CSharp: Task<IEnumerable<Reply>> GetAllByTopicIdAsync(int replyId)
          VB: Function GetAllByTopicIdAsync(replyId As Integer) As Task(Of IEnumerable(Of Reply))
        parameters:
        - id: replyId
          type: System.Int32
        return:
          type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Domain.Entites.Reply}}
      overload: DAL.UOW.Repositories.IReplyRepository.GetAllByTopicIdAsync*
      modifiers:
        CSharp: []
        VB: []
  - id: DAL.UOW.Repositories.IRubricRepository
    commentId: T:DAL.UOW.Repositories.IRubricRepository
    language: CSharp
    name:
      CSharp: IRubricRepository
      VB: IRubricRepository
    nameWithType:
      CSharp: IRubricRepository
      VB: IRubricRepository
    qualifiedName:
      CSharp: DAL.UOW.Repositories.IRubricRepository
      VB: DAL.UOW.Repositories.IRubricRepository
    type: Interface
    assemblies:
    - DAL
    namespace: DAL.UOW.Repositories
    source:
      remote:
        path: DAL/UOW/Repositories/IRubricRepository.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: IRubricRepository
      path: ../DAL/UOW/Repositories/IRubricRepository.cs
      startLine: 6
    syntax:
      content:
        CSharp: 'public interface IRubricRepository : IGenericRepository<Rubric>'
        VB: >-
          Public Interface IRubricRepository

              Inherits IGenericRepository(Of Rubric)
    inheritedMembers:
    - DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Rubric}.CreateAsync(Domain.Entites.Rubric)
    - DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Rubric}.DeleteAsync(System.Int32)
    - DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Rubric}.GetAllAsync
    - DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Rubric}.GetByIdAsync(System.Int32)
    - DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Rubric}.UpdateAsync(Domain.Entites.Rubric)
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: DAL.UOW.Repositories.IRubricRepository.DetailByIdAsync(System.Int32)
      commentId: M:DAL.UOW.Repositories.IRubricRepository.DetailByIdAsync(System.Int32)
      language: CSharp
      name:
        CSharp: DetailByIdAsync(Int32)
        VB: DetailByIdAsync(Int32)
      nameWithType:
        CSharp: IRubricRepository.DetailByIdAsync(Int32)
        VB: IRubricRepository.DetailByIdAsync(Int32)
      qualifiedName:
        CSharp: DAL.UOW.Repositories.IRubricRepository.DetailByIdAsync(System.Int32)
        VB: DAL.UOW.Repositories.IRubricRepository.DetailByIdAsync(System.Int32)
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/IRubricRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: DetailByIdAsync
        path: ../DAL/UOW/Repositories/IRubricRepository.cs
        startLine: 10
      syntax:
        content:
          CSharp: Task<IEnumerable<RubricDetail>> DetailByIdAsync(int id)
          VB: Function DetailByIdAsync(id As Integer) As Task(Of IEnumerable(Of RubricDetail))
        parameters:
        - id: id
          type: System.Int32
        return:
          type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Domain.Entites.RubricDetail}}
      overload: DAL.UOW.Repositories.IRubricRepository.DetailByIdAsync*
      modifiers:
        CSharp: []
        VB: []
    - id: DAL.UOW.Repositories.IRubricRepository.DetailAsync
      commentId: M:DAL.UOW.Repositories.IRubricRepository.DetailAsync
      language: CSharp
      name:
        CSharp: DetailAsync()
        VB: DetailAsync()
      nameWithType:
        CSharp: IRubricRepository.DetailAsync()
        VB: IRubricRepository.DetailAsync()
      qualifiedName:
        CSharp: DAL.UOW.Repositories.IRubricRepository.DetailAsync()
        VB: DAL.UOW.Repositories.IRubricRepository.DetailAsync()
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/IRubricRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: DetailAsync
        path: ../DAL/UOW/Repositories/IRubricRepository.cs
        startLine: 11
      syntax:
        content:
          CSharp: Task<IEnumerable<RubricDetail>> DetailAsync()
          VB: Function DetailAsync As Task(Of IEnumerable(Of RubricDetail))
        return:
          type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Domain.Entites.RubricDetail}}
      overload: DAL.UOW.Repositories.IRubricRepository.DetailAsync*
      modifiers:
        CSharp: []
        VB: []
  - id: DAL.UOW.Repositories.ITopicRepository
    commentId: T:DAL.UOW.Repositories.ITopicRepository
    language: CSharp
    name:
      CSharp: ITopicRepository
      VB: ITopicRepository
    nameWithType:
      CSharp: ITopicRepository
      VB: ITopicRepository
    qualifiedName:
      CSharp: DAL.UOW.Repositories.ITopicRepository
      VB: DAL.UOW.Repositories.ITopicRepository
    type: Interface
    assemblies:
    - DAL
    namespace: DAL.UOW.Repositories
    source:
      remote:
        path: DAL/UOW/Repositories/ITopicRepository.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: ITopicRepository
      path: ../DAL/UOW/Repositories/ITopicRepository.cs
      startLine: 6
    syntax:
      content:
        CSharp: 'public interface ITopicRepository : IGenericRepository<Topic>'
        VB: >-
          Public Interface ITopicRepository

              Inherits IGenericRepository(Of Topic)
    inheritedMembers:
    - DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Topic}.CreateAsync(Domain.Entites.Topic)
    - DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Topic}.DeleteAsync(System.Int32)
    - DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Topic}.GetAllAsync
    - DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Topic}.GetByIdAsync(System.Int32)
    - DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Topic}.UpdateAsync(Domain.Entites.Topic)
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: DAL.UOW.Repositories.ITopicRepository.GetAllByRubricIdAsync(System.Int32)
      commentId: M:DAL.UOW.Repositories.ITopicRepository.GetAllByRubricIdAsync(System.Int32)
      language: CSharp
      name:
        CSharp: GetAllByRubricIdAsync(Int32)
        VB: GetAllByRubricIdAsync(Int32)
      nameWithType:
        CSharp: ITopicRepository.GetAllByRubricIdAsync(Int32)
        VB: ITopicRepository.GetAllByRubricIdAsync(Int32)
      qualifiedName:
        CSharp: DAL.UOW.Repositories.ITopicRepository.GetAllByRubricIdAsync(System.Int32)
        VB: DAL.UOW.Repositories.ITopicRepository.GetAllByRubricIdAsync(System.Int32)
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/ITopicRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: GetAllByRubricIdAsync
        path: ../DAL/UOW/Repositories/ITopicRepository.cs
        startLine: 9
      syntax:
        content:
          CSharp: Task<IEnumerable<Topic>> GetAllByRubricIdAsync(int rubricId)
          VB: Function GetAllByRubricIdAsync(rubricId As Integer) As Task(Of IEnumerable(Of Topic))
        parameters:
        - id: rubricId
          type: System.Int32
        return:
          type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Domain.Entites.Topic}}
      overload: DAL.UOW.Repositories.ITopicRepository.GetAllByRubricIdAsync*
      modifiers:
        CSharp: []
        VB: []
    - id: DAL.UOW.Repositories.ITopicRepository.DetailByIdAsync(System.Int32)
      commentId: M:DAL.UOW.Repositories.ITopicRepository.DetailByIdAsync(System.Int32)
      language: CSharp
      name:
        CSharp: DetailByIdAsync(Int32)
        VB: DetailByIdAsync(Int32)
      nameWithType:
        CSharp: ITopicRepository.DetailByIdAsync(Int32)
        VB: ITopicRepository.DetailByIdAsync(Int32)
      qualifiedName:
        CSharp: DAL.UOW.Repositories.ITopicRepository.DetailByIdAsync(System.Int32)
        VB: DAL.UOW.Repositories.ITopicRepository.DetailByIdAsync(System.Int32)
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/ITopicRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: DetailByIdAsync
        path: ../DAL/UOW/Repositories/ITopicRepository.cs
        startLine: 14
      syntax:
        content:
          CSharp: Task<IEnumerable<TopicDetail>> DetailByIdAsync(int id)
          VB: Function DetailByIdAsync(id As Integer) As Task(Of IEnumerable(Of TopicDetail))
        parameters:
        - id: id
          type: System.Int32
        return:
          type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Domain.Entites.TopicDetail}}
      overload: DAL.UOW.Repositories.ITopicRepository.DetailByIdAsync*
      modifiers:
        CSharp: []
        VB: []
    - id: DAL.UOW.Repositories.ITopicRepository.DetailAsync
      commentId: M:DAL.UOW.Repositories.ITopicRepository.DetailAsync
      language: CSharp
      name:
        CSharp: DetailAsync()
        VB: DetailAsync()
      nameWithType:
        CSharp: ITopicRepository.DetailAsync()
        VB: ITopicRepository.DetailAsync()
      qualifiedName:
        CSharp: DAL.UOW.Repositories.ITopicRepository.DetailAsync()
        VB: DAL.UOW.Repositories.ITopicRepository.DetailAsync()
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/ITopicRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: DetailAsync
        path: ../DAL/UOW/Repositories/ITopicRepository.cs
        startLine: 15
      syntax:
        content:
          CSharp: Task<IEnumerable<TopicDetail>> DetailAsync()
          VB: Function DetailAsync As Task(Of IEnumerable(Of TopicDetail))
        return:
          type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Domain.Entites.TopicDetail}}
      overload: DAL.UOW.Repositories.ITopicRepository.DetailAsync*
      modifiers:
        CSharp: []
        VB: []
  - id: DAL.UOW.Repositories.IUserRepository
    commentId: T:DAL.UOW.Repositories.IUserRepository
    language: CSharp
    name:
      CSharp: IUserRepository
      VB: IUserRepository
    nameWithType:
      CSharp: IUserRepository
      VB: IUserRepository
    qualifiedName:
      CSharp: DAL.UOW.Repositories.IUserRepository
      VB: DAL.UOW.Repositories.IUserRepository
    type: Interface
    assemblies:
    - DAL
    namespace: DAL.UOW.Repositories
    source:
      remote:
        path: DAL/UOW/Repositories/IUserRepository.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: IUserRepository
      path: ../DAL/UOW/Repositories/IUserRepository.cs
      startLine: 6
    syntax:
      content:
        CSharp: 'public interface IUserRepository : IGenericRepository<_User>'
        VB: >-
          Public Interface IUserRepository

              Inherits IGenericRepository(Of _User)
    inheritedMembers:
    - DAL.UOW.Repositories.IGenericRepository{Domain.Entites._User}.CreateAsync(Domain.Entites._User)
    - DAL.UOW.Repositories.IGenericRepository{Domain.Entites._User}.DeleteAsync(System.Int32)
    - DAL.UOW.Repositories.IGenericRepository{Domain.Entites._User}.GetAllAsync
    - DAL.UOW.Repositories.IGenericRepository{Domain.Entites._User}.GetByIdAsync(System.Int32)
    - DAL.UOW.Repositories.IGenericRepository{Domain.Entites._User}.UpdateAsync(Domain.Entites._User)
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: DAL.UOW.Repositories.IUserRepository.GetUserBylogin_NameAsync(System.String)
      commentId: M:DAL.UOW.Repositories.IUserRepository.GetUserBylogin_NameAsync(System.String)
      language: CSharp
      name:
        CSharp: GetUserBylogin_NameAsync(String)
        VB: GetUserBylogin_NameAsync(String)
      nameWithType:
        CSharp: IUserRepository.GetUserBylogin_NameAsync(String)
        VB: IUserRepository.GetUserBylogin_NameAsync(String)
      qualifiedName:
        CSharp: DAL.UOW.Repositories.IUserRepository.GetUserBylogin_NameAsync(System.String)
        VB: DAL.UOW.Repositories.IUserRepository.GetUserBylogin_NameAsync(System.String)
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/IUserRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: GetUserBylogin_NameAsync
        path: ../DAL/UOW/Repositories/IUserRepository.cs
        startLine: 13
      syntax:
        content:
          CSharp: Task<_User> GetUserBylogin_NameAsync(string loginname)
          VB: Function GetUserBylogin_NameAsync(loginname As String) As Task(Of _User)
        parameters:
        - id: loginname
          type: System.String
        return:
          type: System.Threading.Tasks.Task{Domain.Entites._User}
      overload: DAL.UOW.Repositories.IUserRepository.GetUserBylogin_NameAsync*
      modifiers:
        CSharp: []
        VB: []
  - id: DAL.UOW.Repositories.ReplyRepository
    commentId: T:DAL.UOW.Repositories.ReplyRepository
    language: CSharp
    name:
      CSharp: ReplyRepository
      VB: ReplyRepository
    nameWithType:
      CSharp: ReplyRepository
      VB: ReplyRepository
    qualifiedName:
      CSharp: DAL.UOW.Repositories.ReplyRepository
      VB: DAL.UOW.Repositories.ReplyRepository
    type: Class
    assemblies:
    - DAL
    namespace: DAL.UOW.Repositories
    source:
      remote:
        path: DAL/UOW/Repositories/ReplyRepository.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: ReplyRepository
      path: ../DAL/UOW/Repositories/ReplyRepository.cs
      startLine: 11
    syntax:
      content:
        CSharp: 'class ReplyRepository : IReplyRepository, IGenericRepository<Reply>'
        VB: >-
          Class ReplyRepository

              Implements IReplyRepository, IGenericRepository(Of Reply)
    inheritance:
    - System.Object
    implements:
    - DAL.UOW.Repositories.IReplyRepository
    - DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Reply}
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - class
      VB:
      - Class
    items:
    - id: DAL.UOW.Repositories.ReplyRepository._db
      commentId: F:DAL.UOW.Repositories.ReplyRepository._db
      language: CSharp
      name:
        CSharp: _db
        VB: _db
      nameWithType:
        CSharp: ReplyRepository._db
        VB: ReplyRepository._db
      qualifiedName:
        CSharp: DAL.UOW.Repositories.ReplyRepository._db
        VB: DAL.UOW.Repositories.ReplyRepository._db
      type: Field
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/ReplyRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: _db
        path: ../DAL/UOW/Repositories/ReplyRepository.cs
        startLine: 13
      syntax:
        content:
          CSharp: readonly IDBSession _db
          VB: ReadOnly _db As IDBSession
        return:
          type: DAL.UOW.IDBSession
      modifiers:
        CSharp:
        - readonly
        VB:
        - ReadOnly
    - id: DAL.UOW.Repositories.ReplyRepository.#ctor(DAL.UOW.IDBSession)
      commentId: M:DAL.UOW.Repositories.ReplyRepository.#ctor(DAL.UOW.IDBSession)
      language: CSharp
      name:
        CSharp: ReplyRepository(IDBSession)
        VB: ReplyRepository(IDBSession)
      nameWithType:
        CSharp: ReplyRepository.ReplyRepository(IDBSession)
        VB: ReplyRepository.ReplyRepository(IDBSession)
      qualifiedName:
        CSharp: DAL.UOW.Repositories.ReplyRepository.ReplyRepository(DAL.UOW.IDBSession)
        VB: DAL.UOW.Repositories.ReplyRepository.ReplyRepository(DAL.UOW.IDBSession)
      type: Constructor
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/ReplyRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: .ctor
        path: ../DAL/UOW/Repositories/ReplyRepository.cs
        startLine: 14
      syntax:
        content:
          CSharp: public ReplyRepository(IDBSession db)
          VB: Public Sub New(db As IDBSession)
        parameters:
        - id: db
          type: DAL.UOW.IDBSession
      overload: DAL.UOW.Repositories.ReplyRepository.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DAL.UOW.Repositories.ReplyRepository.GetAllAsync
      commentId: M:DAL.UOW.Repositories.ReplyRepository.GetAllAsync
      language: CSharp
      name:
        CSharp: GetAllAsync()
        VB: GetAllAsync()
      nameWithType:
        CSharp: ReplyRepository.GetAllAsync()
        VB: ReplyRepository.GetAllAsync()
      qualifiedName:
        CSharp: DAL.UOW.Repositories.ReplyRepository.GetAllAsync()
        VB: DAL.UOW.Repositories.ReplyRepository.GetAllAsync()
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/ReplyRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: GetAllAsync
        path: ../DAL/UOW/Repositories/ReplyRepository.cs
        startLine: 20
      syntax:
        content:
          CSharp: public async Task<IEnumerable<Reply>> GetAllAsync()
          VB: Public Function GetAllAsync As Task(Of IEnumerable(Of Reply))
        return:
          type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Domain.Entites.Reply}}
      overload: DAL.UOW.Repositories.ReplyRepository.GetAllAsync*
      implements:
      - DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Reply}.GetAllAsync
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
    - id: DAL.UOW.Repositories.ReplyRepository.GetAllByTopicIdAsync(System.Int32)
      commentId: M:DAL.UOW.Repositories.ReplyRepository.GetAllByTopicIdAsync(System.Int32)
      language: CSharp
      name:
        CSharp: GetAllByTopicIdAsync(Int32)
        VB: GetAllByTopicIdAsync(Int32)
      nameWithType:
        CSharp: ReplyRepository.GetAllByTopicIdAsync(Int32)
        VB: ReplyRepository.GetAllByTopicIdAsync(Int32)
      qualifiedName:
        CSharp: DAL.UOW.Repositories.ReplyRepository.GetAllByTopicIdAsync(System.Int32)
        VB: DAL.UOW.Repositories.ReplyRepository.GetAllByTopicIdAsync(System.Int32)
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/ReplyRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: GetAllByTopicIdAsync
        path: ../DAL/UOW/Repositories/ReplyRepository.cs
        startLine: 28
      example: []
      syntax:
        content:
          CSharp: public async Task<IEnumerable<Reply>> GetAllByTopicIdAsync(int topicId)
          VB: Public Function GetAllByTopicIdAsync(topicId As Integer) As Task(Of IEnumerable(Of Reply))
        parameters:
        - id: topicId
          type: System.Int32
        return:
          type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Domain.Entites.Reply}}
      overload: DAL.UOW.Repositories.ReplyRepository.GetAllByTopicIdAsync*
      implements:
      - DAL.UOW.Repositories.IReplyRepository.GetAllByTopicIdAsync(System.Int32)
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
    - id: DAL.UOW.Repositories.ReplyRepository.GetByIdAsync(System.Int32)
      commentId: M:DAL.UOW.Repositories.ReplyRepository.GetByIdAsync(System.Int32)
      language: CSharp
      name:
        CSharp: GetByIdAsync(Int32)
        VB: GetByIdAsync(Int32)
      nameWithType:
        CSharp: ReplyRepository.GetByIdAsync(Int32)
        VB: ReplyRepository.GetByIdAsync(Int32)
      qualifiedName:
        CSharp: DAL.UOW.Repositories.ReplyRepository.GetByIdAsync(System.Int32)
        VB: DAL.UOW.Repositories.ReplyRepository.GetByIdAsync(System.Int32)
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/ReplyRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: GetByIdAsync
        path: ../DAL/UOW/Repositories/ReplyRepository.cs
        startLine: 43
      syntax:
        content:
          CSharp: public async Task<Reply> GetByIdAsync(int id)
          VB: Public Function GetByIdAsync(id As Integer) As Task(Of Reply)
        parameters:
        - id: id
          type: System.Int32
        return:
          type: System.Threading.Tasks.Task{Domain.Entites.Reply}
      overload: DAL.UOW.Repositories.ReplyRepository.GetByIdAsync*
      implements:
      - DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Reply}.GetByIdAsync(System.Int32)
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
    - id: DAL.UOW.Repositories.ReplyRepository.CreateAsync(Domain.Entites.Reply)
      commentId: M:DAL.UOW.Repositories.ReplyRepository.CreateAsync(Domain.Entites.Reply)
      language: CSharp
      name:
        CSharp: CreateAsync(Reply)
        VB: CreateAsync(Reply)
      nameWithType:
        CSharp: ReplyRepository.CreateAsync(Reply)
        VB: ReplyRepository.CreateAsync(Reply)
      qualifiedName:
        CSharp: DAL.UOW.Repositories.ReplyRepository.CreateAsync(Domain.Entites.Reply)
        VB: DAL.UOW.Repositories.ReplyRepository.CreateAsync(Domain.Entites.Reply)
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/ReplyRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: CreateAsync
        path: ../DAL/UOW/Repositories/ReplyRepository.cs
        startLine: 51
      syntax:
        content:
          CSharp: public async Task<Reply> CreateAsync(Reply reply)
          VB: Public Function CreateAsync(reply As Reply) As Task(Of Reply)
        parameters:
        - id: reply
          type: Domain.Entites.Reply
        return:
          type: System.Threading.Tasks.Task{Domain.Entites.Reply}
      overload: DAL.UOW.Repositories.ReplyRepository.CreateAsync*
      implements:
      - DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Reply}.CreateAsync(Domain.Entites.Reply)
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
    - id: DAL.UOW.Repositories.ReplyRepository.UpdateAsync(Domain.Entites.Reply)
      commentId: M:DAL.UOW.Repositories.ReplyRepository.UpdateAsync(Domain.Entites.Reply)
      language: CSharp
      name:
        CSharp: UpdateAsync(Reply)
        VB: UpdateAsync(Reply)
      nameWithType:
        CSharp: ReplyRepository.UpdateAsync(Reply)
        VB: ReplyRepository.UpdateAsync(Reply)
      qualifiedName:
        CSharp: DAL.UOW.Repositories.ReplyRepository.UpdateAsync(Domain.Entites.Reply)
        VB: DAL.UOW.Repositories.ReplyRepository.UpdateAsync(Domain.Entites.Reply)
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/ReplyRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: UpdateAsync
        path: ../DAL/UOW/Repositories/ReplyRepository.cs
        startLine: 74
      syntax:
        content:
          CSharp: public async Task<Reply> UpdateAsync(Reply reply)
          VB: Public Function UpdateAsync(reply As Reply) As Task(Of Reply)
        parameters:
        - id: reply
          type: Domain.Entites.Reply
        return:
          type: System.Threading.Tasks.Task{Domain.Entites.Reply}
      overload: DAL.UOW.Repositories.ReplyRepository.UpdateAsync*
      implements:
      - DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Reply}.UpdateAsync(Domain.Entites.Reply)
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
    - id: DAL.UOW.Repositories.ReplyRepository.DeleteAsync(System.Int32)
      commentId: M:DAL.UOW.Repositories.ReplyRepository.DeleteAsync(System.Int32)
      language: CSharp
      name:
        CSharp: DeleteAsync(Int32)
        VB: DeleteAsync(Int32)
      nameWithType:
        CSharp: ReplyRepository.DeleteAsync(Int32)
        VB: ReplyRepository.DeleteAsync(Int32)
      qualifiedName:
        CSharp: DAL.UOW.Repositories.ReplyRepository.DeleteAsync(System.Int32)
        VB: DAL.UOW.Repositories.ReplyRepository.DeleteAsync(System.Int32)
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/ReplyRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: DeleteAsync
        path: ../DAL/UOW/Repositories/ReplyRepository.cs
        startLine: 94
      syntax:
        content:
          CSharp: public async Task<bool> DeleteAsync(int id)
          VB: Public Function DeleteAsync(id As Integer) As Task(Of Boolean)
        parameters:
        - id: id
          type: System.Int32
        return:
          type: System.Threading.Tasks.Task{System.Boolean}
      overload: DAL.UOW.Repositories.ReplyRepository.DeleteAsync*
      implements:
      - DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Reply}.DeleteAsync(System.Int32)
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
  - id: DAL.UOW.Repositories.RubricRepository
    commentId: T:DAL.UOW.Repositories.RubricRepository
    language: CSharp
    name:
      CSharp: RubricRepository
      VB: RubricRepository
    nameWithType:
      CSharp: RubricRepository
      VB: RubricRepository
    qualifiedName:
      CSharp: DAL.UOW.Repositories.RubricRepository
      VB: DAL.UOW.Repositories.RubricRepository
    type: Class
    assemblies:
    - DAL
    namespace: DAL.UOW.Repositories
    source:
      remote:
        path: DAL/UOW/Repositories/RubricRepository.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: RubricRepository
      path: ../DAL/UOW/Repositories/RubricRepository.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'class RubricRepository : IRubricRepository, IGenericRepository<Rubric>'
        VB: >-
          Class RubricRepository

              Implements IRubricRepository, IGenericRepository(Of Rubric)
    inheritance:
    - System.Object
    implements:
    - DAL.UOW.Repositories.IRubricRepository
    - DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Rubric}
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - class
      VB:
      - Class
    items:
    - id: DAL.UOW.Repositories.RubricRepository._db
      commentId: F:DAL.UOW.Repositories.RubricRepository._db
      language: CSharp
      name:
        CSharp: _db
        VB: _db
      nameWithType:
        CSharp: RubricRepository._db
        VB: RubricRepository._db
      qualifiedName:
        CSharp: DAL.UOW.Repositories.RubricRepository._db
        VB: DAL.UOW.Repositories.RubricRepository._db
      type: Field
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/RubricRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: _db
        path: ../DAL/UOW/Repositories/RubricRepository.cs
        startLine: 14
      syntax:
        content:
          CSharp: readonly IDBSession _db
          VB: ReadOnly _db As IDBSession
        return:
          type: DAL.UOW.IDBSession
      modifiers:
        CSharp:
        - readonly
        VB:
        - ReadOnly
    - id: DAL.UOW.Repositories.RubricRepository.#ctor(DAL.UOW.IDBSession)
      commentId: M:DAL.UOW.Repositories.RubricRepository.#ctor(DAL.UOW.IDBSession)
      language: CSharp
      name:
        CSharp: RubricRepository(IDBSession)
        VB: RubricRepository(IDBSession)
      nameWithType:
        CSharp: RubricRepository.RubricRepository(IDBSession)
        VB: RubricRepository.RubricRepository(IDBSession)
      qualifiedName:
        CSharp: DAL.UOW.Repositories.RubricRepository.RubricRepository(DAL.UOW.IDBSession)
        VB: DAL.UOW.Repositories.RubricRepository.RubricRepository(DAL.UOW.IDBSession)
      type: Constructor
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/RubricRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: .ctor
        path: ../DAL/UOW/Repositories/RubricRepository.cs
        startLine: 15
      syntax:
        content:
          CSharp: public RubricRepository(IDBSession db)
          VB: Public Sub New(db As IDBSession)
        parameters:
        - id: db
          type: DAL.UOW.IDBSession
      overload: DAL.UOW.Repositories.RubricRepository.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DAL.UOW.Repositories.RubricRepository.GetAllAsync
      commentId: M:DAL.UOW.Repositories.RubricRepository.GetAllAsync
      language: CSharp
      name:
        CSharp: GetAllAsync()
        VB: GetAllAsync()
      nameWithType:
        CSharp: RubricRepository.GetAllAsync()
        VB: RubricRepository.GetAllAsync()
      qualifiedName:
        CSharp: DAL.UOW.Repositories.RubricRepository.GetAllAsync()
        VB: DAL.UOW.Repositories.RubricRepository.GetAllAsync()
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/RubricRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: GetAllAsync
        path: ../DAL/UOW/Repositories/RubricRepository.cs
        startLine: 20
      syntax:
        content:
          CSharp: public async Task<IEnumerable<Rubric>> GetAllAsync()
          VB: Public Function GetAllAsync As Task(Of IEnumerable(Of Rubric))
        return:
          type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Domain.Entites.Rubric}}
      overload: DAL.UOW.Repositories.RubricRepository.GetAllAsync*
      implements:
      - DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Rubric}.GetAllAsync
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
    - id: DAL.UOW.Repositories.RubricRepository.GetByIdAsync(System.Int32)
      commentId: M:DAL.UOW.Repositories.RubricRepository.GetByIdAsync(System.Int32)
      language: CSharp
      name:
        CSharp: GetByIdAsync(Int32)
        VB: GetByIdAsync(Int32)
      nameWithType:
        CSharp: RubricRepository.GetByIdAsync(Int32)
        VB: RubricRepository.GetByIdAsync(Int32)
      qualifiedName:
        CSharp: DAL.UOW.Repositories.RubricRepository.GetByIdAsync(System.Int32)
        VB: DAL.UOW.Repositories.RubricRepository.GetByIdAsync(System.Int32)
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/RubricRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: GetByIdAsync
        path: ../DAL/UOW/Repositories/RubricRepository.cs
        startLine: 27
      syntax:
        content:
          CSharp: public async Task<Rubric> GetByIdAsync(int id)
          VB: Public Function GetByIdAsync(id As Integer) As Task(Of Rubric)
        parameters:
        - id: id
          type: System.Int32
        return:
          type: System.Threading.Tasks.Task{Domain.Entites.Rubric}
      overload: DAL.UOW.Repositories.RubricRepository.GetByIdAsync*
      implements:
      - DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Rubric}.GetByIdAsync(System.Int32)
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
    - id: DAL.UOW.Repositories.RubricRepository.CreateAsync(Domain.Entites.Rubric)
      commentId: M:DAL.UOW.Repositories.RubricRepository.CreateAsync(Domain.Entites.Rubric)
      language: CSharp
      name:
        CSharp: CreateAsync(Rubric)
        VB: CreateAsync(Rubric)
      nameWithType:
        CSharp: RubricRepository.CreateAsync(Rubric)
        VB: RubricRepository.CreateAsync(Rubric)
      qualifiedName:
        CSharp: DAL.UOW.Repositories.RubricRepository.CreateAsync(Domain.Entites.Rubric)
        VB: DAL.UOW.Repositories.RubricRepository.CreateAsync(Domain.Entites.Rubric)
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/RubricRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: CreateAsync
        path: ../DAL/UOW/Repositories/RubricRepository.cs
        startLine: 35
      syntax:
        content:
          CSharp: public async Task<Rubric> CreateAsync(Rubric rubric)
          VB: Public Function CreateAsync(rubric As Rubric) As Task(Of Rubric)
        parameters:
        - id: rubric
          type: Domain.Entites.Rubric
        return:
          type: System.Threading.Tasks.Task{Domain.Entites.Rubric}
      overload: DAL.UOW.Repositories.RubricRepository.CreateAsync*
      implements:
      - DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Rubric}.CreateAsync(Domain.Entites.Rubric)
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
    - id: DAL.UOW.Repositories.RubricRepository.UpdateAsync(Domain.Entites.Rubric)
      commentId: M:DAL.UOW.Repositories.RubricRepository.UpdateAsync(Domain.Entites.Rubric)
      language: CSharp
      name:
        CSharp: UpdateAsync(Rubric)
        VB: UpdateAsync(Rubric)
      nameWithType:
        CSharp: RubricRepository.UpdateAsync(Rubric)
        VB: RubricRepository.UpdateAsync(Rubric)
      qualifiedName:
        CSharp: DAL.UOW.Repositories.RubricRepository.UpdateAsync(Domain.Entites.Rubric)
        VB: DAL.UOW.Repositories.RubricRepository.UpdateAsync(Domain.Entites.Rubric)
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/RubricRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: UpdateAsync
        path: ../DAL/UOW/Repositories/RubricRepository.cs
        startLine: 50
      syntax:
        content:
          CSharp: public async Task<Rubric> UpdateAsync(Rubric rubric)
          VB: Public Function UpdateAsync(rubric As Rubric) As Task(Of Rubric)
        parameters:
        - id: rubric
          type: Domain.Entites.Rubric
        return:
          type: System.Threading.Tasks.Task{Domain.Entites.Rubric}
      overload: DAL.UOW.Repositories.RubricRepository.UpdateAsync*
      implements:
      - DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Rubric}.UpdateAsync(Domain.Entites.Rubric)
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
    - id: DAL.UOW.Repositories.RubricRepository.DeleteAsync(System.Int32)
      commentId: M:DAL.UOW.Repositories.RubricRepository.DeleteAsync(System.Int32)
      language: CSharp
      name:
        CSharp: DeleteAsync(Int32)
        VB: DeleteAsync(Int32)
      nameWithType:
        CSharp: RubricRepository.DeleteAsync(Int32)
        VB: RubricRepository.DeleteAsync(Int32)
      qualifiedName:
        CSharp: DAL.UOW.Repositories.RubricRepository.DeleteAsync(System.Int32)
        VB: DAL.UOW.Repositories.RubricRepository.DeleteAsync(System.Int32)
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/RubricRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: DeleteAsync
        path: ../DAL/UOW/Repositories/RubricRepository.cs
        startLine: 70
      syntax:
        content:
          CSharp: public async Task<bool> DeleteAsync(int id)
          VB: Public Function DeleteAsync(id As Integer) As Task(Of Boolean)
        parameters:
        - id: id
          type: System.Int32
        return:
          type: System.Threading.Tasks.Task{System.Boolean}
      overload: DAL.UOW.Repositories.RubricRepository.DeleteAsync*
      implements:
      - DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Rubric}.DeleteAsync(System.Int32)
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
    - id: DAL.UOW.Repositories.RubricRepository.DetailAsync
      commentId: M:DAL.UOW.Repositories.RubricRepository.DetailAsync
      language: CSharp
      name:
        CSharp: DetailAsync()
        VB: DetailAsync()
      nameWithType:
        CSharp: RubricRepository.DetailAsync()
        VB: RubricRepository.DetailAsync()
      qualifiedName:
        CSharp: DAL.UOW.Repositories.RubricRepository.DetailAsync()
        VB: DAL.UOW.Repositories.RubricRepository.DetailAsync()
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/RubricRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: DetailAsync
        path: ../DAL/UOW/Repositories/RubricRepository.cs
        startLine: 82
      syntax:
        content:
          CSharp: public async Task<IEnumerable<RubricDetail>> DetailAsync()
          VB: Public Function DetailAsync As Task(Of IEnumerable(Of RubricDetail))
        return:
          type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Domain.Entites.RubricDetail}}
      overload: DAL.UOW.Repositories.RubricRepository.DetailAsync*
      implements:
      - DAL.UOW.Repositories.IRubricRepository.DetailAsync
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
    - id: DAL.UOW.Repositories.RubricRepository.DetailByIdAsync(System.Int32)
      commentId: M:DAL.UOW.Repositories.RubricRepository.DetailByIdAsync(System.Int32)
      language: CSharp
      name:
        CSharp: DetailByIdAsync(Int32)
        VB: DetailByIdAsync(Int32)
      nameWithType:
        CSharp: RubricRepository.DetailByIdAsync(Int32)
        VB: RubricRepository.DetailByIdAsync(Int32)
      qualifiedName:
        CSharp: DAL.UOW.Repositories.RubricRepository.DetailByIdAsync(System.Int32)
        VB: DAL.UOW.Repositories.RubricRepository.DetailByIdAsync(System.Int32)
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/RubricRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: DetailByIdAsync
        path: ../DAL/UOW/Repositories/RubricRepository.cs
        startLine: 143
      syntax:
        content:
          CSharp: public async Task<IEnumerable<RubricDetail>> DetailByIdAsync(int id)
          VB: Public Function DetailByIdAsync(id As Integer) As Task(Of IEnumerable(Of RubricDetail))
        parameters:
        - id: id
          type: System.Int32
        return:
          type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Domain.Entites.RubricDetail}}
      overload: DAL.UOW.Repositories.RubricRepository.DetailByIdAsync*
      implements:
      - DAL.UOW.Repositories.IRubricRepository.DetailByIdAsync(System.Int32)
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
  - id: DAL.UOW.Repositories.TopicRepository
    commentId: T:DAL.UOW.Repositories.TopicRepository
    language: CSharp
    name:
      CSharp: TopicRepository
      VB: TopicRepository
    nameWithType:
      CSharp: TopicRepository
      VB: TopicRepository
    qualifiedName:
      CSharp: DAL.UOW.Repositories.TopicRepository
      VB: DAL.UOW.Repositories.TopicRepository
    type: Class
    assemblies:
    - DAL
    namespace: DAL.UOW.Repositories
    source:
      remote:
        path: DAL/UOW/Repositories/TopicRepository.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: TopicRepository
      path: ../DAL/UOW/Repositories/TopicRepository.cs
      startLine: 11
    syntax:
      content:
        CSharp: 'class TopicRepository : ITopicRepository, IGenericRepository<Topic>'
        VB: >-
          Class TopicRepository

              Implements ITopicRepository, IGenericRepository(Of Topic)
    inheritance:
    - System.Object
    implements:
    - DAL.UOW.Repositories.ITopicRepository
    - DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Topic}
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - class
      VB:
      - Class
    items:
    - id: DAL.UOW.Repositories.TopicRepository._db
      commentId: F:DAL.UOW.Repositories.TopicRepository._db
      language: CSharp
      name:
        CSharp: _db
        VB: _db
      nameWithType:
        CSharp: TopicRepository._db
        VB: TopicRepository._db
      qualifiedName:
        CSharp: DAL.UOW.Repositories.TopicRepository._db
        VB: DAL.UOW.Repositories.TopicRepository._db
      type: Field
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/TopicRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: _db
        path: ../DAL/UOW/Repositories/TopicRepository.cs
        startLine: 13
      syntax:
        content:
          CSharp: readonly IDBSession _db
          VB: ReadOnly _db As IDBSession
        return:
          type: DAL.UOW.IDBSession
      modifiers:
        CSharp:
        - readonly
        VB:
        - ReadOnly
    - id: DAL.UOW.Repositories.TopicRepository.#ctor(DAL.UOW.IDBSession)
      commentId: M:DAL.UOW.Repositories.TopicRepository.#ctor(DAL.UOW.IDBSession)
      language: CSharp
      name:
        CSharp: TopicRepository(IDBSession)
        VB: TopicRepository(IDBSession)
      nameWithType:
        CSharp: TopicRepository.TopicRepository(IDBSession)
        VB: TopicRepository.TopicRepository(IDBSession)
      qualifiedName:
        CSharp: DAL.UOW.Repositories.TopicRepository.TopicRepository(DAL.UOW.IDBSession)
        VB: DAL.UOW.Repositories.TopicRepository.TopicRepository(DAL.UOW.IDBSession)
      type: Constructor
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/TopicRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: .ctor
        path: ../DAL/UOW/Repositories/TopicRepository.cs
        startLine: 14
      syntax:
        content:
          CSharp: public TopicRepository(IDBSession db)
          VB: Public Sub New(db As IDBSession)
        parameters:
        - id: db
          type: DAL.UOW.IDBSession
      overload: DAL.UOW.Repositories.TopicRepository.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DAL.UOW.Repositories.TopicRepository.GetAllAsync
      commentId: M:DAL.UOW.Repositories.TopicRepository.GetAllAsync
      language: CSharp
      name:
        CSharp: GetAllAsync()
        VB: GetAllAsync()
      nameWithType:
        CSharp: TopicRepository.GetAllAsync()
        VB: TopicRepository.GetAllAsync()
      qualifiedName:
        CSharp: DAL.UOW.Repositories.TopicRepository.GetAllAsync()
        VB: DAL.UOW.Repositories.TopicRepository.GetAllAsync()
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/TopicRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: GetAllAsync
        path: ../DAL/UOW/Repositories/TopicRepository.cs
        startLine: 19
      syntax:
        content:
          CSharp: public async Task<IEnumerable<Topic>> GetAllAsync()
          VB: Public Function GetAllAsync As Task(Of IEnumerable(Of Topic))
        return:
          type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Domain.Entites.Topic}}
      overload: DAL.UOW.Repositories.TopicRepository.GetAllAsync*
      implements:
      - DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Topic}.GetAllAsync
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
    - id: DAL.UOW.Repositories.TopicRepository.GetAllByRubricIdAsync(System.Int32)
      commentId: M:DAL.UOW.Repositories.TopicRepository.GetAllByRubricIdAsync(System.Int32)
      language: CSharp
      name:
        CSharp: GetAllByRubricIdAsync(Int32)
        VB: GetAllByRubricIdAsync(Int32)
      nameWithType:
        CSharp: TopicRepository.GetAllByRubricIdAsync(Int32)
        VB: TopicRepository.GetAllByRubricIdAsync(Int32)
      qualifiedName:
        CSharp: DAL.UOW.Repositories.TopicRepository.GetAllByRubricIdAsync(System.Int32)
        VB: DAL.UOW.Repositories.TopicRepository.GetAllByRubricIdAsync(System.Int32)
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/TopicRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: GetAllByRubricIdAsync
        path: ../DAL/UOW/Repositories/TopicRepository.cs
        startLine: 27
      example: []
      syntax:
        content:
          CSharp: public async Task<IEnumerable<Topic>> GetAllByRubricIdAsync(int rubricId)
          VB: Public Function GetAllByRubricIdAsync(rubricId As Integer) As Task(Of IEnumerable(Of Topic))
        parameters:
        - id: rubricId
          type: System.Int32
        return:
          type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Domain.Entites.Topic}}
      overload: DAL.UOW.Repositories.TopicRepository.GetAllByRubricIdAsync*
      implements:
      - DAL.UOW.Repositories.ITopicRepository.GetAllByRubricIdAsync(System.Int32)
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
    - id: DAL.UOW.Repositories.TopicRepository.GetByIdAsync(System.Int32)
      commentId: M:DAL.UOW.Repositories.TopicRepository.GetByIdAsync(System.Int32)
      language: CSharp
      name:
        CSharp: GetByIdAsync(Int32)
        VB: GetByIdAsync(Int32)
      nameWithType:
        CSharp: TopicRepository.GetByIdAsync(Int32)
        VB: TopicRepository.GetByIdAsync(Int32)
      qualifiedName:
        CSharp: DAL.UOW.Repositories.TopicRepository.GetByIdAsync(System.Int32)
        VB: DAL.UOW.Repositories.TopicRepository.GetByIdAsync(System.Int32)
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/TopicRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: GetByIdAsync
        path: ../DAL/UOW/Repositories/TopicRepository.cs
        startLine: 34
      syntax:
        content:
          CSharp: public async Task<Topic> GetByIdAsync(int id)
          VB: Public Function GetByIdAsync(id As Integer) As Task(Of Topic)
        parameters:
        - id: id
          type: System.Int32
        return:
          type: System.Threading.Tasks.Task{Domain.Entites.Topic}
      overload: DAL.UOW.Repositories.TopicRepository.GetByIdAsync*
      implements:
      - DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Topic}.GetByIdAsync(System.Int32)
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
    - id: DAL.UOW.Repositories.TopicRepository.CreateAsync(Domain.Entites.Topic)
      commentId: M:DAL.UOW.Repositories.TopicRepository.CreateAsync(Domain.Entites.Topic)
      language: CSharp
      name:
        CSharp: CreateAsync(Topic)
        VB: CreateAsync(Topic)
      nameWithType:
        CSharp: TopicRepository.CreateAsync(Topic)
        VB: TopicRepository.CreateAsync(Topic)
      qualifiedName:
        CSharp: DAL.UOW.Repositories.TopicRepository.CreateAsync(Domain.Entites.Topic)
        VB: DAL.UOW.Repositories.TopicRepository.CreateAsync(Domain.Entites.Topic)
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/TopicRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: CreateAsync
        path: ../DAL/UOW/Repositories/TopicRepository.cs
        startLine: 41
      syntax:
        content:
          CSharp: public async Task<Topic> CreateAsync(Topic topic)
          VB: Public Function CreateAsync(topic As Topic) As Task(Of Topic)
        parameters:
        - id: topic
          type: Domain.Entites.Topic
        return:
          type: System.Threading.Tasks.Task{Domain.Entites.Topic}
      overload: DAL.UOW.Repositories.TopicRepository.CreateAsync*
      implements:
      - DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Topic}.CreateAsync(Domain.Entites.Topic)
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
    - id: DAL.UOW.Repositories.TopicRepository.UpdateAsync(Domain.Entites.Topic)
      commentId: M:DAL.UOW.Repositories.TopicRepository.UpdateAsync(Domain.Entites.Topic)
      language: CSharp
      name:
        CSharp: UpdateAsync(Topic)
        VB: UpdateAsync(Topic)
      nameWithType:
        CSharp: TopicRepository.UpdateAsync(Topic)
        VB: TopicRepository.UpdateAsync(Topic)
      qualifiedName:
        CSharp: DAL.UOW.Repositories.TopicRepository.UpdateAsync(Domain.Entites.Topic)
        VB: DAL.UOW.Repositories.TopicRepository.UpdateAsync(Domain.Entites.Topic)
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/TopicRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: UpdateAsync
        path: ../DAL/UOW/Repositories/TopicRepository.cs
        startLine: 68
      syntax:
        content:
          CSharp: public async Task<Topic> UpdateAsync(Topic topic)
          VB: Public Function UpdateAsync(topic As Topic) As Task(Of Topic)
        parameters:
        - id: topic
          type: Domain.Entites.Topic
        return:
          type: System.Threading.Tasks.Task{Domain.Entites.Topic}
      overload: DAL.UOW.Repositories.TopicRepository.UpdateAsync*
      implements:
      - DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Topic}.UpdateAsync(Domain.Entites.Topic)
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
    - id: DAL.UOW.Repositories.TopicRepository.DeleteAsync(System.Int32)
      commentId: M:DAL.UOW.Repositories.TopicRepository.DeleteAsync(System.Int32)
      language: CSharp
      name:
        CSharp: DeleteAsync(Int32)
        VB: DeleteAsync(Int32)
      nameWithType:
        CSharp: TopicRepository.DeleteAsync(Int32)
        VB: TopicRepository.DeleteAsync(Int32)
      qualifiedName:
        CSharp: DAL.UOW.Repositories.TopicRepository.DeleteAsync(System.Int32)
        VB: DAL.UOW.Repositories.TopicRepository.DeleteAsync(System.Int32)
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/TopicRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: DeleteAsync
        path: ../DAL/UOW/Repositories/TopicRepository.cs
        startLine: 97
      syntax:
        content:
          CSharp: public async Task<bool> DeleteAsync(int id)
          VB: Public Function DeleteAsync(id As Integer) As Task(Of Boolean)
        parameters:
        - id: id
          type: System.Int32
        return:
          type: System.Threading.Tasks.Task{System.Boolean}
      overload: DAL.UOW.Repositories.TopicRepository.DeleteAsync*
      implements:
      - DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Topic}.DeleteAsync(System.Int32)
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
    - id: DAL.UOW.Repositories.TopicRepository.DetailAsync
      commentId: M:DAL.UOW.Repositories.TopicRepository.DetailAsync
      language: CSharp
      name:
        CSharp: DetailAsync()
        VB: DetailAsync()
      nameWithType:
        CSharp: TopicRepository.DetailAsync()
        VB: TopicRepository.DetailAsync()
      qualifiedName:
        CSharp: DAL.UOW.Repositories.TopicRepository.DetailAsync()
        VB: DAL.UOW.Repositories.TopicRepository.DetailAsync()
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/TopicRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: DetailAsync
        path: ../DAL/UOW/Repositories/TopicRepository.cs
        startLine: 123
      syntax:
        content:
          CSharp: public async Task<IEnumerable<TopicDetail>> DetailAsync()
          VB: Public Function DetailAsync As Task(Of IEnumerable(Of TopicDetail))
        return:
          type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Domain.Entites.TopicDetail}}
      overload: DAL.UOW.Repositories.TopicRepository.DetailAsync*
      implements:
      - DAL.UOW.Repositories.ITopicRepository.DetailAsync
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
    - id: DAL.UOW.Repositories.TopicRepository.DetailByIdAsync(System.Int32)
      commentId: M:DAL.UOW.Repositories.TopicRepository.DetailByIdAsync(System.Int32)
      language: CSharp
      name:
        CSharp: DetailByIdAsync(Int32)
        VB: DetailByIdAsync(Int32)
      nameWithType:
        CSharp: TopicRepository.DetailByIdAsync(Int32)
        VB: TopicRepository.DetailByIdAsync(Int32)
      qualifiedName:
        CSharp: DAL.UOW.Repositories.TopicRepository.DetailByIdAsync(System.Int32)
        VB: DAL.UOW.Repositories.TopicRepository.DetailByIdAsync(System.Int32)
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/TopicRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: DetailByIdAsync
        path: ../DAL/UOW/Repositories/TopicRepository.cs
        startLine: 131
      syntax:
        content:
          CSharp: public async Task<IEnumerable<TopicDetail>> DetailByIdAsync(int id)
          VB: Public Function DetailByIdAsync(id As Integer) As Task(Of IEnumerable(Of TopicDetail))
        parameters:
        - id: id
          type: System.Int32
        return:
          type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Domain.Entites.TopicDetail}}
      overload: DAL.UOW.Repositories.TopicRepository.DetailByIdAsync*
      implements:
      - DAL.UOW.Repositories.ITopicRepository.DetailByIdAsync(System.Int32)
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
  - id: DAL.UOW.Repositories.UserRepository
    commentId: T:DAL.UOW.Repositories.UserRepository
    language: CSharp
    name:
      CSharp: UserRepository
      VB: UserRepository
    nameWithType:
      CSharp: UserRepository
      VB: UserRepository
    qualifiedName:
      CSharp: DAL.UOW.Repositories.UserRepository
      VB: DAL.UOW.Repositories.UserRepository
    type: Class
    assemblies:
    - DAL
    namespace: DAL.UOW.Repositories
    source:
      remote:
        path: DAL/UOW/Repositories/UserRepository.cs
        branch: main
        repo: https://github.com/Deep-KALYAN/Forum.git
      id: UserRepository
      path: ../DAL/UOW/Repositories/UserRepository.cs
      startLine: 11
    syntax:
      content:
        CSharp: 'class UserRepository : IUserRepository, IGenericRepository<_User>'
        VB: >-
          Class UserRepository

              Implements IUserRepository, IGenericRepository(Of _User)
    inheritance:
    - System.Object
    implements:
    - DAL.UOW.Repositories.IUserRepository
    - DAL.UOW.Repositories.IGenericRepository{Domain.Entites._User}
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - class
      VB:
      - Class
    items:
    - id: DAL.UOW.Repositories.UserRepository._db
      commentId: F:DAL.UOW.Repositories.UserRepository._db
      language: CSharp
      name:
        CSharp: _db
        VB: _db
      nameWithType:
        CSharp: UserRepository._db
        VB: UserRepository._db
      qualifiedName:
        CSharp: DAL.UOW.Repositories.UserRepository._db
        VB: DAL.UOW.Repositories.UserRepository._db
      type: Field
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/UserRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: _db
        path: ../DAL/UOW/Repositories/UserRepository.cs
        startLine: 13
      syntax:
        content:
          CSharp: readonly IDBSession _db
          VB: ReadOnly _db As IDBSession
        return:
          type: DAL.UOW.IDBSession
      modifiers:
        CSharp:
        - readonly
        VB:
        - ReadOnly
    - id: DAL.UOW.Repositories.UserRepository.#ctor(DAL.UOW.IDBSession)
      commentId: M:DAL.UOW.Repositories.UserRepository.#ctor(DAL.UOW.IDBSession)
      language: CSharp
      name:
        CSharp: UserRepository(IDBSession)
        VB: UserRepository(IDBSession)
      nameWithType:
        CSharp: UserRepository.UserRepository(IDBSession)
        VB: UserRepository.UserRepository(IDBSession)
      qualifiedName:
        CSharp: DAL.UOW.Repositories.UserRepository.UserRepository(DAL.UOW.IDBSession)
        VB: DAL.UOW.Repositories.UserRepository.UserRepository(DAL.UOW.IDBSession)
      type: Constructor
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/UserRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: .ctor
        path: ../DAL/UOW/Repositories/UserRepository.cs
        startLine: 14
      syntax:
        content:
          CSharp: public UserRepository(IDBSession db)
          VB: Public Sub New(db As IDBSession)
        parameters:
        - id: db
          type: DAL.UOW.IDBSession
      overload: DAL.UOW.Repositories.UserRepository.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DAL.UOW.Repositories.UserRepository.GetAllAsync
      commentId: M:DAL.UOW.Repositories.UserRepository.GetAllAsync
      language: CSharp
      name:
        CSharp: GetAllAsync()
        VB: GetAllAsync()
      nameWithType:
        CSharp: UserRepository.GetAllAsync()
        VB: UserRepository.GetAllAsync()
      qualifiedName:
        CSharp: DAL.UOW.Repositories.UserRepository.GetAllAsync()
        VB: DAL.UOW.Repositories.UserRepository.GetAllAsync()
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/UserRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: GetAllAsync
        path: ../DAL/UOW/Repositories/UserRepository.cs
        startLine: 19
      syntax:
        content:
          CSharp: public async Task<IEnumerable<_User>> GetAllAsync()
          VB: Public Function GetAllAsync As Task(Of IEnumerable(Of _User))
        return:
          type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Domain.Entites._User}}
      overload: DAL.UOW.Repositories.UserRepository.GetAllAsync*
      implements:
      - DAL.UOW.Repositories.IGenericRepository{Domain.Entites._User}.GetAllAsync
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
    - id: DAL.UOW.Repositories.UserRepository.GetByIdAsync(System.Int32)
      commentId: M:DAL.UOW.Repositories.UserRepository.GetByIdAsync(System.Int32)
      language: CSharp
      name:
        CSharp: GetByIdAsync(Int32)
        VB: GetByIdAsync(Int32)
      nameWithType:
        CSharp: UserRepository.GetByIdAsync(Int32)
        VB: UserRepository.GetByIdAsync(Int32)
      qualifiedName:
        CSharp: DAL.UOW.Repositories.UserRepository.GetByIdAsync(System.Int32)
        VB: DAL.UOW.Repositories.UserRepository.GetByIdAsync(System.Int32)
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/UserRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: GetByIdAsync
        path: ../DAL/UOW/Repositories/UserRepository.cs
        startLine: 36
      syntax:
        content:
          CSharp: public async Task<_User> GetByIdAsync(int id)
          VB: Public Function GetByIdAsync(id As Integer) As Task(Of _User)
        parameters:
        - id: id
          type: System.Int32
        return:
          type: System.Threading.Tasks.Task{Domain.Entites._User}
      overload: DAL.UOW.Repositories.UserRepository.GetByIdAsync*
      implements:
      - DAL.UOW.Repositories.IGenericRepository{Domain.Entites._User}.GetByIdAsync(System.Int32)
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
    - id: DAL.UOW.Repositories.UserRepository.GetUserBylogin_NameAsync(System.String)
      commentId: M:DAL.UOW.Repositories.UserRepository.GetUserBylogin_NameAsync(System.String)
      language: CSharp
      name:
        CSharp: GetUserBylogin_NameAsync(String)
        VB: GetUserBylogin_NameAsync(String)
      nameWithType:
        CSharp: UserRepository.GetUserBylogin_NameAsync(String)
        VB: UserRepository.GetUserBylogin_NameAsync(String)
      qualifiedName:
        CSharp: DAL.UOW.Repositories.UserRepository.GetUserBylogin_NameAsync(System.String)
        VB: DAL.UOW.Repositories.UserRepository.GetUserBylogin_NameAsync(System.String)
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/UserRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: GetUserBylogin_NameAsync
        path: ../DAL/UOW/Repositories/UserRepository.cs
        startLine: 57
      syntax:
        content:
          CSharp: public async Task<_User> GetUserBylogin_NameAsync(string loginname)
          VB: Public Function GetUserBylogin_NameAsync(loginname As String) As Task(Of _User)
        parameters:
        - id: loginname
          type: System.String
        return:
          type: System.Threading.Tasks.Task{Domain.Entites._User}
      overload: DAL.UOW.Repositories.UserRepository.GetUserBylogin_NameAsync*
      implements:
      - DAL.UOW.Repositories.IUserRepository.GetUserBylogin_NameAsync(System.String)
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
    - id: DAL.UOW.Repositories.UserRepository.CreateAsync(Domain.Entites._User)
      commentId: M:DAL.UOW.Repositories.UserRepository.CreateAsync(Domain.Entites._User)
      language: CSharp
      name:
        CSharp: CreateAsync(_User)
        VB: CreateAsync(_User)
      nameWithType:
        CSharp: UserRepository.CreateAsync(_User)
        VB: UserRepository.CreateAsync(_User)
      qualifiedName:
        CSharp: DAL.UOW.Repositories.UserRepository.CreateAsync(Domain.Entites._User)
        VB: DAL.UOW.Repositories.UserRepository.CreateAsync(Domain.Entites._User)
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/UserRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: CreateAsync
        path: ../DAL/UOW/Repositories/UserRepository.cs
        startLine: 75
      syntax:
        content:
          CSharp: public async Task<_User> CreateAsync(_User user)
          VB: Public Function CreateAsync(user As _User) As Task(Of _User)
        parameters:
        - id: user
          type: Domain.Entites._User
        return:
          type: System.Threading.Tasks.Task{Domain.Entites._User}
      overload: DAL.UOW.Repositories.UserRepository.CreateAsync*
      implements:
      - DAL.UOW.Repositories.IGenericRepository{Domain.Entites._User}.CreateAsync(Domain.Entites._User)
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
    - id: DAL.UOW.Repositories.UserRepository.UpdateAsync(Domain.Entites._User)
      commentId: M:DAL.UOW.Repositories.UserRepository.UpdateAsync(Domain.Entites._User)
      language: CSharp
      name:
        CSharp: UpdateAsync(_User)
        VB: UpdateAsync(_User)
      nameWithType:
        CSharp: UserRepository.UpdateAsync(_User)
        VB: UserRepository.UpdateAsync(_User)
      qualifiedName:
        CSharp: DAL.UOW.Repositories.UserRepository.UpdateAsync(Domain.Entites._User)
        VB: DAL.UOW.Repositories.UserRepository.UpdateAsync(Domain.Entites._User)
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/UserRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: UpdateAsync
        path: ../DAL/UOW/Repositories/UserRepository.cs
        startLine: 97
      syntax:
        content:
          CSharp: public async Task<_User> UpdateAsync(_User user)
          VB: Public Function UpdateAsync(user As _User) As Task(Of _User)
        parameters:
        - id: user
          type: Domain.Entites._User
        return:
          type: System.Threading.Tasks.Task{Domain.Entites._User}
      overload: DAL.UOW.Repositories.UserRepository.UpdateAsync*
      implements:
      - DAL.UOW.Repositories.IGenericRepository{Domain.Entites._User}.UpdateAsync(Domain.Entites._User)
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
    - id: DAL.UOW.Repositories.UserRepository.DeleteAsync(System.Int32)
      commentId: M:DAL.UOW.Repositories.UserRepository.DeleteAsync(System.Int32)
      language: CSharp
      name:
        CSharp: DeleteAsync(Int32)
        VB: DeleteAsync(Int32)
      nameWithType:
        CSharp: UserRepository.DeleteAsync(Int32)
        VB: UserRepository.DeleteAsync(Int32)
      qualifiedName:
        CSharp: DAL.UOW.Repositories.UserRepository.DeleteAsync(System.Int32)
        VB: DAL.UOW.Repositories.UserRepository.DeleteAsync(System.Int32)
      type: Method
      assemblies:
      - DAL
      namespace: DAL.UOW.Repositories
      source:
        remote:
          path: DAL/UOW/Repositories/UserRepository.cs
          branch: main
          repo: https://github.com/Deep-KALYAN/Forum.git
        id: DeleteAsync
        path: ../DAL/UOW/Repositories/UserRepository.cs
        startLine: 138
      syntax:
        content:
          CSharp: public async Task<bool> DeleteAsync(int id)
          VB: Public Function DeleteAsync(id As Integer) As Task(Of Boolean)
        parameters:
        - id: id
          type: System.Int32
        return:
          type: System.Threading.Tasks.Task{System.Boolean}
      overload: DAL.UOW.Repositories.UserRepository.DeleteAsync*
      implements:
      - DAL.UOW.Repositories.IGenericRepository{Domain.Entites._User}.DeleteAsync(System.Int32)
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
references:
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  Microsoft.Extensions.DependencyInjection:
    name:
      CSharp:
      - name: Microsoft.Extensions.DependencyInjection
        nameWithType: Microsoft.Extensions.DependencyInjection
        qualifiedName: Microsoft.Extensions.DependencyInjection
        isExternal: true
      VB:
      - name: Microsoft.Extensions.DependencyInjection
        nameWithType: Microsoft.Extensions.DependencyInjection
        qualifiedName: Microsoft.Extensions.DependencyInjection
    isDefinition: true
    commentId: N:Microsoft.Extensions.DependencyInjection
  Microsoft.Extensions.DependencyInjection.IServiceCollection:
    name:
      CSharp:
      - id: Microsoft.Extensions.DependencyInjection.IServiceCollection
        name: IServiceCollection
        nameWithType: IServiceCollection
        qualifiedName: Microsoft.Extensions.DependencyInjection.IServiceCollection
        isExternal: true
      VB:
      - id: Microsoft.Extensions.DependencyInjection.IServiceCollection
        name: IServiceCollection
        nameWithType: IServiceCollection
        qualifiedName: Microsoft.Extensions.DependencyInjection.IServiceCollection
        isExternal: true
    isDefinition: true
    parent: Microsoft.Extensions.DependencyInjection
    commentId: T:Microsoft.Extensions.DependencyInjection.IServiceCollection
  DAL.DALExtension.AddDALExtension*:
    name:
      CSharp:
      - id: DAL.DALExtension.AddDALExtension*
        name: AddDALExtension
        nameWithType: DALExtension.AddDALExtension
        qualifiedName: DAL.DALExtension.AddDALExtension
      VB:
      - id: DAL.DALExtension.AddDALExtension*
        name: AddDALExtension
        nameWithType: DALExtension.AddDALExtension
        qualifiedName: DAL.DALExtension.AddDALExtension
    isDefinition: true
    commentId: Overload:DAL.DALExtension.AddDALExtension
  DAL.DALExtension:
    name:
      CSharp:
      - id: DAL.DALExtension
        name: DALExtension
        nameWithType: DALExtension
        qualifiedName: DAL.DALExtension
      VB:
      - id: DAL.DALExtension
        name: DALExtension
        nameWithType: DALExtension
        qualifiedName: DAL.DALExtension
    isDefinition: true
    commentId: T:DAL.DALExtension
  DAL:
    name:
      CSharp:
      - name: DAL
        nameWithType: DAL
        qualifiedName: DAL
      VB:
      - name: DAL
        nameWithType: DAL
        qualifiedName: DAL
    isDefinition: true
    commentId: N:DAL
  System.IDisposable:
    name:
      CSharp:
      - id: System.IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: System.IDisposable
        isExternal: true
      VB:
      - id: System.IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: System.IDisposable
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.IDisposable
  DAL.UOW:
    name:
      CSharp:
      - name: DAL.UOW
        nameWithType: DAL.UOW
        qualifiedName: DAL.UOW
      VB:
      - name: DAL.UOW
        nameWithType: DAL.UOW
        qualifiedName: DAL.UOW
    isDefinition: true
    commentId: N:DAL.UOW
  DAL.UOW.IDBSession:
    name:
      CSharp:
      - id: DAL.UOW.IDBSession
        name: IDBSession
        nameWithType: IDBSession
        qualifiedName: DAL.UOW.IDBSession
      VB:
      - id: DAL.UOW.IDBSession
        name: IDBSession
        nameWithType: IDBSession
        qualifiedName: DAL.UOW.IDBSession
    isDefinition: true
    parent: DAL.UOW
    commentId: T:DAL.UOW.IDBSession
  System.Data:
    name:
      CSharp:
      - name: System.Data
        nameWithType: System.Data
        qualifiedName: System.Data
        isExternal: true
      VB:
      - name: System.Data
        nameWithType: System.Data
        qualifiedName: System.Data
    isDefinition: true
    commentId: N:System.Data
  System.Data.IDbConnection:
    name:
      CSharp:
      - id: System.Data.IDbConnection
        name: IDbConnection
        nameWithType: IDbConnection
        qualifiedName: System.Data.IDbConnection
        isExternal: true
      VB:
      - id: System.Data.IDbConnection
        name: IDbConnection
        nameWithType: IDbConnection
        qualifiedName: System.Data.IDbConnection
        isExternal: true
    isDefinition: true
    parent: System.Data
    commentId: T:System.Data.IDbConnection
  DAL.UOW.DBSession.Connection*:
    name:
      CSharp:
      - id: DAL.UOW.DBSession.Connection*
        name: Connection
        nameWithType: DBSession.Connection
        qualifiedName: DAL.UOW.DBSession.Connection
      VB:
      - id: DAL.UOW.DBSession.Connection*
        name: Connection
        nameWithType: DBSession.Connection
        qualifiedName: DAL.UOW.DBSession.Connection
    isDefinition: true
    commentId: Overload:DAL.UOW.DBSession.Connection
  DAL.UOW.IDBSession.Connection:
    name:
      CSharp:
      - id: DAL.UOW.IDBSession.Connection
        name: Connection
        nameWithType: IDBSession.Connection
        qualifiedName: DAL.UOW.IDBSession.Connection
      VB:
      - id: DAL.UOW.IDBSession.Connection
        name: Connection
        nameWithType: IDBSession.Connection
        qualifiedName: DAL.UOW.IDBSession.Connection
    isDefinition: true
    parent: DAL.UOW.IDBSession
    commentId: P:DAL.UOW.IDBSession.Connection
  System.Data.IDbTransaction:
    name:
      CSharp:
      - id: System.Data.IDbTransaction
        name: IDbTransaction
        nameWithType: IDbTransaction
        qualifiedName: System.Data.IDbTransaction
        isExternal: true
      VB:
      - id: System.Data.IDbTransaction
        name: IDbTransaction
        nameWithType: IDbTransaction
        qualifiedName: System.Data.IDbTransaction
        isExternal: true
    isDefinition: true
    parent: System.Data
    commentId: T:System.Data.IDbTransaction
  DAL.UOW.DBSession.Transaction*:
    name:
      CSharp:
      - id: DAL.UOW.DBSession.Transaction*
        name: Transaction
        nameWithType: DBSession.Transaction
        qualifiedName: DAL.UOW.DBSession.Transaction
      VB:
      - id: DAL.UOW.DBSession.Transaction*
        name: Transaction
        nameWithType: DBSession.Transaction
        qualifiedName: DAL.UOW.DBSession.Transaction
    isDefinition: true
    commentId: Overload:DAL.UOW.DBSession.Transaction
  DAL.UOW.IDBSession.Transaction:
    name:
      CSharp:
      - id: DAL.UOW.IDBSession.Transaction
        name: Transaction
        nameWithType: IDBSession.Transaction
        qualifiedName: DAL.UOW.IDBSession.Transaction
      VB:
      - id: DAL.UOW.IDBSession.Transaction
        name: Transaction
        nameWithType: IDBSession.Transaction
        qualifiedName: DAL.UOW.IDBSession.Transaction
    isDefinition: true
    parent: DAL.UOW.IDBSession
    commentId: P:DAL.UOW.IDBSession.Transaction
  Microsoft.Extensions.Configuration:
    name:
      CSharp:
      - name: Microsoft.Extensions.Configuration
        nameWithType: Microsoft.Extensions.Configuration
        qualifiedName: Microsoft.Extensions.Configuration
        isExternal: true
      VB:
      - name: Microsoft.Extensions.Configuration
        nameWithType: Microsoft.Extensions.Configuration
        qualifiedName: Microsoft.Extensions.Configuration
    isDefinition: true
    commentId: N:Microsoft.Extensions.Configuration
  Microsoft.Extensions.Configuration.IConfiguration:
    name:
      CSharp:
      - id: Microsoft.Extensions.Configuration.IConfiguration
        name: IConfiguration
        nameWithType: IConfiguration
        qualifiedName: Microsoft.Extensions.Configuration.IConfiguration
        isExternal: true
      VB:
      - id: Microsoft.Extensions.Configuration.IConfiguration
        name: IConfiguration
        nameWithType: IConfiguration
        qualifiedName: Microsoft.Extensions.Configuration.IConfiguration
        isExternal: true
    isDefinition: true
    parent: Microsoft.Extensions.Configuration
    commentId: T:Microsoft.Extensions.Configuration.IConfiguration
  DAL.UOW.DBSession.#ctor*:
    name:
      CSharp:
      - id: DAL.UOW.DBSession.#ctor*
        name: DBSession
        nameWithType: DBSession.DBSession
        qualifiedName: DAL.UOW.DBSession.DBSession
      VB:
      - id: DAL.UOW.DBSession.#ctor*
        name: DBSession
        nameWithType: DBSession.DBSession
        qualifiedName: DAL.UOW.DBSession.DBSession
    isDefinition: true
    commentId: Overload:DAL.UOW.DBSession.#ctor
  DAL.UOW.DBSession.Dispose*:
    name:
      CSharp:
      - id: DAL.UOW.DBSession.Dispose*
        name: Dispose
        nameWithType: DBSession.Dispose
        qualifiedName: DAL.UOW.DBSession.Dispose
      VB:
      - id: DAL.UOW.DBSession.Dispose*
        name: Dispose
        nameWithType: DBSession.Dispose
        qualifiedName: DAL.UOW.DBSession.Dispose
    isDefinition: true
    commentId: Overload:DAL.UOW.DBSession.Dispose
  System.IDisposable.Dispose:
    name:
      CSharp:
      - id: System.IDisposable.Dispose
        name: Dispose
        nameWithType: IDisposable.Dispose
        qualifiedName: System.IDisposable.Dispose
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.IDisposable.Dispose
        name: Dispose
        nameWithType: IDisposable.Dispose
        qualifiedName: System.IDisposable.Dispose
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.IDisposable
    commentId: M:System.IDisposable.Dispose
  DAL.UOW.DBSession:
    name:
      CSharp:
      - id: DAL.UOW.DBSession
        name: DBSession
        nameWithType: DBSession
        qualifiedName: DAL.UOW.DBSession
      VB:
      - id: DAL.UOW.DBSession
        name: DBSession
        nameWithType: DBSession
        qualifiedName: DAL.UOW.DBSession
    isDefinition: true
    commentId: T:DAL.UOW.DBSession
  DAL.UOW.IDBSession.Connection*:
    name:
      CSharp:
      - id: DAL.UOW.IDBSession.Connection*
        name: Connection
        nameWithType: IDBSession.Connection
        qualifiedName: DAL.UOW.IDBSession.Connection
      VB:
      - id: DAL.UOW.IDBSession.Connection*
        name: Connection
        nameWithType: IDBSession.Connection
        qualifiedName: DAL.UOW.IDBSession.Connection
    isDefinition: true
    commentId: Overload:DAL.UOW.IDBSession.Connection
  DAL.UOW.IDBSession.Transaction*:
    name:
      CSharp:
      - id: DAL.UOW.IDBSession.Transaction*
        name: Transaction
        nameWithType: IDBSession.Transaction
        qualifiedName: DAL.UOW.IDBSession.Transaction
      VB:
      - id: DAL.UOW.IDBSession.Transaction*
        name: Transaction
        nameWithType: IDBSession.Transaction
        qualifiedName: DAL.UOW.IDBSession.Transaction
    isDefinition: true
    commentId: Overload:DAL.UOW.IDBSession.Transaction
  DAL.UOW.Repositories:
    name:
      CSharp:
      - name: DAL.UOW.Repositories
        nameWithType: DAL.UOW.Repositories
        qualifiedName: DAL.UOW.Repositories
      VB:
      - name: DAL.UOW.Repositories
        nameWithType: DAL.UOW.Repositories
        qualifiedName: DAL.UOW.Repositories
    isDefinition: true
    commentId: N:DAL.UOW.Repositories
  DAL.UOW.Repositories.IReplyRepository:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IReplyRepository
        name: IReplyRepository
        nameWithType: IReplyRepository
        qualifiedName: DAL.UOW.Repositories.IReplyRepository
      VB:
      - id: DAL.UOW.Repositories.IReplyRepository
        name: IReplyRepository
        nameWithType: IReplyRepository
        qualifiedName: DAL.UOW.Repositories.IReplyRepository
    isDefinition: true
    parent: DAL.UOW.Repositories
    commentId: T:DAL.UOW.Repositories.IReplyRepository
  DAL.UOW.IUnitOfWork.Replies*:
    name:
      CSharp:
      - id: DAL.UOW.IUnitOfWork.Replies*
        name: Replies
        nameWithType: IUnitOfWork.Replies
        qualifiedName: DAL.UOW.IUnitOfWork.Replies
      VB:
      - id: DAL.UOW.IUnitOfWork.Replies*
        name: Replies
        nameWithType: IUnitOfWork.Replies
        qualifiedName: DAL.UOW.IUnitOfWork.Replies
    isDefinition: true
    commentId: Overload:DAL.UOW.IUnitOfWork.Replies
  DAL.UOW.Repositories.IRubricRepository:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IRubricRepository
        name: IRubricRepository
        nameWithType: IRubricRepository
        qualifiedName: DAL.UOW.Repositories.IRubricRepository
      VB:
      - id: DAL.UOW.Repositories.IRubricRepository
        name: IRubricRepository
        nameWithType: IRubricRepository
        qualifiedName: DAL.UOW.Repositories.IRubricRepository
    isDefinition: true
    parent: DAL.UOW.Repositories
    commentId: T:DAL.UOW.Repositories.IRubricRepository
  DAL.UOW.IUnitOfWork.Rubrics*:
    name:
      CSharp:
      - id: DAL.UOW.IUnitOfWork.Rubrics*
        name: Rubrics
        nameWithType: IUnitOfWork.Rubrics
        qualifiedName: DAL.UOW.IUnitOfWork.Rubrics
      VB:
      - id: DAL.UOW.IUnitOfWork.Rubrics*
        name: Rubrics
        nameWithType: IUnitOfWork.Rubrics
        qualifiedName: DAL.UOW.IUnitOfWork.Rubrics
    isDefinition: true
    commentId: Overload:DAL.UOW.IUnitOfWork.Rubrics
  DAL.UOW.Repositories.ITopicRepository:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.ITopicRepository
        name: ITopicRepository
        nameWithType: ITopicRepository
        qualifiedName: DAL.UOW.Repositories.ITopicRepository
      VB:
      - id: DAL.UOW.Repositories.ITopicRepository
        name: ITopicRepository
        nameWithType: ITopicRepository
        qualifiedName: DAL.UOW.Repositories.ITopicRepository
    isDefinition: true
    parent: DAL.UOW.Repositories
    commentId: T:DAL.UOW.Repositories.ITopicRepository
  DAL.UOW.IUnitOfWork.Topics*:
    name:
      CSharp:
      - id: DAL.UOW.IUnitOfWork.Topics*
        name: Topics
        nameWithType: IUnitOfWork.Topics
        qualifiedName: DAL.UOW.IUnitOfWork.Topics
      VB:
      - id: DAL.UOW.IUnitOfWork.Topics*
        name: Topics
        nameWithType: IUnitOfWork.Topics
        qualifiedName: DAL.UOW.IUnitOfWork.Topics
    isDefinition: true
    commentId: Overload:DAL.UOW.IUnitOfWork.Topics
  DAL.UOW.Repositories.IUserRepository:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IUserRepository
        name: IUserRepository
        nameWithType: IUserRepository
        qualifiedName: DAL.UOW.Repositories.IUserRepository
      VB:
      - id: DAL.UOW.Repositories.IUserRepository
        name: IUserRepository
        nameWithType: IUserRepository
        qualifiedName: DAL.UOW.Repositories.IUserRepository
    isDefinition: true
    parent: DAL.UOW.Repositories
    commentId: T:DAL.UOW.Repositories.IUserRepository
  DAL.UOW.IUnitOfWork.Users*:
    name:
      CSharp:
      - id: DAL.UOW.IUnitOfWork.Users*
        name: Users
        nameWithType: IUnitOfWork.Users
        qualifiedName: DAL.UOW.IUnitOfWork.Users
      VB:
      - id: DAL.UOW.IUnitOfWork.Users*
        name: Users
        nameWithType: IUnitOfWork.Users
        qualifiedName: DAL.UOW.IUnitOfWork.Users
    isDefinition: true
    commentId: Overload:DAL.UOW.IUnitOfWork.Users
  DAL.UOW.IUnitOfWork.BeginTransaction*:
    name:
      CSharp:
      - id: DAL.UOW.IUnitOfWork.BeginTransaction*
        name: BeginTransaction
        nameWithType: IUnitOfWork.BeginTransaction
        qualifiedName: DAL.UOW.IUnitOfWork.BeginTransaction
      VB:
      - id: DAL.UOW.IUnitOfWork.BeginTransaction*
        name: BeginTransaction
        nameWithType: IUnitOfWork.BeginTransaction
        qualifiedName: DAL.UOW.IUnitOfWork.BeginTransaction
    isDefinition: true
    commentId: Overload:DAL.UOW.IUnitOfWork.BeginTransaction
  DAL.UOW.IUnitOfWork.Commit*:
    name:
      CSharp:
      - id: DAL.UOW.IUnitOfWork.Commit*
        name: Commit
        nameWithType: IUnitOfWork.Commit
        qualifiedName: DAL.UOW.IUnitOfWork.Commit
      VB:
      - id: DAL.UOW.IUnitOfWork.Commit*
        name: Commit
        nameWithType: IUnitOfWork.Commit
        qualifiedName: DAL.UOW.IUnitOfWork.Commit
    isDefinition: true
    commentId: Overload:DAL.UOW.IUnitOfWork.Commit
  DAL.UOW.IUnitOfWork.RollBack*:
    name:
      CSharp:
      - id: DAL.UOW.IUnitOfWork.RollBack*
        name: RollBack
        nameWithType: IUnitOfWork.RollBack
        qualifiedName: DAL.UOW.IUnitOfWork.RollBack
      VB:
      - id: DAL.UOW.IUnitOfWork.RollBack*
        name: RollBack
        nameWithType: IUnitOfWork.RollBack
        qualifiedName: DAL.UOW.IUnitOfWork.RollBack
    isDefinition: true
    commentId: Overload:DAL.UOW.IUnitOfWork.RollBack
  DAL.UOW.IUnitOfWork:
    name:
      CSharp:
      - id: DAL.UOW.IUnitOfWork
        name: IUnitOfWork
        nameWithType: IUnitOfWork
        qualifiedName: DAL.UOW.IUnitOfWork
      VB:
      - id: DAL.UOW.IUnitOfWork
        name: IUnitOfWork
        nameWithType: IUnitOfWork
        qualifiedName: DAL.UOW.IUnitOfWork
    isDefinition: true
    parent: DAL.UOW
    commentId: T:DAL.UOW.IUnitOfWork
  DAL.UOW.UnitOfWork.#ctor*:
    name:
      CSharp:
      - id: DAL.UOW.UnitOfWork.#ctor*
        name: UnitOfWork
        nameWithType: UnitOfWork.UnitOfWork
        qualifiedName: DAL.UOW.UnitOfWork.UnitOfWork
      VB:
      - id: DAL.UOW.UnitOfWork.#ctor*
        name: UnitOfWork
        nameWithType: UnitOfWork.UnitOfWork
        qualifiedName: DAL.UOW.UnitOfWork.UnitOfWork
    isDefinition: true
    commentId: Overload:DAL.UOW.UnitOfWork.#ctor
  DAL.UOW.UnitOfWork.BeginTransaction*:
    name:
      CSharp:
      - id: DAL.UOW.UnitOfWork.BeginTransaction*
        name: BeginTransaction
        nameWithType: UnitOfWork.BeginTransaction
        qualifiedName: DAL.UOW.UnitOfWork.BeginTransaction
      VB:
      - id: DAL.UOW.UnitOfWork.BeginTransaction*
        name: BeginTransaction
        nameWithType: UnitOfWork.BeginTransaction
        qualifiedName: DAL.UOW.UnitOfWork.BeginTransaction
    isDefinition: true
    commentId: Overload:DAL.UOW.UnitOfWork.BeginTransaction
  DAL.UOW.IUnitOfWork.BeginTransaction:
    name:
      CSharp:
      - id: DAL.UOW.IUnitOfWork.BeginTransaction
        name: BeginTransaction
        nameWithType: IUnitOfWork.BeginTransaction
        qualifiedName: DAL.UOW.IUnitOfWork.BeginTransaction
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DAL.UOW.IUnitOfWork.BeginTransaction
        name: BeginTransaction
        nameWithType: IUnitOfWork.BeginTransaction
        qualifiedName: DAL.UOW.IUnitOfWork.BeginTransaction
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DAL.UOW.IUnitOfWork
    commentId: M:DAL.UOW.IUnitOfWork.BeginTransaction
  DAL.UOW.UnitOfWork.Commit*:
    name:
      CSharp:
      - id: DAL.UOW.UnitOfWork.Commit*
        name: Commit
        nameWithType: UnitOfWork.Commit
        qualifiedName: DAL.UOW.UnitOfWork.Commit
      VB:
      - id: DAL.UOW.UnitOfWork.Commit*
        name: Commit
        nameWithType: UnitOfWork.Commit
        qualifiedName: DAL.UOW.UnitOfWork.Commit
    isDefinition: true
    commentId: Overload:DAL.UOW.UnitOfWork.Commit
  DAL.UOW.IUnitOfWork.Commit:
    name:
      CSharp:
      - id: DAL.UOW.IUnitOfWork.Commit
        name: Commit
        nameWithType: IUnitOfWork.Commit
        qualifiedName: DAL.UOW.IUnitOfWork.Commit
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DAL.UOW.IUnitOfWork.Commit
        name: Commit
        nameWithType: IUnitOfWork.Commit
        qualifiedName: DAL.UOW.IUnitOfWork.Commit
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DAL.UOW.IUnitOfWork
    commentId: M:DAL.UOW.IUnitOfWork.Commit
  DAL.UOW.UnitOfWork.RollBack*:
    name:
      CSharp:
      - id: DAL.UOW.UnitOfWork.RollBack*
        name: RollBack
        nameWithType: UnitOfWork.RollBack
        qualifiedName: DAL.UOW.UnitOfWork.RollBack
      VB:
      - id: DAL.UOW.UnitOfWork.RollBack*
        name: RollBack
        nameWithType: UnitOfWork.RollBack
        qualifiedName: DAL.UOW.UnitOfWork.RollBack
    isDefinition: true
    commentId: Overload:DAL.UOW.UnitOfWork.RollBack
  DAL.UOW.IUnitOfWork.RollBack:
    name:
      CSharp:
      - id: DAL.UOW.IUnitOfWork.RollBack
        name: RollBack
        nameWithType: IUnitOfWork.RollBack
        qualifiedName: DAL.UOW.IUnitOfWork.RollBack
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DAL.UOW.IUnitOfWork.RollBack
        name: RollBack
        nameWithType: IUnitOfWork.RollBack
        qualifiedName: DAL.UOW.IUnitOfWork.RollBack
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DAL.UOW.IUnitOfWork
    commentId: M:DAL.UOW.IUnitOfWork.RollBack
  DAL.UOW.UnitOfWork.Dispose*:
    name:
      CSharp:
      - id: DAL.UOW.UnitOfWork.Dispose*
        name: Dispose
        nameWithType: UnitOfWork.Dispose
        qualifiedName: DAL.UOW.UnitOfWork.Dispose
      VB:
      - id: DAL.UOW.UnitOfWork.Dispose*
        name: Dispose
        nameWithType: UnitOfWork.Dispose
        qualifiedName: DAL.UOW.UnitOfWork.Dispose
    isDefinition: true
    commentId: Overload:DAL.UOW.UnitOfWork.Dispose
  DAL.UOW.UnitOfWork.Users*:
    name:
      CSharp:
      - id: DAL.UOW.UnitOfWork.Users*
        name: Users
        nameWithType: UnitOfWork.Users
        qualifiedName: DAL.UOW.UnitOfWork.Users
      VB:
      - id: DAL.UOW.UnitOfWork.Users*
        name: Users
        nameWithType: UnitOfWork.Users
        qualifiedName: DAL.UOW.UnitOfWork.Users
    isDefinition: true
    commentId: Overload:DAL.UOW.UnitOfWork.Users
  DAL.UOW.IUnitOfWork.Users:
    name:
      CSharp:
      - id: DAL.UOW.IUnitOfWork.Users
        name: Users
        nameWithType: IUnitOfWork.Users
        qualifiedName: DAL.UOW.IUnitOfWork.Users
      VB:
      - id: DAL.UOW.IUnitOfWork.Users
        name: Users
        nameWithType: IUnitOfWork.Users
        qualifiedName: DAL.UOW.IUnitOfWork.Users
    isDefinition: true
    parent: DAL.UOW.IUnitOfWork
    commentId: P:DAL.UOW.IUnitOfWork.Users
  DAL.UOW.UnitOfWork.Replies*:
    name:
      CSharp:
      - id: DAL.UOW.UnitOfWork.Replies*
        name: Replies
        nameWithType: UnitOfWork.Replies
        qualifiedName: DAL.UOW.UnitOfWork.Replies
      VB:
      - id: DAL.UOW.UnitOfWork.Replies*
        name: Replies
        nameWithType: UnitOfWork.Replies
        qualifiedName: DAL.UOW.UnitOfWork.Replies
    isDefinition: true
    commentId: Overload:DAL.UOW.UnitOfWork.Replies
  DAL.UOW.IUnitOfWork.Replies:
    name:
      CSharp:
      - id: DAL.UOW.IUnitOfWork.Replies
        name: Replies
        nameWithType: IUnitOfWork.Replies
        qualifiedName: DAL.UOW.IUnitOfWork.Replies
      VB:
      - id: DAL.UOW.IUnitOfWork.Replies
        name: Replies
        nameWithType: IUnitOfWork.Replies
        qualifiedName: DAL.UOW.IUnitOfWork.Replies
    isDefinition: true
    parent: DAL.UOW.IUnitOfWork
    commentId: P:DAL.UOW.IUnitOfWork.Replies
  DAL.UOW.UnitOfWork.Topics*:
    name:
      CSharp:
      - id: DAL.UOW.UnitOfWork.Topics*
        name: Topics
        nameWithType: UnitOfWork.Topics
        qualifiedName: DAL.UOW.UnitOfWork.Topics
      VB:
      - id: DAL.UOW.UnitOfWork.Topics*
        name: Topics
        nameWithType: UnitOfWork.Topics
        qualifiedName: DAL.UOW.UnitOfWork.Topics
    isDefinition: true
    commentId: Overload:DAL.UOW.UnitOfWork.Topics
  DAL.UOW.IUnitOfWork.Topics:
    name:
      CSharp:
      - id: DAL.UOW.IUnitOfWork.Topics
        name: Topics
        nameWithType: IUnitOfWork.Topics
        qualifiedName: DAL.UOW.IUnitOfWork.Topics
      VB:
      - id: DAL.UOW.IUnitOfWork.Topics
        name: Topics
        nameWithType: IUnitOfWork.Topics
        qualifiedName: DAL.UOW.IUnitOfWork.Topics
    isDefinition: true
    parent: DAL.UOW.IUnitOfWork
    commentId: P:DAL.UOW.IUnitOfWork.Topics
  DAL.UOW.UnitOfWork.Rubrics*:
    name:
      CSharp:
      - id: DAL.UOW.UnitOfWork.Rubrics*
        name: Rubrics
        nameWithType: UnitOfWork.Rubrics
        qualifiedName: DAL.UOW.UnitOfWork.Rubrics
      VB:
      - id: DAL.UOW.UnitOfWork.Rubrics*
        name: Rubrics
        nameWithType: UnitOfWork.Rubrics
        qualifiedName: DAL.UOW.UnitOfWork.Rubrics
    isDefinition: true
    commentId: Overload:DAL.UOW.UnitOfWork.Rubrics
  DAL.UOW.IUnitOfWork.Rubrics:
    name:
      CSharp:
      - id: DAL.UOW.IUnitOfWork.Rubrics
        name: Rubrics
        nameWithType: IUnitOfWork.Rubrics
        qualifiedName: DAL.UOW.IUnitOfWork.Rubrics
      VB:
      - id: DAL.UOW.IUnitOfWork.Rubrics
        name: Rubrics
        nameWithType: IUnitOfWork.Rubrics
        qualifiedName: DAL.UOW.IUnitOfWork.Rubrics
    isDefinition: true
    parent: DAL.UOW.IUnitOfWork
    commentId: P:DAL.UOW.IUnitOfWork.Rubrics
  DAL.UOW.UnitOfWork:
    name:
      CSharp:
      - id: DAL.UOW.UnitOfWork
        name: UnitOfWork
        nameWithType: UnitOfWork
        qualifiedName: DAL.UOW.UnitOfWork
      VB:
      - id: DAL.UOW.UnitOfWork
        name: UnitOfWork
        nameWithType: UnitOfWork
        qualifiedName: DAL.UOW.UnitOfWork
    isDefinition: true
    commentId: T:DAL.UOW.UnitOfWork
  System.Threading.Tasks.Task`1:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TResult
        nameWithType: TResult
        qualifiedName: TResult
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TResult
        nameWithType: TResult
        qualifiedName: TResult
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Threading.Tasks.Task`1
  System.Threading.Tasks:
    name:
      CSharp:
      - name: System.Threading.Tasks
        nameWithType: System.Threading.Tasks
        qualifiedName: System.Threading.Tasks
        isExternal: true
      VB:
      - name: System.Threading.Tasks
        nameWithType: System.Threading.Tasks
        qualifiedName: System.Threading.Tasks
    isDefinition: true
    commentId: N:System.Threading.Tasks
  System.Threading.Tasks.Task{{T}}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{`0}
  T:
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: true
  '{T}':
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: false
    definition: T
    commentId: '!:T'
  DAL.UOW.Repositories.IGenericRepository`1.CreateAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IGenericRepository`1.CreateAsync*
        name: CreateAsync
        nameWithType: IGenericRepository<T>.CreateAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository<T>.CreateAsync
      VB:
      - id: DAL.UOW.Repositories.IGenericRepository`1.CreateAsync*
        name: CreateAsync
        nameWithType: IGenericRepository(Of T).CreateAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository(Of T).CreateAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.IGenericRepository`1.CreateAsync
  System.Threading.Tasks.Task{System.Boolean}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{System.Boolean}
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  DAL.UOW.Repositories.IGenericRepository`1.DeleteAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IGenericRepository`1.DeleteAsync*
        name: DeleteAsync
        nameWithType: IGenericRepository<T>.DeleteAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository<T>.DeleteAsync
      VB:
      - id: DAL.UOW.Repositories.IGenericRepository`1.DeleteAsync*
        name: DeleteAsync
        nameWithType: IGenericRepository(Of T).DeleteAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository(Of T).DeleteAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.IGenericRepository`1.DeleteAsync
  System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{{T}}}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`0}}
  DAL.UOW.Repositories.IGenericRepository`1.GetAllAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IGenericRepository`1.GetAllAsync*
        name: GetAllAsync
        nameWithType: IGenericRepository<T>.GetAllAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository<T>.GetAllAsync
      VB:
      - id: DAL.UOW.Repositories.IGenericRepository`1.GetAllAsync*
        name: GetAllAsync
        nameWithType: IGenericRepository(Of T).GetAllAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository(Of T).GetAllAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.IGenericRepository`1.GetAllAsync
  DAL.UOW.Repositories.IGenericRepository`1.GetByIdAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IGenericRepository`1.GetByIdAsync*
        name: GetByIdAsync
        nameWithType: IGenericRepository<T>.GetByIdAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository<T>.GetByIdAsync
      VB:
      - id: DAL.UOW.Repositories.IGenericRepository`1.GetByIdAsync*
        name: GetByIdAsync
        nameWithType: IGenericRepository(Of T).GetByIdAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository(Of T).GetByIdAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.IGenericRepository`1.GetByIdAsync
  DAL.UOW.Repositories.IGenericRepository`1.UpdateAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IGenericRepository`1.UpdateAsync*
        name: UpdateAsync
        nameWithType: IGenericRepository<T>.UpdateAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository<T>.UpdateAsync
      VB:
      - id: DAL.UOW.Repositories.IGenericRepository`1.UpdateAsync*
        name: UpdateAsync
        nameWithType: IGenericRepository(Of T).UpdateAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository(Of T).UpdateAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.IGenericRepository`1.UpdateAsync
  DAL.UOW.Repositories.IGenericRepository`1:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IGenericRepository`1
        name: IGenericRepository
        nameWithType: IGenericRepository
        qualifiedName: DAL.UOW.Repositories.IGenericRepository
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: DAL.UOW.Repositories.IGenericRepository`1
        name: IGenericRepository
        nameWithType: IGenericRepository
        qualifiedName: DAL.UOW.Repositories.IGenericRepository
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:DAL.UOW.Repositories.IGenericRepository`1
  DAL.UOW.Repositories.IGenericRepository`1.CreateAsync(`0):
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IGenericRepository`1.CreateAsync(`0)
        name: CreateAsync
        nameWithType: IGenericRepository<T>.CreateAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository<T>.CreateAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DAL.UOW.Repositories.IGenericRepository`1.CreateAsync(`0)
        name: CreateAsync
        nameWithType: IGenericRepository(Of T).CreateAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository(Of T).CreateAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:DAL.UOW.Repositories.IGenericRepository`1.CreateAsync(`0)
  DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Reply}:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IGenericRepository`1
        name: IGenericRepository
        nameWithType: IGenericRepository
        qualifiedName: DAL.UOW.Repositories.IGenericRepository
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.Entites.Reply
        name: Reply
        nameWithType: Reply
        qualifiedName: Domain.Entites.Reply
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: DAL.UOW.Repositories.IGenericRepository`1
        name: IGenericRepository
        nameWithType: IGenericRepository
        qualifiedName: DAL.UOW.Repositories.IGenericRepository
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.Entites.Reply
        name: Reply
        nameWithType: Reply
        qualifiedName: Domain.Entites.Reply
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: DAL.UOW.Repositories.IGenericRepository`1
    parent: DAL.UOW.Repositories
    commentId: T:DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Reply}
  DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Reply}.CreateAsync(Domain.Entites.Reply):
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IGenericRepository`1.CreateAsync(`0)
        name: CreateAsync
        nameWithType: IGenericRepository<Reply>.CreateAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository<Domain.Entites.Reply>.CreateAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.Entites.Reply
        name: Reply
        nameWithType: Reply
        qualifiedName: Domain.Entites.Reply
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DAL.UOW.Repositories.IGenericRepository`1.CreateAsync(`0)
        name: CreateAsync
        nameWithType: IGenericRepository(Of Reply).CreateAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository(Of Domain.Entites.Reply).CreateAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.Entites.Reply
        name: Reply
        nameWithType: Reply
        qualifiedName: Domain.Entites.Reply
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: DAL.UOW.Repositories.IGenericRepository`1.CreateAsync(`0)
    parent: DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Reply}
    commentId: M:DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Reply}.CreateAsync(Domain.Entites.Reply)
  DAL.UOW.Repositories.IGenericRepository`1.DeleteAsync(System.Int32):
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IGenericRepository`1.DeleteAsync(System.Int32)
        name: DeleteAsync
        nameWithType: IGenericRepository<T>.DeleteAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository<T>.DeleteAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DAL.UOW.Repositories.IGenericRepository`1.DeleteAsync(System.Int32)
        name: DeleteAsync
        nameWithType: IGenericRepository(Of T).DeleteAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository(Of T).DeleteAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:DAL.UOW.Repositories.IGenericRepository`1.DeleteAsync(System.Int32)
  DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Reply}.DeleteAsync(System.Int32):
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IGenericRepository`1.DeleteAsync(System.Int32)
        name: DeleteAsync
        nameWithType: IGenericRepository<Reply>.DeleteAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository<Domain.Entites.Reply>.DeleteAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DAL.UOW.Repositories.IGenericRepository`1.DeleteAsync(System.Int32)
        name: DeleteAsync
        nameWithType: IGenericRepository(Of Reply).DeleteAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository(Of Domain.Entites.Reply).DeleteAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: DAL.UOW.Repositories.IGenericRepository`1.DeleteAsync(System.Int32)
    parent: DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Reply}
    commentId: M:DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Reply}.DeleteAsync(System.Int32)
  DAL.UOW.Repositories.IGenericRepository`1.GetAllAsync:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IGenericRepository`1.GetAllAsync
        name: GetAllAsync
        nameWithType: IGenericRepository<T>.GetAllAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository<T>.GetAllAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DAL.UOW.Repositories.IGenericRepository`1.GetAllAsync
        name: GetAllAsync
        nameWithType: IGenericRepository(Of T).GetAllAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository(Of T).GetAllAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:DAL.UOW.Repositories.IGenericRepository`1.GetAllAsync
  DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Reply}.GetAllAsync:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IGenericRepository`1.GetAllAsync
        name: GetAllAsync
        nameWithType: IGenericRepository<Reply>.GetAllAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository<Domain.Entites.Reply>.GetAllAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DAL.UOW.Repositories.IGenericRepository`1.GetAllAsync
        name: GetAllAsync
        nameWithType: IGenericRepository(Of Reply).GetAllAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository(Of Domain.Entites.Reply).GetAllAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: DAL.UOW.Repositories.IGenericRepository`1.GetAllAsync
    parent: DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Reply}
    commentId: M:DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Reply}.GetAllAsync
  DAL.UOW.Repositories.IGenericRepository`1.GetByIdAsync(System.Int32):
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IGenericRepository`1.GetByIdAsync(System.Int32)
        name: GetByIdAsync
        nameWithType: IGenericRepository<T>.GetByIdAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository<T>.GetByIdAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DAL.UOW.Repositories.IGenericRepository`1.GetByIdAsync(System.Int32)
        name: GetByIdAsync
        nameWithType: IGenericRepository(Of T).GetByIdAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository(Of T).GetByIdAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:DAL.UOW.Repositories.IGenericRepository`1.GetByIdAsync(System.Int32)
  DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Reply}.GetByIdAsync(System.Int32):
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IGenericRepository`1.GetByIdAsync(System.Int32)
        name: GetByIdAsync
        nameWithType: IGenericRepository<Reply>.GetByIdAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository<Domain.Entites.Reply>.GetByIdAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DAL.UOW.Repositories.IGenericRepository`1.GetByIdAsync(System.Int32)
        name: GetByIdAsync
        nameWithType: IGenericRepository(Of Reply).GetByIdAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository(Of Domain.Entites.Reply).GetByIdAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: DAL.UOW.Repositories.IGenericRepository`1.GetByIdAsync(System.Int32)
    parent: DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Reply}
    commentId: M:DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Reply}.GetByIdAsync(System.Int32)
  DAL.UOW.Repositories.IGenericRepository`1.UpdateAsync(`0):
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IGenericRepository`1.UpdateAsync(`0)
        name: UpdateAsync
        nameWithType: IGenericRepository<T>.UpdateAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository<T>.UpdateAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DAL.UOW.Repositories.IGenericRepository`1.UpdateAsync(`0)
        name: UpdateAsync
        nameWithType: IGenericRepository(Of T).UpdateAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository(Of T).UpdateAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:DAL.UOW.Repositories.IGenericRepository`1.UpdateAsync(`0)
  DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Reply}.UpdateAsync(Domain.Entites.Reply):
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IGenericRepository`1.UpdateAsync(`0)
        name: UpdateAsync
        nameWithType: IGenericRepository<Reply>.UpdateAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository<Domain.Entites.Reply>.UpdateAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.Entites.Reply
        name: Reply
        nameWithType: Reply
        qualifiedName: Domain.Entites.Reply
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DAL.UOW.Repositories.IGenericRepository`1.UpdateAsync(`0)
        name: UpdateAsync
        nameWithType: IGenericRepository(Of Reply).UpdateAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository(Of Domain.Entites.Reply).UpdateAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.Entites.Reply
        name: Reply
        nameWithType: Reply
        qualifiedName: Domain.Entites.Reply
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: DAL.UOW.Repositories.IGenericRepository`1.UpdateAsync(`0)
    parent: DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Reply}
    commentId: M:DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Reply}.UpdateAsync(Domain.Entites.Reply)
  System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Domain.Entites.Reply}}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.Entites.Reply
        name: Reply
        nameWithType: Reply
        qualifiedName: Domain.Entites.Reply
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.Entites.Reply
        name: Reply
        nameWithType: Reply
        qualifiedName: Domain.Entites.Reply
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Domain.Entites.Reply}}
  DAL.UOW.Repositories.IReplyRepository.GetAllByTopicIdAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IReplyRepository.GetAllByTopicIdAsync*
        name: GetAllByTopicIdAsync
        nameWithType: IReplyRepository.GetAllByTopicIdAsync
        qualifiedName: DAL.UOW.Repositories.IReplyRepository.GetAllByTopicIdAsync
      VB:
      - id: DAL.UOW.Repositories.IReplyRepository.GetAllByTopicIdAsync*
        name: GetAllByTopicIdAsync
        nameWithType: IReplyRepository.GetAllByTopicIdAsync
        qualifiedName: DAL.UOW.Repositories.IReplyRepository.GetAllByTopicIdAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.IReplyRepository.GetAllByTopicIdAsync
  DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Rubric}:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IGenericRepository`1
        name: IGenericRepository
        nameWithType: IGenericRepository
        qualifiedName: DAL.UOW.Repositories.IGenericRepository
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.Entites.Rubric
        name: Rubric
        nameWithType: Rubric
        qualifiedName: Domain.Entites.Rubric
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: DAL.UOW.Repositories.IGenericRepository`1
        name: IGenericRepository
        nameWithType: IGenericRepository
        qualifiedName: DAL.UOW.Repositories.IGenericRepository
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.Entites.Rubric
        name: Rubric
        nameWithType: Rubric
        qualifiedName: Domain.Entites.Rubric
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: DAL.UOW.Repositories.IGenericRepository`1
    parent: DAL.UOW.Repositories
    commentId: T:DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Rubric}
  DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Rubric}.CreateAsync(Domain.Entites.Rubric):
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IGenericRepository`1.CreateAsync(`0)
        name: CreateAsync
        nameWithType: IGenericRepository<Rubric>.CreateAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository<Domain.Entites.Rubric>.CreateAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.Entites.Rubric
        name: Rubric
        nameWithType: Rubric
        qualifiedName: Domain.Entites.Rubric
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DAL.UOW.Repositories.IGenericRepository`1.CreateAsync(`0)
        name: CreateAsync
        nameWithType: IGenericRepository(Of Rubric).CreateAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository(Of Domain.Entites.Rubric).CreateAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.Entites.Rubric
        name: Rubric
        nameWithType: Rubric
        qualifiedName: Domain.Entites.Rubric
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: DAL.UOW.Repositories.IGenericRepository`1.CreateAsync(`0)
    parent: DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Rubric}
    commentId: M:DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Rubric}.CreateAsync(Domain.Entites.Rubric)
  DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Rubric}.DeleteAsync(System.Int32):
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IGenericRepository`1.DeleteAsync(System.Int32)
        name: DeleteAsync
        nameWithType: IGenericRepository<Rubric>.DeleteAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository<Domain.Entites.Rubric>.DeleteAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DAL.UOW.Repositories.IGenericRepository`1.DeleteAsync(System.Int32)
        name: DeleteAsync
        nameWithType: IGenericRepository(Of Rubric).DeleteAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository(Of Domain.Entites.Rubric).DeleteAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: DAL.UOW.Repositories.IGenericRepository`1.DeleteAsync(System.Int32)
    parent: DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Rubric}
    commentId: M:DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Rubric}.DeleteAsync(System.Int32)
  DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Rubric}.GetAllAsync:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IGenericRepository`1.GetAllAsync
        name: GetAllAsync
        nameWithType: IGenericRepository<Rubric>.GetAllAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository<Domain.Entites.Rubric>.GetAllAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DAL.UOW.Repositories.IGenericRepository`1.GetAllAsync
        name: GetAllAsync
        nameWithType: IGenericRepository(Of Rubric).GetAllAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository(Of Domain.Entites.Rubric).GetAllAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: DAL.UOW.Repositories.IGenericRepository`1.GetAllAsync
    parent: DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Rubric}
    commentId: M:DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Rubric}.GetAllAsync
  DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Rubric}.GetByIdAsync(System.Int32):
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IGenericRepository`1.GetByIdAsync(System.Int32)
        name: GetByIdAsync
        nameWithType: IGenericRepository<Rubric>.GetByIdAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository<Domain.Entites.Rubric>.GetByIdAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DAL.UOW.Repositories.IGenericRepository`1.GetByIdAsync(System.Int32)
        name: GetByIdAsync
        nameWithType: IGenericRepository(Of Rubric).GetByIdAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository(Of Domain.Entites.Rubric).GetByIdAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: DAL.UOW.Repositories.IGenericRepository`1.GetByIdAsync(System.Int32)
    parent: DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Rubric}
    commentId: M:DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Rubric}.GetByIdAsync(System.Int32)
  DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Rubric}.UpdateAsync(Domain.Entites.Rubric):
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IGenericRepository`1.UpdateAsync(`0)
        name: UpdateAsync
        nameWithType: IGenericRepository<Rubric>.UpdateAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository<Domain.Entites.Rubric>.UpdateAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.Entites.Rubric
        name: Rubric
        nameWithType: Rubric
        qualifiedName: Domain.Entites.Rubric
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DAL.UOW.Repositories.IGenericRepository`1.UpdateAsync(`0)
        name: UpdateAsync
        nameWithType: IGenericRepository(Of Rubric).UpdateAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository(Of Domain.Entites.Rubric).UpdateAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.Entites.Rubric
        name: Rubric
        nameWithType: Rubric
        qualifiedName: Domain.Entites.Rubric
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: DAL.UOW.Repositories.IGenericRepository`1.UpdateAsync(`0)
    parent: DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Rubric}
    commentId: M:DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Rubric}.UpdateAsync(Domain.Entites.Rubric)
  System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Domain.Entites.RubricDetail}}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.Entites.RubricDetail
        name: RubricDetail
        nameWithType: RubricDetail
        qualifiedName: Domain.Entites.RubricDetail
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.Entites.RubricDetail
        name: RubricDetail
        nameWithType: RubricDetail
        qualifiedName: Domain.Entites.RubricDetail
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Domain.Entites.RubricDetail}}
  DAL.UOW.Repositories.IRubricRepository.DetailByIdAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IRubricRepository.DetailByIdAsync*
        name: DetailByIdAsync
        nameWithType: IRubricRepository.DetailByIdAsync
        qualifiedName: DAL.UOW.Repositories.IRubricRepository.DetailByIdAsync
      VB:
      - id: DAL.UOW.Repositories.IRubricRepository.DetailByIdAsync*
        name: DetailByIdAsync
        nameWithType: IRubricRepository.DetailByIdAsync
        qualifiedName: DAL.UOW.Repositories.IRubricRepository.DetailByIdAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.IRubricRepository.DetailByIdAsync
  DAL.UOW.Repositories.IRubricRepository.DetailAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IRubricRepository.DetailAsync*
        name: DetailAsync
        nameWithType: IRubricRepository.DetailAsync
        qualifiedName: DAL.UOW.Repositories.IRubricRepository.DetailAsync
      VB:
      - id: DAL.UOW.Repositories.IRubricRepository.DetailAsync*
        name: DetailAsync
        nameWithType: IRubricRepository.DetailAsync
        qualifiedName: DAL.UOW.Repositories.IRubricRepository.DetailAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.IRubricRepository.DetailAsync
  DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Topic}:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IGenericRepository`1
        name: IGenericRepository
        nameWithType: IGenericRepository
        qualifiedName: DAL.UOW.Repositories.IGenericRepository
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.Entites.Topic
        name: Topic
        nameWithType: Topic
        qualifiedName: Domain.Entites.Topic
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: DAL.UOW.Repositories.IGenericRepository`1
        name: IGenericRepository
        nameWithType: IGenericRepository
        qualifiedName: DAL.UOW.Repositories.IGenericRepository
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.Entites.Topic
        name: Topic
        nameWithType: Topic
        qualifiedName: Domain.Entites.Topic
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: DAL.UOW.Repositories.IGenericRepository`1
    parent: DAL.UOW.Repositories
    commentId: T:DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Topic}
  DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Topic}.CreateAsync(Domain.Entites.Topic):
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IGenericRepository`1.CreateAsync(`0)
        name: CreateAsync
        nameWithType: IGenericRepository<Topic>.CreateAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository<Domain.Entites.Topic>.CreateAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.Entites.Topic
        name: Topic
        nameWithType: Topic
        qualifiedName: Domain.Entites.Topic
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DAL.UOW.Repositories.IGenericRepository`1.CreateAsync(`0)
        name: CreateAsync
        nameWithType: IGenericRepository(Of Topic).CreateAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository(Of Domain.Entites.Topic).CreateAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.Entites.Topic
        name: Topic
        nameWithType: Topic
        qualifiedName: Domain.Entites.Topic
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: DAL.UOW.Repositories.IGenericRepository`1.CreateAsync(`0)
    parent: DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Topic}
    commentId: M:DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Topic}.CreateAsync(Domain.Entites.Topic)
  DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Topic}.DeleteAsync(System.Int32):
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IGenericRepository`1.DeleteAsync(System.Int32)
        name: DeleteAsync
        nameWithType: IGenericRepository<Topic>.DeleteAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository<Domain.Entites.Topic>.DeleteAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DAL.UOW.Repositories.IGenericRepository`1.DeleteAsync(System.Int32)
        name: DeleteAsync
        nameWithType: IGenericRepository(Of Topic).DeleteAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository(Of Domain.Entites.Topic).DeleteAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: DAL.UOW.Repositories.IGenericRepository`1.DeleteAsync(System.Int32)
    parent: DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Topic}
    commentId: M:DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Topic}.DeleteAsync(System.Int32)
  DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Topic}.GetAllAsync:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IGenericRepository`1.GetAllAsync
        name: GetAllAsync
        nameWithType: IGenericRepository<Topic>.GetAllAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository<Domain.Entites.Topic>.GetAllAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DAL.UOW.Repositories.IGenericRepository`1.GetAllAsync
        name: GetAllAsync
        nameWithType: IGenericRepository(Of Topic).GetAllAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository(Of Domain.Entites.Topic).GetAllAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: DAL.UOW.Repositories.IGenericRepository`1.GetAllAsync
    parent: DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Topic}
    commentId: M:DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Topic}.GetAllAsync
  DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Topic}.GetByIdAsync(System.Int32):
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IGenericRepository`1.GetByIdAsync(System.Int32)
        name: GetByIdAsync
        nameWithType: IGenericRepository<Topic>.GetByIdAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository<Domain.Entites.Topic>.GetByIdAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DAL.UOW.Repositories.IGenericRepository`1.GetByIdAsync(System.Int32)
        name: GetByIdAsync
        nameWithType: IGenericRepository(Of Topic).GetByIdAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository(Of Domain.Entites.Topic).GetByIdAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: DAL.UOW.Repositories.IGenericRepository`1.GetByIdAsync(System.Int32)
    parent: DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Topic}
    commentId: M:DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Topic}.GetByIdAsync(System.Int32)
  DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Topic}.UpdateAsync(Domain.Entites.Topic):
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IGenericRepository`1.UpdateAsync(`0)
        name: UpdateAsync
        nameWithType: IGenericRepository<Topic>.UpdateAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository<Domain.Entites.Topic>.UpdateAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.Entites.Topic
        name: Topic
        nameWithType: Topic
        qualifiedName: Domain.Entites.Topic
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DAL.UOW.Repositories.IGenericRepository`1.UpdateAsync(`0)
        name: UpdateAsync
        nameWithType: IGenericRepository(Of Topic).UpdateAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository(Of Domain.Entites.Topic).UpdateAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.Entites.Topic
        name: Topic
        nameWithType: Topic
        qualifiedName: Domain.Entites.Topic
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: DAL.UOW.Repositories.IGenericRepository`1.UpdateAsync(`0)
    parent: DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Topic}
    commentId: M:DAL.UOW.Repositories.IGenericRepository{Domain.Entites.Topic}.UpdateAsync(Domain.Entites.Topic)
  System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Domain.Entites.Topic}}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.Entites.Topic
        name: Topic
        nameWithType: Topic
        qualifiedName: Domain.Entites.Topic
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.Entites.Topic
        name: Topic
        nameWithType: Topic
        qualifiedName: Domain.Entites.Topic
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Domain.Entites.Topic}}
  DAL.UOW.Repositories.ITopicRepository.GetAllByRubricIdAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.ITopicRepository.GetAllByRubricIdAsync*
        name: GetAllByRubricIdAsync
        nameWithType: ITopicRepository.GetAllByRubricIdAsync
        qualifiedName: DAL.UOW.Repositories.ITopicRepository.GetAllByRubricIdAsync
      VB:
      - id: DAL.UOW.Repositories.ITopicRepository.GetAllByRubricIdAsync*
        name: GetAllByRubricIdAsync
        nameWithType: ITopicRepository.GetAllByRubricIdAsync
        qualifiedName: DAL.UOW.Repositories.ITopicRepository.GetAllByRubricIdAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.ITopicRepository.GetAllByRubricIdAsync
  System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Domain.Entites.TopicDetail}}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.Entites.TopicDetail
        name: TopicDetail
        nameWithType: TopicDetail
        qualifiedName: Domain.Entites.TopicDetail
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.Entites.TopicDetail
        name: TopicDetail
        nameWithType: TopicDetail
        qualifiedName: Domain.Entites.TopicDetail
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Domain.Entites.TopicDetail}}
  DAL.UOW.Repositories.ITopicRepository.DetailByIdAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.ITopicRepository.DetailByIdAsync*
        name: DetailByIdAsync
        nameWithType: ITopicRepository.DetailByIdAsync
        qualifiedName: DAL.UOW.Repositories.ITopicRepository.DetailByIdAsync
      VB:
      - id: DAL.UOW.Repositories.ITopicRepository.DetailByIdAsync*
        name: DetailByIdAsync
        nameWithType: ITopicRepository.DetailByIdAsync
        qualifiedName: DAL.UOW.Repositories.ITopicRepository.DetailByIdAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.ITopicRepository.DetailByIdAsync
  DAL.UOW.Repositories.ITopicRepository.DetailAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.ITopicRepository.DetailAsync*
        name: DetailAsync
        nameWithType: ITopicRepository.DetailAsync
        qualifiedName: DAL.UOW.Repositories.ITopicRepository.DetailAsync
      VB:
      - id: DAL.UOW.Repositories.ITopicRepository.DetailAsync*
        name: DetailAsync
        nameWithType: ITopicRepository.DetailAsync
        qualifiedName: DAL.UOW.Repositories.ITopicRepository.DetailAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.ITopicRepository.DetailAsync
  DAL.UOW.Repositories.IGenericRepository{Domain.Entites._User}:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IGenericRepository`1
        name: IGenericRepository
        nameWithType: IGenericRepository
        qualifiedName: DAL.UOW.Repositories.IGenericRepository
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.Entites._User
        name: _User
        nameWithType: _User
        qualifiedName: Domain.Entites._User
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: DAL.UOW.Repositories.IGenericRepository`1
        name: IGenericRepository
        nameWithType: IGenericRepository
        qualifiedName: DAL.UOW.Repositories.IGenericRepository
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.Entites._User
        name: _User
        nameWithType: _User
        qualifiedName: Domain.Entites._User
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: DAL.UOW.Repositories.IGenericRepository`1
    parent: DAL.UOW.Repositories
    commentId: T:DAL.UOW.Repositories.IGenericRepository{Domain.Entites._User}
  DAL.UOW.Repositories.IGenericRepository{Domain.Entites._User}.CreateAsync(Domain.Entites._User):
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IGenericRepository`1.CreateAsync(`0)
        name: CreateAsync
        nameWithType: IGenericRepository<_User>.CreateAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository<Domain.Entites._User>.CreateAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.Entites._User
        name: _User
        nameWithType: _User
        qualifiedName: Domain.Entites._User
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DAL.UOW.Repositories.IGenericRepository`1.CreateAsync(`0)
        name: CreateAsync
        nameWithType: IGenericRepository(Of _User).CreateAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository(Of Domain.Entites._User).CreateAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.Entites._User
        name: _User
        nameWithType: _User
        qualifiedName: Domain.Entites._User
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: DAL.UOW.Repositories.IGenericRepository`1.CreateAsync(`0)
    parent: DAL.UOW.Repositories.IGenericRepository{Domain.Entites._User}
    commentId: M:DAL.UOW.Repositories.IGenericRepository{Domain.Entites._User}.CreateAsync(Domain.Entites._User)
  DAL.UOW.Repositories.IGenericRepository{Domain.Entites._User}.DeleteAsync(System.Int32):
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IGenericRepository`1.DeleteAsync(System.Int32)
        name: DeleteAsync
        nameWithType: IGenericRepository<_User>.DeleteAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository<Domain.Entites._User>.DeleteAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DAL.UOW.Repositories.IGenericRepository`1.DeleteAsync(System.Int32)
        name: DeleteAsync
        nameWithType: IGenericRepository(Of _User).DeleteAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository(Of Domain.Entites._User).DeleteAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: DAL.UOW.Repositories.IGenericRepository`1.DeleteAsync(System.Int32)
    parent: DAL.UOW.Repositories.IGenericRepository{Domain.Entites._User}
    commentId: M:DAL.UOW.Repositories.IGenericRepository{Domain.Entites._User}.DeleteAsync(System.Int32)
  DAL.UOW.Repositories.IGenericRepository{Domain.Entites._User}.GetAllAsync:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IGenericRepository`1.GetAllAsync
        name: GetAllAsync
        nameWithType: IGenericRepository<_User>.GetAllAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository<Domain.Entites._User>.GetAllAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DAL.UOW.Repositories.IGenericRepository`1.GetAllAsync
        name: GetAllAsync
        nameWithType: IGenericRepository(Of _User).GetAllAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository(Of Domain.Entites._User).GetAllAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: DAL.UOW.Repositories.IGenericRepository`1.GetAllAsync
    parent: DAL.UOW.Repositories.IGenericRepository{Domain.Entites._User}
    commentId: M:DAL.UOW.Repositories.IGenericRepository{Domain.Entites._User}.GetAllAsync
  DAL.UOW.Repositories.IGenericRepository{Domain.Entites._User}.GetByIdAsync(System.Int32):
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IGenericRepository`1.GetByIdAsync(System.Int32)
        name: GetByIdAsync
        nameWithType: IGenericRepository<_User>.GetByIdAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository<Domain.Entites._User>.GetByIdAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DAL.UOW.Repositories.IGenericRepository`1.GetByIdAsync(System.Int32)
        name: GetByIdAsync
        nameWithType: IGenericRepository(Of _User).GetByIdAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository(Of Domain.Entites._User).GetByIdAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: DAL.UOW.Repositories.IGenericRepository`1.GetByIdAsync(System.Int32)
    parent: DAL.UOW.Repositories.IGenericRepository{Domain.Entites._User}
    commentId: M:DAL.UOW.Repositories.IGenericRepository{Domain.Entites._User}.GetByIdAsync(System.Int32)
  DAL.UOW.Repositories.IGenericRepository{Domain.Entites._User}.UpdateAsync(Domain.Entites._User):
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IGenericRepository`1.UpdateAsync(`0)
        name: UpdateAsync
        nameWithType: IGenericRepository<_User>.UpdateAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository<Domain.Entites._User>.UpdateAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.Entites._User
        name: _User
        nameWithType: _User
        qualifiedName: Domain.Entites._User
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DAL.UOW.Repositories.IGenericRepository`1.UpdateAsync(`0)
        name: UpdateAsync
        nameWithType: IGenericRepository(Of _User).UpdateAsync
        qualifiedName: DAL.UOW.Repositories.IGenericRepository(Of Domain.Entites._User).UpdateAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Domain.Entites._User
        name: _User
        nameWithType: _User
        qualifiedName: Domain.Entites._User
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: DAL.UOW.Repositories.IGenericRepository`1.UpdateAsync(`0)
    parent: DAL.UOW.Repositories.IGenericRepository{Domain.Entites._User}
    commentId: M:DAL.UOW.Repositories.IGenericRepository{Domain.Entites._User}.UpdateAsync(Domain.Entites._User)
  System.Threading.Tasks.Task{Domain.Entites._User}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.Entites._User
        name: _User
        nameWithType: _User
        qualifiedName: Domain.Entites._User
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.Entites._User
        name: _User
        nameWithType: _User
        qualifiedName: Domain.Entites._User
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{Domain.Entites._User}
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  DAL.UOW.Repositories.IUserRepository.GetUserBylogin_NameAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IUserRepository.GetUserBylogin_NameAsync*
        name: GetUserBylogin_NameAsync
        nameWithType: IUserRepository.GetUserBylogin_NameAsync
        qualifiedName: DAL.UOW.Repositories.IUserRepository.GetUserBylogin_NameAsync
      VB:
      - id: DAL.UOW.Repositories.IUserRepository.GetUserBylogin_NameAsync*
        name: GetUserBylogin_NameAsync
        nameWithType: IUserRepository.GetUserBylogin_NameAsync
        qualifiedName: DAL.UOW.Repositories.IUserRepository.GetUserBylogin_NameAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.IUserRepository.GetUserBylogin_NameAsync
  DAL.UOW.Repositories.ReplyRepository.#ctor*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.ReplyRepository.#ctor*
        name: ReplyRepository
        nameWithType: ReplyRepository.ReplyRepository
        qualifiedName: DAL.UOW.Repositories.ReplyRepository.ReplyRepository
      VB:
      - id: DAL.UOW.Repositories.ReplyRepository.#ctor*
        name: ReplyRepository
        nameWithType: ReplyRepository.ReplyRepository
        qualifiedName: DAL.UOW.Repositories.ReplyRepository.ReplyRepository
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.ReplyRepository.#ctor
  DAL.UOW.Repositories.ReplyRepository.GetAllAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.ReplyRepository.GetAllAsync*
        name: GetAllAsync
        nameWithType: ReplyRepository.GetAllAsync
        qualifiedName: DAL.UOW.Repositories.ReplyRepository.GetAllAsync
      VB:
      - id: DAL.UOW.Repositories.ReplyRepository.GetAllAsync*
        name: GetAllAsync
        nameWithType: ReplyRepository.GetAllAsync
        qualifiedName: DAL.UOW.Repositories.ReplyRepository.GetAllAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.ReplyRepository.GetAllAsync
  DAL.UOW.Repositories.ReplyRepository.GetAllByTopicIdAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.ReplyRepository.GetAllByTopicIdAsync*
        name: GetAllByTopicIdAsync
        nameWithType: ReplyRepository.GetAllByTopicIdAsync
        qualifiedName: DAL.UOW.Repositories.ReplyRepository.GetAllByTopicIdAsync
      VB:
      - id: DAL.UOW.Repositories.ReplyRepository.GetAllByTopicIdAsync*
        name: GetAllByTopicIdAsync
        nameWithType: ReplyRepository.GetAllByTopicIdAsync
        qualifiedName: DAL.UOW.Repositories.ReplyRepository.GetAllByTopicIdAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.ReplyRepository.GetAllByTopicIdAsync
  DAL.UOW.Repositories.IReplyRepository.GetAllByTopicIdAsync(System.Int32):
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IReplyRepository.GetAllByTopicIdAsync(System.Int32)
        name: GetAllByTopicIdAsync
        nameWithType: IReplyRepository.GetAllByTopicIdAsync
        qualifiedName: DAL.UOW.Repositories.IReplyRepository.GetAllByTopicIdAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DAL.UOW.Repositories.IReplyRepository.GetAllByTopicIdAsync(System.Int32)
        name: GetAllByTopicIdAsync
        nameWithType: IReplyRepository.GetAllByTopicIdAsync
        qualifiedName: DAL.UOW.Repositories.IReplyRepository.GetAllByTopicIdAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DAL.UOW.Repositories.IReplyRepository
    commentId: M:DAL.UOW.Repositories.IReplyRepository.GetAllByTopicIdAsync(System.Int32)
  System.Threading.Tasks.Task{Domain.Entites.Reply}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.Entites.Reply
        name: Reply
        nameWithType: Reply
        qualifiedName: Domain.Entites.Reply
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.Entites.Reply
        name: Reply
        nameWithType: Reply
        qualifiedName: Domain.Entites.Reply
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{Domain.Entites.Reply}
  DAL.UOW.Repositories.ReplyRepository.GetByIdAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.ReplyRepository.GetByIdAsync*
        name: GetByIdAsync
        nameWithType: ReplyRepository.GetByIdAsync
        qualifiedName: DAL.UOW.Repositories.ReplyRepository.GetByIdAsync
      VB:
      - id: DAL.UOW.Repositories.ReplyRepository.GetByIdAsync*
        name: GetByIdAsync
        nameWithType: ReplyRepository.GetByIdAsync
        qualifiedName: DAL.UOW.Repositories.ReplyRepository.GetByIdAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.ReplyRepository.GetByIdAsync
  Domain.Entites:
    name:
      CSharp:
      - name: Domain.Entites
        nameWithType: Domain.Entites
        qualifiedName: Domain.Entites
      VB:
      - name: Domain.Entites
        nameWithType: Domain.Entites
        qualifiedName: Domain.Entites
    isDefinition: true
    commentId: N:Domain.Entites
  Domain.Entites.Reply:
    name:
      CSharp:
      - id: Domain.Entites.Reply
        name: Reply
        nameWithType: Reply
        qualifiedName: Domain.Entites.Reply
      VB:
      - id: Domain.Entites.Reply
        name: Reply
        nameWithType: Reply
        qualifiedName: Domain.Entites.Reply
    isDefinition: true
    parent: Domain.Entites
    commentId: T:Domain.Entites.Reply
  DAL.UOW.Repositories.ReplyRepository.CreateAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.ReplyRepository.CreateAsync*
        name: CreateAsync
        nameWithType: ReplyRepository.CreateAsync
        qualifiedName: DAL.UOW.Repositories.ReplyRepository.CreateAsync
      VB:
      - id: DAL.UOW.Repositories.ReplyRepository.CreateAsync*
        name: CreateAsync
        nameWithType: ReplyRepository.CreateAsync
        qualifiedName: DAL.UOW.Repositories.ReplyRepository.CreateAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.ReplyRepository.CreateAsync
  DAL.UOW.Repositories.ReplyRepository.UpdateAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.ReplyRepository.UpdateAsync*
        name: UpdateAsync
        nameWithType: ReplyRepository.UpdateAsync
        qualifiedName: DAL.UOW.Repositories.ReplyRepository.UpdateAsync
      VB:
      - id: DAL.UOW.Repositories.ReplyRepository.UpdateAsync*
        name: UpdateAsync
        nameWithType: ReplyRepository.UpdateAsync
        qualifiedName: DAL.UOW.Repositories.ReplyRepository.UpdateAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.ReplyRepository.UpdateAsync
  DAL.UOW.Repositories.ReplyRepository.DeleteAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.ReplyRepository.DeleteAsync*
        name: DeleteAsync
        nameWithType: ReplyRepository.DeleteAsync
        qualifiedName: DAL.UOW.Repositories.ReplyRepository.DeleteAsync
      VB:
      - id: DAL.UOW.Repositories.ReplyRepository.DeleteAsync*
        name: DeleteAsync
        nameWithType: ReplyRepository.DeleteAsync
        qualifiedName: DAL.UOW.Repositories.ReplyRepository.DeleteAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.ReplyRepository.DeleteAsync
  DAL.UOW.Repositories.ReplyRepository:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.ReplyRepository
        name: ReplyRepository
        nameWithType: ReplyRepository
        qualifiedName: DAL.UOW.Repositories.ReplyRepository
      VB:
      - id: DAL.UOW.Repositories.ReplyRepository
        name: ReplyRepository
        nameWithType: ReplyRepository
        qualifiedName: DAL.UOW.Repositories.ReplyRepository
    isDefinition: true
    commentId: T:DAL.UOW.Repositories.ReplyRepository
  DAL.UOW.Repositories.RubricRepository.#ctor*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.RubricRepository.#ctor*
        name: RubricRepository
        nameWithType: RubricRepository.RubricRepository
        qualifiedName: DAL.UOW.Repositories.RubricRepository.RubricRepository
      VB:
      - id: DAL.UOW.Repositories.RubricRepository.#ctor*
        name: RubricRepository
        nameWithType: RubricRepository.RubricRepository
        qualifiedName: DAL.UOW.Repositories.RubricRepository.RubricRepository
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.RubricRepository.#ctor
  System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Domain.Entites.Rubric}}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.Entites.Rubric
        name: Rubric
        nameWithType: Rubric
        qualifiedName: Domain.Entites.Rubric
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.Entites.Rubric
        name: Rubric
        nameWithType: Rubric
        qualifiedName: Domain.Entites.Rubric
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Domain.Entites.Rubric}}
  DAL.UOW.Repositories.RubricRepository.GetAllAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.RubricRepository.GetAllAsync*
        name: GetAllAsync
        nameWithType: RubricRepository.GetAllAsync
        qualifiedName: DAL.UOW.Repositories.RubricRepository.GetAllAsync
      VB:
      - id: DAL.UOW.Repositories.RubricRepository.GetAllAsync*
        name: GetAllAsync
        nameWithType: RubricRepository.GetAllAsync
        qualifiedName: DAL.UOW.Repositories.RubricRepository.GetAllAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.RubricRepository.GetAllAsync
  System.Threading.Tasks.Task{Domain.Entites.Rubric}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.Entites.Rubric
        name: Rubric
        nameWithType: Rubric
        qualifiedName: Domain.Entites.Rubric
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.Entites.Rubric
        name: Rubric
        nameWithType: Rubric
        qualifiedName: Domain.Entites.Rubric
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{Domain.Entites.Rubric}
  DAL.UOW.Repositories.RubricRepository.GetByIdAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.RubricRepository.GetByIdAsync*
        name: GetByIdAsync
        nameWithType: RubricRepository.GetByIdAsync
        qualifiedName: DAL.UOW.Repositories.RubricRepository.GetByIdAsync
      VB:
      - id: DAL.UOW.Repositories.RubricRepository.GetByIdAsync*
        name: GetByIdAsync
        nameWithType: RubricRepository.GetByIdAsync
        qualifiedName: DAL.UOW.Repositories.RubricRepository.GetByIdAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.RubricRepository.GetByIdAsync
  Domain.Entites.Rubric:
    name:
      CSharp:
      - id: Domain.Entites.Rubric
        name: Rubric
        nameWithType: Rubric
        qualifiedName: Domain.Entites.Rubric
      VB:
      - id: Domain.Entites.Rubric
        name: Rubric
        nameWithType: Rubric
        qualifiedName: Domain.Entites.Rubric
    isDefinition: true
    parent: Domain.Entites
    commentId: T:Domain.Entites.Rubric
  DAL.UOW.Repositories.RubricRepository.CreateAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.RubricRepository.CreateAsync*
        name: CreateAsync
        nameWithType: RubricRepository.CreateAsync
        qualifiedName: DAL.UOW.Repositories.RubricRepository.CreateAsync
      VB:
      - id: DAL.UOW.Repositories.RubricRepository.CreateAsync*
        name: CreateAsync
        nameWithType: RubricRepository.CreateAsync
        qualifiedName: DAL.UOW.Repositories.RubricRepository.CreateAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.RubricRepository.CreateAsync
  DAL.UOW.Repositories.RubricRepository.UpdateAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.RubricRepository.UpdateAsync*
        name: UpdateAsync
        nameWithType: RubricRepository.UpdateAsync
        qualifiedName: DAL.UOW.Repositories.RubricRepository.UpdateAsync
      VB:
      - id: DAL.UOW.Repositories.RubricRepository.UpdateAsync*
        name: UpdateAsync
        nameWithType: RubricRepository.UpdateAsync
        qualifiedName: DAL.UOW.Repositories.RubricRepository.UpdateAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.RubricRepository.UpdateAsync
  DAL.UOW.Repositories.RubricRepository.DeleteAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.RubricRepository.DeleteAsync*
        name: DeleteAsync
        nameWithType: RubricRepository.DeleteAsync
        qualifiedName: DAL.UOW.Repositories.RubricRepository.DeleteAsync
      VB:
      - id: DAL.UOW.Repositories.RubricRepository.DeleteAsync*
        name: DeleteAsync
        nameWithType: RubricRepository.DeleteAsync
        qualifiedName: DAL.UOW.Repositories.RubricRepository.DeleteAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.RubricRepository.DeleteAsync
  DAL.UOW.Repositories.RubricRepository.DetailAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.RubricRepository.DetailAsync*
        name: DetailAsync
        nameWithType: RubricRepository.DetailAsync
        qualifiedName: DAL.UOW.Repositories.RubricRepository.DetailAsync
      VB:
      - id: DAL.UOW.Repositories.RubricRepository.DetailAsync*
        name: DetailAsync
        nameWithType: RubricRepository.DetailAsync
        qualifiedName: DAL.UOW.Repositories.RubricRepository.DetailAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.RubricRepository.DetailAsync
  DAL.UOW.Repositories.IRubricRepository.DetailAsync:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IRubricRepository.DetailAsync
        name: DetailAsync
        nameWithType: IRubricRepository.DetailAsync
        qualifiedName: DAL.UOW.Repositories.IRubricRepository.DetailAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DAL.UOW.Repositories.IRubricRepository.DetailAsync
        name: DetailAsync
        nameWithType: IRubricRepository.DetailAsync
        qualifiedName: DAL.UOW.Repositories.IRubricRepository.DetailAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DAL.UOW.Repositories.IRubricRepository
    commentId: M:DAL.UOW.Repositories.IRubricRepository.DetailAsync
  DAL.UOW.Repositories.RubricRepository.DetailByIdAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.RubricRepository.DetailByIdAsync*
        name: DetailByIdAsync
        nameWithType: RubricRepository.DetailByIdAsync
        qualifiedName: DAL.UOW.Repositories.RubricRepository.DetailByIdAsync
      VB:
      - id: DAL.UOW.Repositories.RubricRepository.DetailByIdAsync*
        name: DetailByIdAsync
        nameWithType: RubricRepository.DetailByIdAsync
        qualifiedName: DAL.UOW.Repositories.RubricRepository.DetailByIdAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.RubricRepository.DetailByIdAsync
  DAL.UOW.Repositories.IRubricRepository.DetailByIdAsync(System.Int32):
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IRubricRepository.DetailByIdAsync(System.Int32)
        name: DetailByIdAsync
        nameWithType: IRubricRepository.DetailByIdAsync
        qualifiedName: DAL.UOW.Repositories.IRubricRepository.DetailByIdAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DAL.UOW.Repositories.IRubricRepository.DetailByIdAsync(System.Int32)
        name: DetailByIdAsync
        nameWithType: IRubricRepository.DetailByIdAsync
        qualifiedName: DAL.UOW.Repositories.IRubricRepository.DetailByIdAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DAL.UOW.Repositories.IRubricRepository
    commentId: M:DAL.UOW.Repositories.IRubricRepository.DetailByIdAsync(System.Int32)
  DAL.UOW.Repositories.RubricRepository:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.RubricRepository
        name: RubricRepository
        nameWithType: RubricRepository
        qualifiedName: DAL.UOW.Repositories.RubricRepository
      VB:
      - id: DAL.UOW.Repositories.RubricRepository
        name: RubricRepository
        nameWithType: RubricRepository
        qualifiedName: DAL.UOW.Repositories.RubricRepository
    isDefinition: true
    commentId: T:DAL.UOW.Repositories.RubricRepository
  DAL.UOW.Repositories.TopicRepository.#ctor*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.TopicRepository.#ctor*
        name: TopicRepository
        nameWithType: TopicRepository.TopicRepository
        qualifiedName: DAL.UOW.Repositories.TopicRepository.TopicRepository
      VB:
      - id: DAL.UOW.Repositories.TopicRepository.#ctor*
        name: TopicRepository
        nameWithType: TopicRepository.TopicRepository
        qualifiedName: DAL.UOW.Repositories.TopicRepository.TopicRepository
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.TopicRepository.#ctor
  DAL.UOW.Repositories.TopicRepository.GetAllAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.TopicRepository.GetAllAsync*
        name: GetAllAsync
        nameWithType: TopicRepository.GetAllAsync
        qualifiedName: DAL.UOW.Repositories.TopicRepository.GetAllAsync
      VB:
      - id: DAL.UOW.Repositories.TopicRepository.GetAllAsync*
        name: GetAllAsync
        nameWithType: TopicRepository.GetAllAsync
        qualifiedName: DAL.UOW.Repositories.TopicRepository.GetAllAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.TopicRepository.GetAllAsync
  DAL.UOW.Repositories.TopicRepository.GetAllByRubricIdAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.TopicRepository.GetAllByRubricIdAsync*
        name: GetAllByRubricIdAsync
        nameWithType: TopicRepository.GetAllByRubricIdAsync
        qualifiedName: DAL.UOW.Repositories.TopicRepository.GetAllByRubricIdAsync
      VB:
      - id: DAL.UOW.Repositories.TopicRepository.GetAllByRubricIdAsync*
        name: GetAllByRubricIdAsync
        nameWithType: TopicRepository.GetAllByRubricIdAsync
        qualifiedName: DAL.UOW.Repositories.TopicRepository.GetAllByRubricIdAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.TopicRepository.GetAllByRubricIdAsync
  DAL.UOW.Repositories.ITopicRepository.GetAllByRubricIdAsync(System.Int32):
    name:
      CSharp:
      - id: DAL.UOW.Repositories.ITopicRepository.GetAllByRubricIdAsync(System.Int32)
        name: GetAllByRubricIdAsync
        nameWithType: ITopicRepository.GetAllByRubricIdAsync
        qualifiedName: DAL.UOW.Repositories.ITopicRepository.GetAllByRubricIdAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DAL.UOW.Repositories.ITopicRepository.GetAllByRubricIdAsync(System.Int32)
        name: GetAllByRubricIdAsync
        nameWithType: ITopicRepository.GetAllByRubricIdAsync
        qualifiedName: DAL.UOW.Repositories.ITopicRepository.GetAllByRubricIdAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DAL.UOW.Repositories.ITopicRepository
    commentId: M:DAL.UOW.Repositories.ITopicRepository.GetAllByRubricIdAsync(System.Int32)
  System.Threading.Tasks.Task{Domain.Entites.Topic}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.Entites.Topic
        name: Topic
        nameWithType: Topic
        qualifiedName: Domain.Entites.Topic
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.Entites.Topic
        name: Topic
        nameWithType: Topic
        qualifiedName: Domain.Entites.Topic
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{Domain.Entites.Topic}
  DAL.UOW.Repositories.TopicRepository.GetByIdAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.TopicRepository.GetByIdAsync*
        name: GetByIdAsync
        nameWithType: TopicRepository.GetByIdAsync
        qualifiedName: DAL.UOW.Repositories.TopicRepository.GetByIdAsync
      VB:
      - id: DAL.UOW.Repositories.TopicRepository.GetByIdAsync*
        name: GetByIdAsync
        nameWithType: TopicRepository.GetByIdAsync
        qualifiedName: DAL.UOW.Repositories.TopicRepository.GetByIdAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.TopicRepository.GetByIdAsync
  Domain.Entites.Topic:
    name:
      CSharp:
      - id: Domain.Entites.Topic
        name: Topic
        nameWithType: Topic
        qualifiedName: Domain.Entites.Topic
      VB:
      - id: Domain.Entites.Topic
        name: Topic
        nameWithType: Topic
        qualifiedName: Domain.Entites.Topic
    isDefinition: true
    parent: Domain.Entites
    commentId: T:Domain.Entites.Topic
  DAL.UOW.Repositories.TopicRepository.CreateAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.TopicRepository.CreateAsync*
        name: CreateAsync
        nameWithType: TopicRepository.CreateAsync
        qualifiedName: DAL.UOW.Repositories.TopicRepository.CreateAsync
      VB:
      - id: DAL.UOW.Repositories.TopicRepository.CreateAsync*
        name: CreateAsync
        nameWithType: TopicRepository.CreateAsync
        qualifiedName: DAL.UOW.Repositories.TopicRepository.CreateAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.TopicRepository.CreateAsync
  DAL.UOW.Repositories.TopicRepository.UpdateAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.TopicRepository.UpdateAsync*
        name: UpdateAsync
        nameWithType: TopicRepository.UpdateAsync
        qualifiedName: DAL.UOW.Repositories.TopicRepository.UpdateAsync
      VB:
      - id: DAL.UOW.Repositories.TopicRepository.UpdateAsync*
        name: UpdateAsync
        nameWithType: TopicRepository.UpdateAsync
        qualifiedName: DAL.UOW.Repositories.TopicRepository.UpdateAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.TopicRepository.UpdateAsync
  DAL.UOW.Repositories.TopicRepository.DeleteAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.TopicRepository.DeleteAsync*
        name: DeleteAsync
        nameWithType: TopicRepository.DeleteAsync
        qualifiedName: DAL.UOW.Repositories.TopicRepository.DeleteAsync
      VB:
      - id: DAL.UOW.Repositories.TopicRepository.DeleteAsync*
        name: DeleteAsync
        nameWithType: TopicRepository.DeleteAsync
        qualifiedName: DAL.UOW.Repositories.TopicRepository.DeleteAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.TopicRepository.DeleteAsync
  DAL.UOW.Repositories.TopicRepository.DetailAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.TopicRepository.DetailAsync*
        name: DetailAsync
        nameWithType: TopicRepository.DetailAsync
        qualifiedName: DAL.UOW.Repositories.TopicRepository.DetailAsync
      VB:
      - id: DAL.UOW.Repositories.TopicRepository.DetailAsync*
        name: DetailAsync
        nameWithType: TopicRepository.DetailAsync
        qualifiedName: DAL.UOW.Repositories.TopicRepository.DetailAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.TopicRepository.DetailAsync
  DAL.UOW.Repositories.ITopicRepository.DetailAsync:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.ITopicRepository.DetailAsync
        name: DetailAsync
        nameWithType: ITopicRepository.DetailAsync
        qualifiedName: DAL.UOW.Repositories.ITopicRepository.DetailAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DAL.UOW.Repositories.ITopicRepository.DetailAsync
        name: DetailAsync
        nameWithType: ITopicRepository.DetailAsync
        qualifiedName: DAL.UOW.Repositories.ITopicRepository.DetailAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DAL.UOW.Repositories.ITopicRepository
    commentId: M:DAL.UOW.Repositories.ITopicRepository.DetailAsync
  DAL.UOW.Repositories.TopicRepository.DetailByIdAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.TopicRepository.DetailByIdAsync*
        name: DetailByIdAsync
        nameWithType: TopicRepository.DetailByIdAsync
        qualifiedName: DAL.UOW.Repositories.TopicRepository.DetailByIdAsync
      VB:
      - id: DAL.UOW.Repositories.TopicRepository.DetailByIdAsync*
        name: DetailByIdAsync
        nameWithType: TopicRepository.DetailByIdAsync
        qualifiedName: DAL.UOW.Repositories.TopicRepository.DetailByIdAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.TopicRepository.DetailByIdAsync
  DAL.UOW.Repositories.ITopicRepository.DetailByIdAsync(System.Int32):
    name:
      CSharp:
      - id: DAL.UOW.Repositories.ITopicRepository.DetailByIdAsync(System.Int32)
        name: DetailByIdAsync
        nameWithType: ITopicRepository.DetailByIdAsync
        qualifiedName: DAL.UOW.Repositories.ITopicRepository.DetailByIdAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DAL.UOW.Repositories.ITopicRepository.DetailByIdAsync(System.Int32)
        name: DetailByIdAsync
        nameWithType: ITopicRepository.DetailByIdAsync
        qualifiedName: DAL.UOW.Repositories.ITopicRepository.DetailByIdAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DAL.UOW.Repositories.ITopicRepository
    commentId: M:DAL.UOW.Repositories.ITopicRepository.DetailByIdAsync(System.Int32)
  DAL.UOW.Repositories.TopicRepository:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.TopicRepository
        name: TopicRepository
        nameWithType: TopicRepository
        qualifiedName: DAL.UOW.Repositories.TopicRepository
      VB:
      - id: DAL.UOW.Repositories.TopicRepository
        name: TopicRepository
        nameWithType: TopicRepository
        qualifiedName: DAL.UOW.Repositories.TopicRepository
    isDefinition: true
    commentId: T:DAL.UOW.Repositories.TopicRepository
  DAL.UOW.Repositories.UserRepository.#ctor*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.UserRepository.#ctor*
        name: UserRepository
        nameWithType: UserRepository.UserRepository
        qualifiedName: DAL.UOW.Repositories.UserRepository.UserRepository
      VB:
      - id: DAL.UOW.Repositories.UserRepository.#ctor*
        name: UserRepository
        nameWithType: UserRepository.UserRepository
        qualifiedName: DAL.UOW.Repositories.UserRepository.UserRepository
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.UserRepository.#ctor
  System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Domain.Entites._User}}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Domain.Entites._User
        name: _User
        nameWithType: _User
        qualifiedName: Domain.Entites._User
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Domain.Entites._User
        name: _User
        nameWithType: _User
        qualifiedName: Domain.Entites._User
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Domain.Entites._User}}
  DAL.UOW.Repositories.UserRepository.GetAllAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.UserRepository.GetAllAsync*
        name: GetAllAsync
        nameWithType: UserRepository.GetAllAsync
        qualifiedName: DAL.UOW.Repositories.UserRepository.GetAllAsync
      VB:
      - id: DAL.UOW.Repositories.UserRepository.GetAllAsync*
        name: GetAllAsync
        nameWithType: UserRepository.GetAllAsync
        qualifiedName: DAL.UOW.Repositories.UserRepository.GetAllAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.UserRepository.GetAllAsync
  DAL.UOW.Repositories.UserRepository.GetByIdAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.UserRepository.GetByIdAsync*
        name: GetByIdAsync
        nameWithType: UserRepository.GetByIdAsync
        qualifiedName: DAL.UOW.Repositories.UserRepository.GetByIdAsync
      VB:
      - id: DAL.UOW.Repositories.UserRepository.GetByIdAsync*
        name: GetByIdAsync
        nameWithType: UserRepository.GetByIdAsync
        qualifiedName: DAL.UOW.Repositories.UserRepository.GetByIdAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.UserRepository.GetByIdAsync
  DAL.UOW.Repositories.UserRepository.GetUserBylogin_NameAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.UserRepository.GetUserBylogin_NameAsync*
        name: GetUserBylogin_NameAsync
        nameWithType: UserRepository.GetUserBylogin_NameAsync
        qualifiedName: DAL.UOW.Repositories.UserRepository.GetUserBylogin_NameAsync
      VB:
      - id: DAL.UOW.Repositories.UserRepository.GetUserBylogin_NameAsync*
        name: GetUserBylogin_NameAsync
        nameWithType: UserRepository.GetUserBylogin_NameAsync
        qualifiedName: DAL.UOW.Repositories.UserRepository.GetUserBylogin_NameAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.UserRepository.GetUserBylogin_NameAsync
  DAL.UOW.Repositories.IUserRepository.GetUserBylogin_NameAsync(System.String):
    name:
      CSharp:
      - id: DAL.UOW.Repositories.IUserRepository.GetUserBylogin_NameAsync(System.String)
        name: GetUserBylogin_NameAsync
        nameWithType: IUserRepository.GetUserBylogin_NameAsync
        qualifiedName: DAL.UOW.Repositories.IUserRepository.GetUserBylogin_NameAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DAL.UOW.Repositories.IUserRepository.GetUserBylogin_NameAsync(System.String)
        name: GetUserBylogin_NameAsync
        nameWithType: IUserRepository.GetUserBylogin_NameAsync
        qualifiedName: DAL.UOW.Repositories.IUserRepository.GetUserBylogin_NameAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DAL.UOW.Repositories.IUserRepository
    commentId: M:DAL.UOW.Repositories.IUserRepository.GetUserBylogin_NameAsync(System.String)
  Domain.Entites._User:
    name:
      CSharp:
      - id: Domain.Entites._User
        name: _User
        nameWithType: _User
        qualifiedName: Domain.Entites._User
      VB:
      - id: Domain.Entites._User
        name: _User
        nameWithType: _User
        qualifiedName: Domain.Entites._User
    isDefinition: true
    parent: Domain.Entites
    commentId: T:Domain.Entites._User
  DAL.UOW.Repositories.UserRepository.CreateAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.UserRepository.CreateAsync*
        name: CreateAsync
        nameWithType: UserRepository.CreateAsync
        qualifiedName: DAL.UOW.Repositories.UserRepository.CreateAsync
      VB:
      - id: DAL.UOW.Repositories.UserRepository.CreateAsync*
        name: CreateAsync
        nameWithType: UserRepository.CreateAsync
        qualifiedName: DAL.UOW.Repositories.UserRepository.CreateAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.UserRepository.CreateAsync
  DAL.UOW.Repositories.UserRepository.UpdateAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.UserRepository.UpdateAsync*
        name: UpdateAsync
        nameWithType: UserRepository.UpdateAsync
        qualifiedName: DAL.UOW.Repositories.UserRepository.UpdateAsync
      VB:
      - id: DAL.UOW.Repositories.UserRepository.UpdateAsync*
        name: UpdateAsync
        nameWithType: UserRepository.UpdateAsync
        qualifiedName: DAL.UOW.Repositories.UserRepository.UpdateAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.UserRepository.UpdateAsync
  DAL.UOW.Repositories.UserRepository.DeleteAsync*:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.UserRepository.DeleteAsync*
        name: DeleteAsync
        nameWithType: UserRepository.DeleteAsync
        qualifiedName: DAL.UOW.Repositories.UserRepository.DeleteAsync
      VB:
      - id: DAL.UOW.Repositories.UserRepository.DeleteAsync*
        name: DeleteAsync
        nameWithType: UserRepository.DeleteAsync
        qualifiedName: DAL.UOW.Repositories.UserRepository.DeleteAsync
    isDefinition: true
    commentId: Overload:DAL.UOW.Repositories.UserRepository.DeleteAsync
  DAL.UOW.Repositories.UserRepository:
    name:
      CSharp:
      - id: DAL.UOW.Repositories.UserRepository
        name: UserRepository
        nameWithType: UserRepository
        qualifiedName: DAL.UOW.Repositories.UserRepository
      VB:
      - id: DAL.UOW.Repositories.UserRepository
        name: UserRepository
        nameWithType: UserRepository
        qualifiedName: DAL.UOW.Repositories.UserRepository
    isDefinition: true
    commentId: T:DAL.UOW.Repositories.UserRepository
